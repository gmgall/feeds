<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>~timemachine posts on ctrl-c.club</title><link>https://ctrl-c.club/~timemachine/archives/</link><description>Writing</description><language>en-US</language><lastBuildDate>Mon, 23 Jun 2025 06:23:50 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>LetsEncrypt with Stingy cPanel Hosts</title><link>http://ctrl-c.club/~timemachine/2024/10/01/LetsEncrypt-with-Stingy-cPanel-Hosts/index.html</link><description>&lt;article class="post"&gt;
  &lt;header&gt;
    
    &lt;h1 class="posttitle"&gt;
        LetsEncrypt with Stingy cPanel Hosts
    &lt;/h1&gt;



    &lt;div class="meta"&gt;
      &lt;span class="author"&gt;
        &lt;span&gt;An abridged history of computer programming&lt;/span&gt;
      &lt;/span&gt;
      
    &lt;div class="postdate"&gt;
      
        &lt;time datetime="2024-10-02T00:49:56.000Z"&gt;2024-10-01&lt;/time&gt;
        
      
    &lt;/div&gt;


      

      

    &lt;/div&gt;
  &lt;/header&gt;
  

  &lt;div class="content"&gt;
    &lt;h2 id="Part-1-An-old-enemy"&gt;&lt;a href="#Part-1-An-old-enemy" class="headerlink" title="Part 1: An old enemy"&gt;&lt;/a&gt;Part 1: An old enemy&lt;/h2&gt;&lt;p&gt;I did the cheapest, most obnoxious thing â¦ I bought domain hosting from a Domain Name Registrar. Virtual Hosts, puke.&lt;/p&gt;
&lt;p&gt;It was weakness, really. I have a side project that Iâm working on and needed a brochure site to sell it (more on this in the coming weeks). I know HTML so I slung together some bootstrap nonsense and went domain name hunting. Found a good name too, some real &lt;em&gt;dot-com top-level stuff&lt;/em&gt;. Needed some place to squat it and some static web hosting. My registrar had a deal, 12 months of hosting for a few extra bucks â¦ what is the worst that can happen? Well Iâll tell you!&lt;/p&gt;
&lt;p&gt;The VHost stood up very quickly. Then there was this big, grey button of doom and dread in the middle of the screen, âLAUNCH CPANEL.â All caps. My stomach sank at the word: &lt;em&gt;cPanel&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I use to work with cPanel on the daily back in the 1990s. I worked for a now defunct hosting company manning the racks. We had 20 co-lo racks with 8 to 10 servers per rack and about 40 or so dell PowerEdge desktop units free standing on gorilla racks behind my cubicle. All running Apache and cPanel.&lt;/p&gt;
&lt;p&gt;That job was like painting an aircraft carrier. Took so long to update the os security patches on all the servers that as soon as you finished it was time to start over. Ansible and Chef&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" rel="footnote"&gt;&lt;span class=""&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt; where not realities, just crash carts&lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" rel="footnote"&gt;&lt;span class=""&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt; and bash scripts.&lt;/p&gt;
&lt;p&gt;I wore a headset attached to a wireless phone, &lt;em&gt;ring ring&lt;/em&gt; âNetwork Ops, whatâs down?â&lt;/p&gt;
&lt;p&gt;âYou ran a perl script you found on usenet and now your server is wedged? That shouldnât happenâ¦oh you ran it as root. OK, let me see if I can get it. Nope ssh isnât running anymoreâ¦I can plug into it, what is your security phrase? Of course you donât know it. Should be in an email you got when you signed upâ¦oh the stuck server has your webmail on it? I canât unlock your rack without the security phraseâ¦oh I see, yeah you can call my boss. Iâm sure he remembers you. Iâm sure he will answer your call at 10pm on a Friday.â &lt;em&gt;click&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;ring ring&lt;/em&gt; âNetwork Ops, whatâs down? Hello againâ¦remember that security phrase?â Five years of the same battleship grey.&lt;/p&gt;
&lt;h2 id="Part-2-Least-significant-security"&gt;&lt;a href="#Part-2-Least-significant-security" class="headerlink" title="Part 2: Least significant security"&gt;&lt;/a&gt;Part 2: Least significant security&lt;/h2&gt;&lt;p&gt;&lt;a target="_blank" rel="noopener" href="https://letsencrypt.org/"&gt;Letâs Encrypt&lt;/a&gt; is a free SSL/TLS certificate issuing authority. Those certs are the ones that make the little lock show up in your web browserâs location bar. These days, if you try to access a website thatâs doesnât have a valid cert you get an error about that the site you are visiting being &lt;em&gt;dangerous&lt;/em&gt;. I guess thatâs true.&lt;/p&gt;
&lt;p&gt;If you are taking credit card payments on a web site, Letâs Encrypt shouldnât be your first option. By using their certificates you have to hold them harmless in the event their security is comprized and a bad actor sniffs your siteâs traffic and stealâs your customerâs identity.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you are collecting personal information on the internet alway make sure there is someone else to sue.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But Iâm not making that kind of web site. So a free cert is all Iâm going to pay for.&lt;/p&gt;
&lt;p&gt;I googledâ¦There is a &lt;a target="_blank" rel="noopener" href="https://docs.cpanel.net/knowledge-base/third-party/the-lets-encrypt-plugin/"&gt;cPanel plugin&lt;/a&gt; for fetching a cert from Letâs Encrypt. Easy!&lt;/p&gt;
&lt;p&gt;Oh wait I forgot to mention: my Domain Name Registrar, now Hosting Provider, also sells SSL certificates. Of course they didnât install the plugin to allow their customers to get a freebie. Weâre gonna have to do it the hard way.&lt;/p&gt;
&lt;h2 id="Part-3-Asshole-deep-in-alligators"&gt;&lt;a href="#Part-3-Asshole-deep-in-alligators" class="headerlink" title="Part 3: Asshole deep in alligators"&gt;&lt;/a&gt;Part 3: Asshole deep in alligators&lt;/h2&gt;&lt;p&gt;At its core, cPanel is a bunch of perl code that makes managing virtual hostâs a point an click adventure. It runs on top of the Apache web server and generates configuration files for &lt;a target="_blank" rel="noopener" href="https://httpd.apache.org/"&gt;Apache&lt;/a&gt;, &lt;a target="_blank" rel="noopener" href="https://www.php.net/"&gt;PHP&lt;/a&gt;, &lt;a target="_blank" rel="noopener" href="https://mariadb.org/"&gt;MySQL&lt;/a&gt;, &lt;a target="_blank" rel="noopener" href="https://www.php.net/"&gt;Roundcube&lt;/a&gt;, &lt;a target="_blank" rel="noopener" href="https://linux.die.net/man/5/crontab"&gt;cron&lt;/a&gt;, &lt;a target="_blank" rel="noopener" href="https://linux.die.net/man/8/named"&gt;named(8)&lt;/a&gt; and &lt;a target="_blank" rel="noopener" href="https://linux.die.net/man/2/bind"&gt;bind&lt;/a&gt;. There are also a bunch of installers for Wordpress, Joomla, phpBB, and that short of shovel-ware. We will get back to thisâ¦&lt;/p&gt;
&lt;p&gt;Letâs Encrypt has a command line application you can install, called &lt;em&gt;certbot&lt;/em&gt;. It is a nice piece of kit. You tell certbot what domain you own and the web root on the server for that domain (&lt;code&gt;/var/www/&lt;/code&gt; or there about). Then the certbot creates a file inside a known location on the public facing side or your domain and tells the Letâs Encrypt system to look for it. So if you own &lt;code&gt;example.com&lt;/code&gt;, certbot makes a file at &lt;code&gt;http://example.com/.well-known/acme-challenge&lt;/code&gt;. There is a hash in that file that only certbot and Letâs Encrypt know, and agree on. If the remote Letâs Encrypt server sees the right hash at the url, then they know you own the domain. So they issue you the certificate.&lt;/p&gt;
&lt;p&gt;Certbot then installs the cert on the server, restarts the httpd service, and finally registers a &lt;em&gt;cron&lt;/em&gt; job to check back every few days to keep the cert up-to-date (they expire after 3 months).&lt;/p&gt;
&lt;p&gt;Unfortunately, certbot wants to be installed and run as root. Which is fine, it is going to restart services on the host, it needs escalated privileges. But this is a shared host, I ainât got no root access. &lt;/p&gt;
&lt;p&gt;There are non-root ways to use the Letâs Encrypt system. I could, for example, run certbot on my local desktop. It will tell me the secret code to upload to the website and then spit out the certificates for me to install by handâ¦Or I could create a &lt;code&gt;TXT&lt;/code&gt; record in the DNS entries for the site install the cert by handâ¦every 3 months. Iâm sure Iâll never forget. No risk of a potential customer going to my site and seeing that &lt;em&gt;using this website will cause identity theft and your credit score will instantly go into the single digit range&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I know how certbot orchestrates generating the TLS certifications, the protocol is called ACME. And I can get dangerous with cPanel. So I take a deep breath and dive in.&lt;/p&gt;
&lt;h2 id="Part-4-Hack-and-slash-solutions"&gt;&lt;a href="#Part-4-Hack-and-slash-solutions" class="headerlink" title="Part 4: Hack and slash solutions"&gt;&lt;/a&gt;Part 4: Hack and slash solutions&lt;/h2&gt;&lt;p&gt;I need a non-root ACME client that runs in a language that I have available on the vhost. &lt;a target="_blank" rel="noopener" href="https://letsencrypt.org/docs/client-options/"&gt;There is a list of recommendations on the Letâs Encrypt site&lt;/a&gt;. I picked a php script called &lt;a target="_blank" rel="noopener" href="https://letsencrypt.org/docs/client-options/"&gt;acme-client.phar&lt;/a&gt; (&lt;em&gt;phar&lt;/em&gt; is the PHp ARchive format). I used FTP (file transfer protocol) to ship the phar and a Yaml config to the server and ran it. How did I run it? &lt;/p&gt;
&lt;p&gt;I used cPanelâs &lt;em&gt;crontab&lt;/em&gt; editor to run it, of course. &lt;/p&gt;
&lt;p&gt;Cron letâs you run scripts on a schedule. For example, &lt;em&gt;back up the database every morning at 1am&lt;/em&gt;. You just need to know the command, and cPanel has a fancy interface to copy/paste and configure those commands to run.  &lt;/p&gt;
&lt;p&gt;I created an entry in cron to run at &lt;em&gt;3 minutes after I made the entry&lt;/em&gt; and then deleted it. So it was like I was logged into the console, only harder.&lt;/p&gt;
&lt;p&gt;The entry looked like this:&lt;/p&gt;
&lt;figure class="highlight plaintext"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;33 * * * * /usr/local/bin/php -d display_errors=on $HOME/bin/acme-client.phar &amp;gt;&amp;gt; $HOME/logs/cert_renew.log&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The vhost had phpâs configuration set to not show errors (known source of vulnerabilities) so I fixed that with, &lt;code&gt;-d display_errors=on&lt;/code&gt;. Then I have the output logged to a file I can download and debug, or confirm that it worked.&lt;/p&gt;
&lt;p&gt;Here is the Yaml config for acme-client.phar:&lt;/p&gt;
&lt;figure class="highlight yaml"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;&lt;span class="attr"&gt;storage:&lt;/span&gt; &lt;span class="string"&gt;~/ssl/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="attr"&gt;server:&lt;/span&gt; &lt;span class="string"&gt;letsencrypt&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="attr"&gt;email:&lt;/span&gt; &lt;span class="string"&gt;me@exmaple.com&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="attr"&gt;certificates:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    &lt;span class="bullet"&gt;-&lt;/span&gt; &lt;span class="attr"&gt;rekey:&lt;/span&gt; &lt;span class="literal"&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;        &lt;span class="attr"&gt;paths:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;        &lt;span class="string"&gt;~/public_html:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;                &lt;span class="bullet"&gt;-&lt;/span&gt; &lt;span class="string"&gt;exmaple.com&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;                &lt;span class="bullet"&gt;-&lt;/span&gt; &lt;span class="string"&gt;mail.exmaple.com&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;                &lt;span class="bullet"&gt;-&lt;/span&gt; &lt;span class="string"&gt;www.exmaple.com&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;                &lt;span class="bullet"&gt;-&lt;/span&gt; &lt;span class="string"&gt;cpanel.exmaple.com&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;                &lt;span class="bullet"&gt;-&lt;/span&gt; &lt;span class="string"&gt;webmail.exmaple.com&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;                &lt;span class="bullet"&gt;-&lt;/span&gt; &lt;span class="string"&gt;webdisk.exmaple.com&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;                &lt;span class="bullet"&gt;-&lt;/span&gt; &lt;span class="string"&gt;cpcontacts.exmaple.com&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;                &lt;span class="bullet"&gt;-&lt;/span&gt; &lt;span class="string"&gt;cpcalendars.exmaple.com&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;                &lt;span class="bullet"&gt;-&lt;/span&gt; &lt;span class="string"&gt;autodiscover.exmaple.com&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Worked sweet! Now I have a bundle of SSL/TLS &lt;em&gt;pem&lt;/em&gt; files that prove I own the domain. All I need to do now is &lt;em&gt;not&lt;/em&gt; install them by hand!&lt;/p&gt;
&lt;h2 id="Part-5-Iâll-let-myself-in"&gt;&lt;a href="#Part-5-I%C3%A2%C2%80%C2%99ll-let-myself-in" class="headerlink" title="Part 5: Iâll let myself in"&gt;&lt;/a&gt;Part 5: Iâll let myself in&lt;/h2&gt;&lt;p&gt;There is another cPanel plugin that lets you configure your certificates. Basically some big text boxes in the browser for you copy/paste the bundle from your supplier. Not a big deal if you buy the cert from the hosting company because the ones you pay for usually donât expire for 1 to 3 years. &lt;/p&gt;
&lt;p&gt;If cPanel has a plugin for it there is an API for it. Cold truth. After all, it is just a trash heap of perl and php scripts. &lt;a target="_blank" rel="noopener" href="https://api.docs.cpanel.net/openapi/cpanel/operation/install_ssl/"&gt;This&lt;/a&gt; is true for the tools that install ssl certs. The command loads the certificate, makes an entry in the Apache config for your virtual host, and restarts the server. Just like certbot would have :)&lt;/p&gt;
&lt;p&gt;Here is another script for you to run from cron that calls the cPanel command to install those ill-gotten certificates:&lt;/p&gt;
&lt;figure class="highlight php"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;&lt;span class="meta"&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="keyword"&gt;print&lt;/span&gt; &lt;span class="string"&gt;"Copying certificates to cPanel\n"&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="variable"&gt;$storage&lt;/span&gt; = &lt;span class="variable"&gt;$_SERVER&lt;/span&gt;[&lt;span class="string"&gt;'HOME'&lt;/span&gt;] . &lt;span class="string"&gt;"/ssl/certs/acme-v02.api.letsencrypt.org.directory/"&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="variable"&gt;$url&lt;/span&gt; = &lt;span class="string"&gt;"example.com"&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="variable"&gt;$cert&lt;/span&gt; = &lt;span class="title function_ invoke__"&gt;file_get_contents&lt;/span&gt;(&lt;span class="variable"&gt;$storage&lt;/span&gt; . &lt;span class="variable"&gt;$url&lt;/span&gt; . &lt;span class="string"&gt;"/cert.pem"&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="variable"&gt;$key&lt;/span&gt; = &lt;span class="title function_ invoke__"&gt;file_get_contents&lt;/span&gt;(&lt;span class="variable"&gt;$storage&lt;/span&gt; . &lt;span class="variable"&gt;$url&lt;/span&gt; . &lt;span class="string"&gt;"/key.pem"&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="keyword"&gt;if&lt;/span&gt; (&lt;span class="variable"&gt;$cert&lt;/span&gt; === &lt;span class="literal"&gt;false&lt;/span&gt; || &lt;span class="variable"&gt;$key&lt;/span&gt; === &lt;span class="literal"&gt;false&lt;/span&gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    &lt;span class="keyword"&gt;print&lt;/span&gt; &lt;span class="string"&gt;"Error reading certificate or key file\n"&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    &lt;span class="keyword"&gt;exit&lt;/span&gt;(&lt;span class="number"&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="variable"&gt;$cert&lt;/span&gt; = &lt;span class="title function_ invoke__"&gt;urlencode&lt;/span&gt;(&lt;span class="variable"&gt;$cert&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="variable"&gt;$key&lt;/span&gt; = &lt;span class="title function_ invoke__"&gt;urlencode&lt;/span&gt;(&lt;span class="variable"&gt;$key&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="variable"&gt;$response&lt;/span&gt; = `uapi --output=jsonpretty SSL install_ssl domain=&lt;span class="string"&gt;'$url'&lt;/span&gt; cert=&lt;span class="string"&gt;'$cert'&lt;/span&gt; key=&lt;span class="string"&gt;'$key'&lt;/span&gt;`;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="keyword"&gt;print&lt;/span&gt; &lt;span class="string"&gt;"Done\n\n &lt;span class="subst"&gt;$response&lt;/span&gt;\n"&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The last detail is making a final cron job to renew the certificate once a month:&lt;/p&gt;
&lt;figure class="highlight bash"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;&lt;span class="meta"&gt;#!/usr/bin/env bash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="built_in"&gt;export&lt;/span&gt; PATH=&lt;span class="string"&gt;'/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;php -d display_errors=on &lt;span class="variable"&gt;$HOME&lt;/span&gt;/bin/acme-client.phar &amp;gt;&amp;gt; &lt;span class="variable"&gt;$HOME&lt;/span&gt;/logs/cert_renew.log&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;RC=$?&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="keyword"&gt;if&lt;/span&gt; [ &lt;span class="variable"&gt;$RC&lt;/span&gt; = 4 ] || [ &lt;span class="variable"&gt;$RC&lt;/span&gt; = 5 ]; &lt;span class="keyword"&gt;then&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  php -d display_errors=on &lt;span class="variable"&gt;$HOME&lt;/span&gt;/bin/install_certs.php &amp;gt;&amp;gt; &lt;span class="variable"&gt;$HOME&lt;/span&gt;/logs/cert_renew.log&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="keyword"&gt;fi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The lengths and determination I take to save $100â¦ thanks for reading.&lt;/p&gt;
&lt;div id="footnotes"&gt;&lt;hr&gt;&lt;div id="footnotelist"&gt;&lt;ol&gt;&lt;li id="fn:1"&gt;&lt;span&gt;1.&lt;/span&gt;&lt;span&gt;&lt;p&gt;Tools for automating and distributing tasks across clusters of servers. Ansible was released in 2012. Chef in 2009, well over a decade before my days running Yum commands in ssh terminals.&lt;/p&gt;
&lt;a href="#fnref:1" rev="footnote"&gt; &amp;amp;hookleftarrow;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li id="fn:2"&gt;&lt;span&gt;2.&lt;/span&gt;&lt;span&gt;&lt;p&gt;A &lt;em&gt;Crash cart&lt;/em&gt; is a piece of server room furniture. Usually a double decker table on wheels. On the top tier is a monitor, key board, and mouse for plugging into the a server and getting direct console access. Useful for when the machine is so broken it wonât accept connections over the network. The second shelf if home to network cables, a spare battery for the wireless phone, a tool bag to dismantle the server, and 5 or more empty diet coke cans. &lt;strong&gt;No food or drink in the server room!&lt;/strong&gt;&lt;/p&gt;
&lt;a href="#fnref:2" rev="footnote"&gt; &amp;amp;hookleftarrow;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/article&gt;



        
          </description><author>Timemachine</author><guid isPermaLink="true">https://ctrl-c.club/~timemachine/2024/10/01/LetsEncrypt-with-Stingy-cPanel-Hosts/</guid><pubDate>Tue, 01 Oct 2024 00:00:00 GMT</pubDate></item><item><title>Code Review: Axios</title><link>http://ctrl-c.club/~timemachine/2020/10/07/code-review-axios/index.html</link><description>&lt;article class="post"&gt;
  &lt;header&gt;
    
    &lt;h1 class="posttitle"&gt;
        Code Review: Axios
    &lt;/h1&gt;



    &lt;div class="meta"&gt;
      &lt;span class="author"&gt;
        &lt;span&gt;An abridged history of computer programming&lt;/span&gt;
      &lt;/span&gt;
      
    &lt;div class="postdate"&gt;
      
        &lt;time datetime="2020-10-08T02:49:11.000Z"&gt;2020-10-07&lt;/time&gt;
        
      
    &lt;/div&gt;


      

      
    &lt;div class="article-tag"&gt;
        &lt;i class="fas fa-tag"&gt;&lt;/i&gt;
        &lt;a class="tag-link-link" href="/~timemachine/tags/Code-Review/" rel="tag"&gt;Code Review&lt;/a&gt;, &lt;a class="tag-link-link" href="/~timemachine/tags/JavaScript/" rel="tag"&gt;JavaScript&lt;/a&gt;, &lt;a class="tag-link-link" href="/~timemachine/tags/Programming/" rel="tag"&gt;Programming&lt;/a&gt;
    &lt;/div&gt;


    &lt;/div&gt;
  &lt;/header&gt;
  

  &lt;div class="content"&gt;
    &lt;blockquote&gt;
&lt;p&gt;This article is in a series of code review articles that take a
deep look at a popular module and discuss its merits, flaws, and
overall fitness for a task.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="Summary"&gt;&lt;a href="#Summary" class="headerlink" title="Summary"&gt;&lt;/a&gt;Summary&lt;/h2&gt;&lt;p&gt;&lt;a target="_blank" rel="noopener" href="https://github.com/axios/axios"&gt;Axios&lt;/a&gt; is a solid, battle-tested, replacement for the deprecated &lt;code&gt;require.js&lt;/code&gt;. I
recommend it despite the imperfections that I have summarized in this article.&lt;/p&gt;
&lt;p&gt;The logic in this package is well thought out and meets my standards. Some of
the more complex functions are arduous to read. This makes collaboration from
the development community difficult and undermines the overall effectiveness of
the project.&lt;/p&gt;
&lt;p&gt;The interceptor system is a workable solution for extending the package
functions. Personally, I have wrapped request/response to extend error reporting
and the updates felt natural and a seamless transition.&lt;/p&gt;
&lt;p&gt;There are two test runners in the project: Mocha (for node.js) and Jasmine/Karma
(for browser testing). This is unnecessary as both test packages can run both
platforms. A large number of the tests are written for jasmine and will not
run, without modification in the mocha test suite. This prevents me from
showing full code coverage without hacking on the tests (more on this later). &lt;/p&gt;
&lt;p&gt;Running &lt;code&gt;npm test&lt;/code&gt; takes many minutes and fails, by default, if the developer
does not have the Opera browser installed. I can understand that an exhaustive
integration run in a multi-target package is a long process. Fleshing out the
Mocha test suite to run on the command line in a second npm script would
encourage test-driven refactoring and make many of the improvements I outline
much simpler and safer. Iterative, refactoring tests must be fast, sane, and
meaningful. They need not be exhaustive. The exhaustive testing can be saved
for pre-release and proofing pull-requests.&lt;/p&gt;
&lt;p&gt;The current version is &lt;code&gt;0.20.0&lt;/code&gt;. There is no explicit roadmap for the project;
however, I do not see a reason for the delay in assigning version &lt;code&gt;1.0.0&lt;/code&gt; to this
release.&lt;/p&gt;
&lt;h2 id="About-Reviewed-Version-amp-System"&gt;&lt;a href="#About-Reviewed-Version-amp-System" class="headerlink" title="About Reviewed Version &amp;amp; System"&gt;&lt;/a&gt;About Reviewed Version &amp;amp; System&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Repository: &lt;a target="_blank" rel="noopener" href="https://github.com/axios/axios"&gt;https://github.com/axios/axios&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Reviewed Commit Hash: &lt;code&gt;6d05b96dcae6c82e28b049fce3d4d44e6d15a9bc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Average weekly downloads: 12 million&lt;/li&gt;
&lt;li&gt;Version: 0.20.0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;du -sh dist&lt;/code&gt;: 244K&lt;/li&gt;
&lt;li&gt;Dependencies: 1&lt;ul&gt;
&lt;li&gt;follow-redirects&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Node: v14.10.1&lt;/li&gt;
&lt;li&gt;npm: 4.16.8&lt;/li&gt;
&lt;li&gt;uname -a&lt;ul&gt;
&lt;li&gt;Linux morlock 5.4.0-7642-generic #46~1598628707~20.04~040157c-Ubuntu x86_64 GNU/Linux&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Axios is a promise-based HTTP client. It is available for use in the
browser (wrapping around XMLHttpRequest) or in node.js (wrapping the
built-in &lt;code&gt;http&lt;/code&gt; module.&lt;/p&gt;
&lt;h2 id="Setup"&gt;&lt;a href="#Setup" class="headerlink" title="Setup"&gt;&lt;/a&gt;Setup&lt;/h2&gt;&lt;figure class="highlight plain"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;â pilot@morlock ~/Projects/codereview % git clone https://github.com/axios/axios.git&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;Cloning into 'axios'...&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;... &amp;lt;snip&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;â pilot@morlock ~/Projects/codereview % npm install&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;... &amp;lt;snip&amp;gt; npm WARN deprecated 18 messages&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&amp;gt; iltorb@2.4.5 install /home/pilot/Projects/codereview/axios/node_modules/iltorb&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&amp;gt; node ./scripts/install.js || node-gyp rebuild&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;... &amp;lt;snip&amp;gt; Complation messages for node_modules/iltorb&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;... &amp;lt;snip&amp;gt; package postinstall garbage&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;npm notice created a lockfile as package-lock.json. You should commit this file.&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;npm WARN notsup Unsupported engine for karma@1.7.1: wanted: {"node":"0.10 || 0.12 || 4 || 5 || 6 || 7 || 8"} (current: {"node":"14.10.1","npm":"6.14.8"})&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;npm WARN notsup Not compatible with your version of node/npm: karma@1.7.1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@^1.2.7 (node_modules/chokidar/node_modules/fsevents):&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.13: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;npm WARN ajv-keywords@2.1.1 requires a peer of ajv@^5.0.0 but none is installed. You must install peer dependencies yourself.&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;added 975 packages from 1871 contributors and audited 978 packages in 61.395s&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;11 packages are looking for funding&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  run `npm fund` for details&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;found 33 vulnerabilities (22 low, 10 high, 1 critical)&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  run `npm audit fix` to fix them, or `npm audit` for details&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Installed 975 packages. All but one are dev.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;axios&lt;/code&gt; installs &lt;code&gt;bundlesize@^0.17.0&lt;/code&gt;, which is a drop-in
replacement for &lt;code&gt;du -sh&lt;/code&gt; (if &lt;code&gt;du&lt;/code&gt; required oAuth read/write access to your
github account). Bundlesize uses a hand full of compression modules, including
&lt;code&gt;iltorb&lt;/code&gt;. &lt;code&gt;iltorb&lt;/code&gt; is deprecated garbage. &lt;/p&gt;
&lt;h3 id="NPM-Audit-Review"&gt;&lt;a href="#NPM-Audit-Review" class="headerlink" title="NPM Audit Review"&gt;&lt;/a&gt;NPM Audit Review&lt;/h3&gt;&lt;figure class="highlight plain"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;â pilot@morlock ~/Projects/codereview/axios % npm --no-color audit &amp;gt; audit.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Iâm not going to detail all of the audit warnings, they are mostly from the
&lt;a target="_blank" rel="noopener" href="https://github.com/visionmedia/debug/pull/504/files"&gt;&lt;code&gt;debug&lt;/code&gt; package&lt;/a&gt; and itâs
&lt;a target="_blank" rel="noopener" href="https://npmjs.com/advisories/534"&gt;DDoS Regex&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The first High level security threat is from installing the &lt;code&gt;karma&lt;/code&gt; test runner:&lt;/p&gt;
&lt;figure class="highlight plain"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;â pilot@morlock ~/Projects/codereview/axios % npm ls ws&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;axios@0.20.0 /home/pilot/Projects/codereview/axios&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;âââ¬ karma@1.7.1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  âââ¬ socket.io@1.7.3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    âââ¬ engine.io@1.8.3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    â âââ ws@1.1.2 &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    âââ¬ socket.io-client@1.7.3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;      âââ¬ engine.io-client@1.8.3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;        âââ ws@1.1.2  deduped&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;That is an extremely old version of &lt;code&gt;ws&lt;/code&gt;. &lt;a target="_blank" rel="noopener" href="https://www.npmjs.com/advisories/550"&gt;It has been
fixed&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I love &lt;code&gt;lodash&lt;/code&gt; for the creativity of its codebase, the way the developers
step up to the challenge of being faster than native, but never user it. NPM
awards &lt;code&gt;lodash&lt;/code&gt;âs prototype pollution (actually polyfills) a &lt;code&gt;High&lt;/code&gt; level alert.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;karma&lt;/code&gt; also depends on an old version of &lt;code&gt;chokidar&lt;/code&gt;, but &lt;a target="_blank" rel="noopener" href="https://paulmillr.com/posts/chokidar-3-save-32tb-of-traffic/"&gt;new chokidar is way
cooler&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Critical&lt;/code&gt; alert award goes to: &lt;code&gt;webpack-dev-server&lt;/code&gt; â¦ &lt;a target="_blank" rel="noopener" href="https://npmjs.com/advisories/725"&gt;kind of a let
down&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target="_blank" rel="noopener" href="https://npmjs.com/advisories/528"&gt;&lt;code&gt;parsejson&lt;/code&gt; is installed&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I went into all the depth here because it is important to note that while all of
these dependencies are dev only, they are eliminated by just updating the
dependencies&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" rel="footnote"&gt;&lt;span class=""&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;. This is a bad code smell and indicator of lazy development cycles. &lt;/p&gt;
&lt;h2 id="Running-the-tests"&gt;&lt;a href="#Running-the-tests" class="headerlink" title="Running the tests"&gt;&lt;/a&gt;Running the tests&lt;/h2&gt;&lt;figure class="highlight plain"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;â pilot@morlock ~/Projects/codereview/axios % npm test&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&amp;gt; axios@0.20.0 test /home/pilot/Projects/codereview/axios&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&amp;gt; grunt test &amp;amp;&amp;amp; bundlesize&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;Running "eslint:target" (eslint) task&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;Running "mochaTest:test" (mochaTest) task&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;... &amp;lt;snip&amp;gt; Test list&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  29 passing (730ms)&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  1 pending&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;Running "karma:single" (karma) task&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;Running locally since SAUCE_USERNAME and SAUCE_ACCESS_KEY environment variables are not set.&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;(node:26309) Warning: Accessing non-existent property 'VERSION' of module exports inside circular dependency&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;(Use `node --trace-warnings ...` to show where the warning was created)&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;Hash: f4683f5fa2953dc3a97c&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;Version: webpack 1.15.0&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;Time: 27ms&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;webpack: Compiled successfully.&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;webpack: Compiling...&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;webpack: wait until bundle finished: &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&amp;lt;snip&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;Hash: 17b067e2f01905fd51bf&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    Version: webpack 1.15.0&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;Time: 844ms&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&amp;lt;snip&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;webpack: Compiled successfully.&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;07 10 2020 23:56:29.288:INFO [karma]: Karma v1.7.1 server started at http://0.0.0.0:9876/&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;07 10 2020 23:56:29.289:INFO [launcher]: Launching browsers Firefox, Chrome, Safari, Opera with unlimited concurrency&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;07 10 2020 23:56:29.294:INFO [launcher]: Starting browser Firefox&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;07 10 2020 23:56:29.311:INFO [launcher]: Starting browser Chrome&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;07 10 2020 23:56:29.328:INFO [launcher]: Starting browser Safari&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;07 10 2020 23:56:29.351:INFO [launcher]: Starting browser Opera&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;07 10 2020 23:56:29.388:ERROR [launcher]: No binary for Safari browser on your platform.&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  Please, set "SAFARI_BIN" env variable.&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;07 10 2020 23:56:32.140:INFO [Chrome 85.0.4183 (Linux 0.0.0)]: Connected on socket OZh8d5JZl6lqIyL8AAAA with id 4718835&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;................................................................................&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;................................................................................&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;................................................................................&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;......&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;Chrome 85.0.4183 (Linux 0.0.0): Executed 246 of 246 SUCCESS (2.522 secs / 2.462 secs)&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;07 10 2020 23:56:35.007:INFO [Firefox 81.0.0 (Ubuntu 0.0.0)]: Connected on socket -qEkpSILYreupv-OAAAB with id 87695166&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;................................................................................&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;................................................................................&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;................................................................................&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;......&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;Firefox 81.0.0 (Ubuntu 0.0.0): Executed 246 of 246 SUCCESS (2.512 secs / 2.455 secs)&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;08 10 2020 00:00:29.394:WARN [launcher]: Opera have not captured in 240000 ms, killing.&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;08 10 2020 00:00:31.398:WARN [launcher]: Opera was not killed in 2000 ms, sending SIGKILL.&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;08 10 2020 00:00:33.400:WARN [launcher]: Opera was not killed by SIGKILL in 2000 ms, continuing.&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;TOTAL: 492 SUCCESS&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;Warning: Task "karma:single" failed. Use --force to continue.&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;Aborted due to warnings.&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;npm ERR! Test failed.  See above for more details.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;All tests passedâ¦ Except for the Opera tests; but I donât have the opera
browser installed, nor does anyone else.&lt;/p&gt;
&lt;p&gt;It is interesting to note that karma detected immediately that I do not have
Safari installed; but took over two minutes to not find Opera.  This is an old
version of karma so I can not criticise.&lt;/p&gt;
&lt;p&gt;One of the mocha tests is skipped: &lt;code&gt;should support sockets&lt;/code&gt;. Setting this test to
run passes&lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" rel="footnote"&gt;&lt;span class=""&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h2 id="Code-Coverage"&gt;&lt;a href="#Code-Coverage" class="headerlink" title="Code Coverage"&gt;&lt;/a&gt;Code Coverage&lt;/h2&gt;&lt;p&gt;This was not as straightforward as I thought it would be. The &lt;code&gt;package.json&lt;/code&gt;
has an entry for &lt;code&gt;coveralls&lt;/code&gt; but the &lt;code&gt;lcov&lt;/code&gt; file wasnât generated by the test
run. Looking in &lt;code&gt;node_modules&lt;/code&gt; I donât see an entry for &lt;code&gt;blanket.js&lt;/code&gt;. &lt;em&gt;Another
bad smell.&lt;/em&gt; Checking the &lt;code&gt;travis-ci&lt;/code&gt; runs for the project they all error on &lt;code&gt;npm run coveralls&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Letâs live dangerously:&lt;/p&gt;
&lt;figure class="highlight plain"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;50&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;â pilot@morlock ~/Projects/codereview/axios % npx nyc@latest npm test&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;npx: installed 141 in 5.972s&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&amp;gt; axios@0.20.0 test /home/pilot/Projects/codereview/axios&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&amp;gt; grunt test &amp;amp;&amp;amp; bundlesize&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;Running "eslint:target" (eslint) task&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;Running "mochaTest:test" (mochaTest) task&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;... &amp;lt;snip&amp;gt; Test list&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;-------------------------|---------|----------|---------|---------|-----------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;File                     | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s                 &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;-------------------------|---------|----------|---------|---------|-----------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;All files                |   79.21 |    62.78 |   79.44 |   79.73 |                                   &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt; axios                   |   33.33 |    11.36 |      40 |   34.69 |                                   &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  Gruntfile.js           |   43.75 |        0 |      50 |      50 | 92-101                            &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  index.js               |     100 |      100 |     100 |     100 |                                   &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  karma.conf.js          |   26.47 |     11.9 |   33.33 |   26.47 | 7,20-109,111-115                  &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt; axios/lib               |   85.71 |    72.94 |   82.35 |   85.22 |                                   &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  axios.js               |   90.91 |      100 |   33.33 |   90.91 | 36,46                             &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  defaults.js            |   88.57 |    82.14 |     100 |   88.57 | 20,44,47-48                       &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  utils.js               |   82.26 |    68.42 |   83.33 |   81.03 | 73,95,130,190-214,235,241,280,284 &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt; axios/lib/adapters      |   93.88 |    78.69 |     100 |    95.8 |                                   &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  http.js                |   93.88 |    78.69 |     100 |    95.8 | 42,46,93,118,122,164              &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt; axios/lib/cancel        |   84.62 |       50 |   88.89 |   84.62 |                                   &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  Cancel.js              |      80 |        0 |      50 |      80 | 14                                &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  CancelToken.js         |   84.21 |       50 |     100 |   84.21 | 13,25,38                          &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  isCancel.js            |     100 |      100 |     100 |     100 |                                   &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt; axios/lib/core          |   87.32 |    74.65 |   78.79 |   87.32 |                                   &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  Axios.js               |   75.68 |    56.25 |   66.67 |   75.68 | 31-32,42-45,53,57,68-69           &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  InterceptorManager.js  |   53.85 |        0 |      40 |   53.85 | 18-22,31-32,46-47                 &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  buildFullPath.js       |     100 |      100 |     100 |     100 |                                   &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  createError.js         |     100 |      100 |     100 |     100 |                                   &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  dispatchRequest.js     |   95.65 |    68.75 |     100 |   95.65 | 69                                &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  enhanceError.js        |      90 |      100 |      50 |      90 | 24                                &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  mergeConfig.js         |     100 |    95.83 |     100 |     100 | 15                                &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  settle.js              |   83.33 |       80 |     100 |   83.33 | 17                                &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  transformData.js       |     100 |      100 |     100 |     100 |                                   &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt; axios/lib/helpers       |   40.82 |    17.86 |   58.33 |   39.58 |                                   &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  bind.js                |     100 |      100 |     100 |     100 |                                   &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  buildURL.js            |   13.79 |     4.55 |      25 |   13.79 | 6,29-69                           &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  combineURLs.js         |     100 |       50 |     100 |     100 | 11                                &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  isAbsoluteURL.js       |     100 |      100 |     100 |     100 |                                   &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  normalizeHeaderName.js |   66.67 |       75 |     100 |   66.67 | 8-9                               &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  spread.js              |   33.33 |      100 |       0 |   33.33 | 24-25                             &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;-------------------------|---------|----------|---------|---------|-----------------------------------&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Not bad for a zero-config nyc run. &lt;/p&gt;
&lt;p&gt;&lt;a href="/~timemachine/codereview/axios@0.20.0/"&gt;See the full report here&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="Digging-In"&gt;&lt;a href="#Digging-In" class="headerlink" title="Digging In"&gt;&lt;/a&gt;Digging In&lt;/h2&gt;&lt;p&gt;Now that all that boilerplate is out of the way letâs look through the code.
File by file:&lt;/p&gt;
&lt;h3 id="lib-axios-js"&gt;&lt;a href="#lib-axios-js" class="headerlink" title="lib/axios.js"&gt;&lt;/a&gt;&lt;a href="/~timemachine/codereview/axios@0.20.0/lib/axios.js.html"&gt;lib/axios.js&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The &lt;code&gt;package.json&lt;/code&gt; lists the default entry point as &lt;code&gt;/index.js&lt;/code&gt; but that just
exports &lt;code&gt;lib/axios.js&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;This is a general module building/exporting file. A default instance is created:
&lt;code&gt;axios&lt;/code&gt; and then some other helpers are glued onto it.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;axios: for the simple &lt;em&gt;requarian&lt;/em&gt;, &lt;code&gt;cosnt axios = require('axios');&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;axios.Axios: for &lt;em&gt;classical&lt;/em&gt; &lt;code&gt;new Axios()&lt;/code&gt; constructing.&lt;/li&gt;
&lt;li&gt;axios.create: for the &lt;em&gt;&lt;a target="_blank" rel="noopener" href="https://crockford.com/javascript/prototypal.html"&gt;Crockfordian&lt;/a&gt;&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The bizarre part of this is that all of the above give you different results.
The requarian form is constructed with a set of defaults from
&lt;code&gt;lib/defaults.js&lt;/code&gt;; the classical constructor has no defaults;
&lt;code&gt;axios.create&lt;/code&gt; merges the supplied configuration with the defaults.&lt;/p&gt;
&lt;h3 id="lib-defaults-js"&gt;&lt;a href="#lib-defaults-js" class="headerlink" title="lib/defaults.js"&gt;&lt;/a&gt;&lt;a href="/~timemachine/codereview/axios@0.20.0/lib/defaults.js.html"&gt;lib/defaults.js&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Simple and sane defaults. However, the
&lt;a href="/~timemachine/codereview/axios@0.20.0/lib/defaults.js.html#L16"&gt;&lt;code&gt;getDefaultAdapter()&lt;/code&gt;&lt;/a&gt;
function allows me to point out one of the stinkiest code
smells: &lt;em&gt;All if â¦ else if constructs shall be terminated with an else clause.&lt;/em&gt;
(See MISRA-C:2004, Rule 14.10, no online links, sorry).&lt;/p&gt;
&lt;p&gt;This function should be terminated with an &lt;code&gt;else { throw new Error('Axios does not support this platform') }&lt;/code&gt; clause. That uncaught fall though leaves the
default adapter as &lt;code&gt;undefined&lt;/code&gt; and the application in an unknown state.&lt;/p&gt;
&lt;h4 id="Dynamic-Imports"&gt;&lt;a href="#Dynamic-Imports" class="headerlink" title="Dynamic Imports"&gt;&lt;/a&gt;Dynamic Imports&lt;/h4&gt;&lt;p&gt;While picking on &lt;code&gt;getDefaultAdapter()&lt;/code&gt;, there are two synchronous &lt;code&gt;require&lt;/code&gt;
calls. First, I have to say that putting requires calls deep in function logic is
a red flag; donât do it, ever. Secondly, itâs fine to do it hereâ¦&lt;/p&gt;
&lt;p&gt;Let me explain by assessing the 3 potential code paths, from the bottom up:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The default path: As I explained above the default path is to just return
&lt;code&gt;undefined&lt;/code&gt;. No harm from the synchronous calls.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Browsers: In the context of the browser the &lt;code&gt;require&lt;/code&gt; function is provided by webpack. The function is synchronous; however, webpack barfs all the javascript assets into memory on page load. Thus, require,
in this context doesnât result in a bad turn&lt;sup id="fnref:3"&gt;&lt;a href="#fn:3" rel="footnote"&gt;&lt;span class=""&gt;[3]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Node.js: &lt;a target="_blank" rel="noopener" href="https://github.com/nodejs/node/blob/master/lib/internal/modules/cjs/loader.js#L717"&gt;nodeâs module
resolution&lt;/a&gt;
uses a caching system that only reads the file once from disk, the first time
it is encountered. All other requests to &lt;code&gt;require&lt;/code&gt; for the same file will
return the object that was previously loaded. This creates a large number of
blocking turns early in the application life cycle, but as long as you keep
all of the require statements up at the top level of your file the turns will
smoothen out once all the files are sourced.&lt;/p&gt;
&lt;p&gt;This seems like a contradiction. However, the call to &lt;code&gt;getDefaultAdapter()&lt;/code&gt;
&lt;em&gt;is&lt;/em&gt; at the top level, when the file loads. We can observe that it is the same
event loop turn that loads the other requires in this file (&lt;code&gt;utils&lt;/code&gt; and
&lt;code&gt;normalizeHeaderName&lt;/code&gt;) and the call to load the http adapter.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My final verdict: this is a &lt;em&gt;good&lt;/em&gt; example of multi-platform, dynamic
requirement retrieval in CommonJS. ES Modules also have &lt;a target="_blank" rel="noopener" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#Dynamic_Imports"&gt;dynamic
imports&lt;/a&gt;.
However, the &lt;code&gt;import()&lt;/code&gt; function in ESM is asynchronous so refactoring this
package to a module will require some additional state management.&lt;/p&gt;
&lt;h4 id="transformResponse"&gt;&lt;a href="#transformResponse" class="headerlink" title="transformResponse"&gt;&lt;/a&gt;&lt;a href="/~timemachine/codereview/axios@0.20.0/lib/defaults.js.html#L57"&gt;&lt;code&gt;transformResponse&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;code&gt;transformResponse&lt;/code&gt; has a laughable JSON.parse() usage that should really be
sniffing the content-type header to avoid parsing XML/HTML as JSON.&lt;/p&gt;
&lt;h3 id="lib-utils-js"&gt;&lt;a href="#lib-utils-js" class="headerlink" title="lib/utils.js"&gt;&lt;/a&gt;&lt;a href="/~timemachine/codereview/axios@0.20.0/lib/utils.js.html"&gt;lib/utils.js&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The bulk of this file is &lt;code&gt;is*&lt;/code&gt; duck-typing functions. These are great helpers
for when you donât know the browser you are targeting. Iâm happy to see these
in the package as opposed to another dependency. &lt;/p&gt;
&lt;p&gt;Some &lt;em&gt;utils&lt;/em&gt; exist natively across all the supported browsers and should be
removed or wrap the native functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Array.isArray()&lt;/li&gt;
&lt;li&gt;Array.prototype.forEach()&lt;/li&gt;
&lt;li&gt;String.prototype.trim() which also removes: &lt;code&gt;\uFEFF&lt;/code&gt; and &lt;code&gt;\xA0&lt;/code&gt;, &lt;del&gt;LMFAO&lt;/del&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Donât copy &lt;code&gt;isNumber&lt;/code&gt;, itâs not the best way to do that. There is no best way to
write &lt;code&gt;isNumber&lt;/code&gt; in JavaScript so you should consider the usefulness of
&lt;code&gt;Number.isFinite()&lt;/code&gt;, &lt;code&gt;Number.isNaN()&lt;/code&gt;, and (if you expect absolute values over 9
quadrillion) &lt;code&gt;Number.isSafeNumber()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;My last thought on this file is not a knock on axios. It is a knock on Unicode,
and itâs byte-order-mark. &lt;a href="/~timemachine/codereview/axios@0.20.0/lib/utils.js.html#L315"&gt;They must
go&lt;/a&gt;. I do
recommend that the &lt;code&gt;stripBOM&lt;/code&gt; function assert it was passed a string before
modifying it.&lt;/p&gt;
&lt;h3 id="lib-helpers"&gt;&lt;a href="#lib-helpers" class="headerlink" title="lib/helpers/"&gt;&lt;/a&gt;lib/helpers/&lt;/h3&gt;&lt;p&gt;Iâm confused. There is a &lt;code&gt;lib/utils.js&lt;/code&gt; and a &lt;code&gt;lib/helpers/*&lt;/code&gt;. Another sign of
copy/pasta? â¦ Letâs dig in.&lt;/p&gt;
&lt;h4 id="lib-helpers-bind-js"&gt;&lt;a href="#lib-helpers-bind-js" class="headerlink" title="lib/helpers/bind.js"&gt;&lt;/a&gt;&lt;a href="/~timemachine/codereview/axios@0.20.0/lib/helpers/bind.js.html"&gt;lib/helpers/bind.js&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;âClean your ears out and listen close sonny â¦ Back in my day, before
JavaScript had &lt;em&gt;splats&lt;/em&gt; we had this mysterious thing called the &lt;code&gt;arguments&lt;/code&gt;
array. We never knew where it came from but it was always there. And even if I
called it an &lt;em&gt;array&lt;/em&gt; it wasnât really an array but more like an object, with
numerical indexesâ¦â&lt;/p&gt;
&lt;p&gt;Targeting old browsers is the pits. It forces you to make hack helper functions
like bind. A necessary evil for pre-IE 9 support&lt;sup id="fnref:4"&gt;&lt;a href="#fn:4" rel="footnote"&gt;&lt;span class=""&gt;[4]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Fortunately, Axios doesnât care about browsers that old. This should go.&lt;/p&gt;
&lt;h4 id="lib-helpers-buildURL-js"&gt;&lt;a href="#lib-helpers-buildURL-js" class="headerlink" title="lib/helpers/buildURL.js"&gt;&lt;/a&gt;&lt;a href="/~timemachine/codereview/axios@0.20.0/lib/helpers/buildURL.js.html"&gt;lib/helpers/buildURL.js&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;This file looks great â¦ Except maybe this line: &lt;code&gt;replace(/%20/g, '+').&lt;/code&gt; â¦
Whatever floats ya boat.&lt;/p&gt;
&lt;h4 id="lib-helpers-combineURLs-js"&gt;&lt;a href="#lib-helpers-combineURLs-js" class="headerlink" title="lib/helpers/combineURLs.js"&gt;&lt;/a&gt;&lt;a href="/~timemachine/codereview/axios@0.20.0/lib/helpers/combineURLs.js.html"&gt;lib/helpers/combineURLs.js&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Needs to check that &lt;code&gt;baseURL&lt;/code&gt; is defined (and a string) before calling
&lt;code&gt;.replace()&lt;/code&gt; on it.&lt;/p&gt;
&lt;h4 id="lib-helpers-isAbsoluteURL-js"&gt;&lt;a href="#lib-helpers-isAbsoluteURL-js" class="headerlink" title="lib/helpers/isAbsoluteURL.js"&gt;&lt;/a&gt;&lt;a href="/~timemachine/codereview/axios@0.20.0/lib/helpers/isAbsoluteURL.js.html"&gt;lib/helpers/isAbsoluteURL.js&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;If you take the time to read the Regex it follows the spec. I shy away from
lengthy Regular Expressions. The logic is hard to test, hard to debug, and prone
to misinterpreted readings by other developers.&lt;/p&gt;
&lt;h4 id="lib-helpers-normalizeHeaderName-js"&gt;&lt;a href="#lib-helpers-normalizeHeaderName-js" class="headerlink" title="lib/helpers/normalizeHeaderName.js"&gt;&lt;/a&gt;&lt;a href="/~timemachine/codereview/axios@0.20.0/lib/helpers/normalizeHeaderName.js.html"&gt;lib/helpers/normalizeHeaderName.js&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;This function takes an object of &lt;code&gt;[key: string]: string&lt;/code&gt; properties and a second
argument as a key. It then changes the spelling of the key in the first argument to
match the capitalization of the second argument.&lt;/p&gt;
&lt;p&gt;All header keys in HTTP should be treated as lower case. A more sensible action is
to take the input headers and convert them all to lowercase. Then use the
lowercase forms in all interactions. Better still: create an
enumeration of the headers Axios cared about and then only use references to the
enumeration.&lt;/p&gt;
&lt;h4 id="lib-helpers-spread-js"&gt;&lt;a href="#lib-helpers-spread-js" class="headerlink" title="lib/helpers/spread.js"&gt;&lt;/a&gt;&lt;a href="/~timemachine/codereview/axios@0.20.0/lib/helpers/spread.js.html"&gt;lib/helpers/spread.js&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;If you are a JavaScript novice, I can only explain the function in
&lt;code&gt;./helpers/spread.js&lt;/code&gt; by saying: âIt allows you to not type &lt;code&gt;null&lt;/code&gt; when using
Function.prototype.apply().â&lt;/p&gt;
&lt;p&gt;The documentation states this function is deprecated. It should log a warning
when called.&lt;/p&gt;
&lt;h3 id="lib-adapters"&gt;&lt;a href="#lib-adapters" class="headerlink" title="lib/adapters"&gt;&lt;/a&gt;lib/adapters&lt;/h3&gt;&lt;p&gt;To allow interoperability between Browser and Node.js the &lt;em&gt;Adapter&lt;/em&gt; pattern is used, or maybe itâs the &lt;em&gt;Abstract Factory&lt;/em&gt; pattern. (&lt;a target="_blank" rel="noopener" href="https://martinfowler.com/bliki/TwoHardThings.html"&gt;But, whatâs in a name?&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;According to the &lt;a target="_blank" rel="noopener" href="https://en.wikipedia.org/wiki/Design_Patterns"&gt;Gang of Four&lt;/a&gt;
use an Abstract Factory to:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Provide an interface for creating families of related or dependant objects
without specifying their concrete classes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The
&lt;a target="_blank" rel="noopener" href="https://github.com/axios/axios/tree/6d05b96dcae6c82e28b049fce3d4d44e6d15a9bc/lib/adapters"&gt;README.md&lt;/a&gt;
does a great job of defining the contract for all adapters to agree.&lt;/p&gt;
&lt;h4 id="lib-adapters-http-js"&gt;&lt;a href="#lib-adapters-http-js" class="headerlink" title="lib/adapters/http.js"&gt;&lt;/a&gt;&lt;a href="/~timemachine/codereview/axios@0.20.0/lib/adapters/http.js.html"&gt;lib/adapters/http.js&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Iâll start my critique by pointing out: &lt;a target="_blank" rel="noopener" href="https://martinfowler.com/articles/refactoring-2nd-ed.html"&gt;The second edition of Martin
Fowlerâs âRefactoringâ&lt;/a&gt;
uses JavaScript for its examples.&lt;/p&gt;
&lt;p&gt;The cyclomatic complexity of &lt;code&gt;httpAdapter&lt;/code&gt; is 42, according to JSHint. Thatâs
just too much. There are some easy wins here for refactoring:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creating a new function for converting POST data to a Buffer drops the complexity by six. The resulting function is easier to test.&lt;/li&gt;
&lt;li&gt;Transforming the &lt;code&gt;config.auth&lt;/code&gt; object and jamming it into the URL totals
&lt;em&gt;ten&lt;/em&gt; paths. Not as easy to refactor as there are some overlapping concerns: &lt;ul&gt;
&lt;li&gt;resolve the &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;parse the URL&lt;/li&gt;
&lt;li&gt;&lt;del&gt;coalesce&lt;/del&gt; ignore the previous &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; if the URL has
its own&lt;/li&gt;
&lt;li&gt;continue to use the parsed URL over the next 90 lines&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Proxy configuration is complex; 60 lines and 13 paths.&lt;/li&gt;
&lt;li&gt;Finally, the callback to &lt;code&gt;transport.request()&lt;/code&gt; should be itâs own function,
and possibly in its own file.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="lib-adapters-xhr-js"&gt;&lt;a href="#lib-adapters-xhr-js" class="headerlink" title="lib/adapters/xhr.js"&gt;&lt;/a&gt;&lt;a target="_blank" rel="noopener" href="https://github.com/axios/axios/blob/6d05b96dcae6c82e28b049fce3d4d44e6d15a9bc/lib/adapters/xhr.js"&gt;lib/adapters/xhr.js&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Another grizzly adapter file. &lt;em&gt;Twenty-three&lt;/em&gt; cyclomatic complexity value. Iâll
avoid the exhaustive refactoring analysis but will mention there is some clean
up of the user/password logic that should be plucked from these files and into a
helper.&lt;/p&gt;
&lt;p&gt;I just canât nit-pick this file as much. Feature sniffing the version of
XMLHttpRequest is complex, by definition.&lt;/p&gt;
&lt;h3 id="lib-cancel"&gt;&lt;a href="#lib-cancel" class="headerlink" title="lib/cancel"&gt;&lt;/a&gt;lib/cancel&lt;/h3&gt;&lt;p&gt;Axios reimplements &lt;a target="_blank" rel="noopener" href="https://github.com/axios/axios#cancellation"&gt;cancel-able
promises&lt;/a&gt;. Iâm most familiar with
&lt;a target="_blank" rel="noopener" href="http://bluebirdjs.com/docs/api/cancellation.html"&gt;Bluebird.jsâs Cancellations&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Since Bluebird is providing its own definition of Promises it can safely augment
a Promise with a &lt;code&gt;.cancel()&lt;/code&gt; function. Axios does not have this luxury, making
the cancellation functionality more complex.&lt;/p&gt;
&lt;h4 id="lib-cancel-Cancel-js"&gt;&lt;a href="#lib-cancel-Cancel-js" class="headerlink" title="lib/cancel/Cancel.js"&gt;&lt;/a&gt;&lt;a href="/~timemachine/codereview/axios@0.20.0/lib/cancel/Cancel.js.html"&gt;lib/cancel/Cancel.js&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;A prototype-based class with two properties that mimics the &lt;code&gt;Error&lt;/code&gt; class,
in JavaScript.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;message&lt;/code&gt;: A description of why the cancellation happened.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__CANCEL__&lt;/code&gt;: Always true. Used to duck-type Cancel objects from Error
objects.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I would not mind seeing this extend the &lt;code&gt;Error&lt;/code&gt; class. The added features of
&lt;code&gt;Error&lt;/code&gt; (specifically the stack trace) could come in handy.
Additionally/Alternatively the constructor could take a &lt;code&gt;reason&lt;/code&gt; parameter that
is an instance of an error.&lt;/p&gt;
&lt;h4 id="lib-cancel-CancelToken-js"&gt;&lt;a href="#lib-cancel-CancelToken-js" class="headerlink" title="lib/cancel/CancelToken.js"&gt;&lt;/a&gt;&lt;a href="/~timemachine/codereview/axios@0.20.0/lib/cancel/CancelToken.js.html"&gt;lib/cancel/CancelToken.js&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;A CancelToken is an identifier that triggers the cancellation process. &lt;/p&gt;
&lt;p&gt;The class has a factory to create a &lt;code&gt;source&lt;/code&gt; and a constructor that does not
return a &lt;code&gt;source&lt;/code&gt;. Instead, it returns a function. This is confusing. I
recommend:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CancelToken&lt;/code&gt; should return a &lt;code&gt;source&lt;/code&gt;. This would unify the two styles of
cancellation. However it would also break backward-compatibility.&lt;/li&gt;
&lt;li&gt;Fix compatibility by making the source returned by the factory a function that
can be called directly. Annotate the source code of why this sloppiness
is present.&lt;ul&gt;
&lt;li&gt;Optionally: warn about deprecation when &lt;code&gt;source&lt;/code&gt; is called as a function.
(there would be different styles of warning for Browser vs. Node.js so
feasibility is debatable)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Update the documentation to only use the &lt;code&gt;source&lt;/code&gt; style cancellation. &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="lib-core"&gt;&lt;a href="#lib-core" class="headerlink" title="lib/core"&gt;&lt;/a&gt;lib/core&lt;/h3&gt;&lt;p&gt;Now that we have dissected the supporting characters, we can dive into the heart
of the matter.&lt;/p&gt;
&lt;h4 id="lib-core-transformData-js"&gt;&lt;a href="#lib-core-transformData-js" class="headerlink" title="lib/core/transformData.js"&gt;&lt;/a&gt;&lt;a href="/~timemachine/codereview/axios@0.20.0/lib/core/transformData.js.html"&gt;lib/core/transformData.js&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;This is a helper (should be moved to that folder?) to loop over the transform
configuration for the Requests and Responses. &lt;/p&gt;
&lt;p&gt;The first line of the function is an eslint suppression comment. Manipulating
the config of static analysis tools at run time is sometimes needed; however, it
should be the exception and accompanied by a large amount of explanation
comments.&lt;/p&gt;
&lt;p&gt;Itâs such a short function Iâll just show you how this function should be
changed. Iâll also rename the ambiguous variable names to ease my sanity:&lt;/p&gt;
&lt;figure class="highlight plain"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;module.exports = function(data, headers, transforms) {&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    var result = data;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    utils.foreach(transforms, function (transform) {&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;        result = transform(result, headers);&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    });&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    return result;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;};&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;In this trivial function, the usefulness of the &lt;code&gt;no-param-reassign&lt;/code&gt; seems
suspect. Function bodies should treat all parameters as immutable, never assign
new values to them and it is absolutely crucial to never perform property
reassignment to parameters. Function purity is one of the best defenses we have
against defects.&lt;/p&gt;
&lt;p&gt;As I said, this small function is easy to understand and there is little
chance of a bug finding its way in here, but practicing proper habits when the
complexity is low sets us up for success when tackling the 42 headed hydra of
&lt;code&gt;lib/adapters/http.js&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id="The-error-resolution-tango"&gt;&lt;a href="#The-error-resolution-tango" class="headerlink" title="The error resolution tango"&gt;&lt;/a&gt;The error resolution tango&lt;/h4&gt;&lt;p&gt;Iâll explain the next few files as a group.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/~timemachine/codereview/axios@0.20.0/lib/core/settle.js.html"&gt;lib/core/settle.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/~timemachine/codereview/axios@0.20.0/lib/core/createError.js.html"&gt;lib/core/createError.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/~timemachine/codereview/axios@0.20.0/lib/core/enhanceError.js.html"&gt;lib/core/enhanceError.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The two adapters (xml and http) both pass their responses along with the promise
callbacks to &lt;code&gt;settle&lt;/code&gt;. Passing resolve/reject to a function is a bit thick.
Settle can just return a promise if it needs asynchrony (it doesnât). &lt;/p&gt;
&lt;p&gt;Settle looks for the existence of the dubiously named: &lt;code&gt;validateStatus&lt;/code&gt;
function and calls it to determine if the response was a success or error.
&lt;code&gt;validateStatus&lt;/code&gt; takes one argument: the HTTP Status Code of the response. By
default a response is deemed a failure if its status code is between 200 and
299 (inclusive).&lt;/p&gt;
&lt;p&gt;I think this &lt;code&gt;validateStatus&lt;/code&gt; stuff is all &lt;em&gt;Feature-Request-Duct-Tape&lt;/em&gt; and not
well thought out. Here is my suggestion: pass the whole response to
&lt;code&gt;validateStatus&lt;/code&gt; as a second argument.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;validateStatus&lt;/code&gt; deems the response a failure, the response is passed (as
constituent parts) to &lt;code&gt;createError&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;createError&lt;/code&gt; is correctly named as an error factory. It instantiates a new
Error object and then passes the error along with itâs the other arguments to
&lt;code&gt;enhanceError&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;enhanceError&lt;/code&gt; adds the request config, response code, complete request, complete
response, and a new property (&lt;code&gt;isAxiosError&lt;/code&gt;) to the error object before doing
something that is seemingly bizarre: it arguments the error with a new function
called, &lt;code&gt;toJSON()&lt;/code&gt; that just makes a copy of its selfâ¦But why&lt;sup id="fnref:6"&gt;&lt;a href="#fn:6" rel="footnote"&gt;&lt;span class=""&gt;[6]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;? &lt;/p&gt;
&lt;p&gt;Take this example from the node REPL:&lt;/p&gt;
&lt;figure class="highlight plain"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;&amp;gt; JSON.stringify(new Error('bad thing'));&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;'{}'&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Yep. You canât encode an &lt;code&gt;Error&lt;/code&gt; object as JSONâ¦&lt;em&gt;sadface&lt;/em&gt;â¦Luckily, JSON
provides a canonical way of tackling the problems of JavaScript. The &lt;code&gt;stringify&lt;/code&gt;
function inspects the objects (recursively) for a &lt;code&gt;toJSON&lt;/code&gt; method. If found the
result of calling &lt;code&gt;toJSON&lt;/code&gt; is encoded in place of the parent object:&lt;/p&gt;
&lt;figure class="highlight plain"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;&amp;gt; const e = new Error('bad thing');&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;undefined&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&amp;gt; e.toJSON = function () { return this.name + ': ' + this.message; }&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;[Function (anonymous)]&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&amp;gt; JSON.stringify(e);&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;'"Error: bad thing"'&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You can see how node.js &lt;a target="_blank" rel="noopener" href="https://github.com/nodejs/node/blob/70834250e83fa89e92314be37a9592978ee8c6bd/lib/internal/util/inspect.js#L1176"&gt;handles calling &lt;code&gt;console.log&lt;/code&gt; on an error&lt;/a&gt;,
and other edge cases &lt;a target="_blank" rel="noopener" href="https://github.com/nodejs/node/blob/70834250e83fa89e92314be37a9592978ee8c6bd/lib/internal/util/inspect.js#L806"&gt;deep in the bowels of
&lt;code&gt;formatRaw&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Looking at the locations there &lt;code&gt;createError&lt;/code&gt; and &lt;code&gt;enhanceError&lt;/code&gt; are used through
the code base, I can stomach their existence. One problem I have, generally,
with Error factories is they botch the stack trace. &lt;/p&gt;
&lt;h4 id="lib-core-buildFullPath-js"&gt;&lt;a href="#lib-core-buildFullPath-js" class="headerlink" title="lib/core/buildFullPath.js"&gt;&lt;/a&gt;&lt;a href="/~timemachine/codereview/axios@0.20.0/lib/core/buildFullPath.js.html"&gt;lib/core/buildFullPath.js&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;a href="#lib-helpers-combineURLs-js"&gt;This looks familiar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Letâs compare:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;buildFullPath:&lt;/p&gt;
  &lt;figure class="highlight plain"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;module.exports = function buildFullPath(baseURL, requestedURL) {&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  if (baseURL &amp;amp;&amp;amp; !isAbsoluteURL(requestedURL)) {&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    return combineURLs(baseURL, requestedURL);&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  }&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  return requestedURL;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;};&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;combineURLs:&lt;/p&gt;
  &lt;figure class="highlight plain"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;module.exports = function combineURLs(baseURL, relativeURL) {&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;  return relativeURL&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    : baseURL;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;};&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A quick search of the source code and the only usage of &lt;code&gt;combineURLs&lt;/code&gt; is &lt;em&gt;in&lt;/em&gt;
&lt;code&gt;buildFullPath&lt;/code&gt;. In-line it! &lt;/p&gt;
&lt;p&gt;Also, rename &lt;code&gt;buildFullPath&lt;/code&gt;, it is too similar to
&lt;a href="#lib-helpers-buildURL-js"&gt;&lt;code&gt;buildURL&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id="lib-core-mergeConfig-js"&gt;&lt;a href="#lib-core-mergeConfig-js" class="headerlink" title="lib/core/mergeConfig.js"&gt;&lt;/a&gt;&lt;a href="/~timemachine/codereview/axios@0.20.0/lib/core/mergeConfig.js.html"&gt;lib/core/mergeConfig.js&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Gonna pull out the &lt;em&gt;yellow card&lt;/em&gt;. Up to this point I have seen much-a-do about
supporting IE 6, 7, and 8. But here we see calls to &lt;code&gt;Object.keys&lt;/code&gt; which pins the
compatibility to IE 9+. &lt;/p&gt;
&lt;p&gt;(Editorâs Note: the README only claims compatibility for IE 11+)&lt;/p&gt;
&lt;p&gt;Cloning objects is needlessly hard in JavaScript (how many versions before
&lt;code&gt;Object.prototype.clone()&lt;/code&gt;? â¦ itâs possible). If you need such arcane
transformations study the &lt;a target="_blank" rel="noopener" href="https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign"&gt;MDN page on the subject&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Honestly, if you canât &lt;code&gt;Object.assign(a, JSON.parse(JSON.stringify(b)));&lt;/code&gt; whatâs
the point of living? (no, that doesnât work)&lt;/p&gt;
&lt;h4 id="lib-core-dispatchRequest-js"&gt;&lt;a href="#lib-core-dispatchRequest-js" class="headerlink" title="lib/core/dispatchRequest.js"&gt;&lt;/a&gt;&lt;a href="/~timemachine/codereview/axios@0.20.0/lib/core/dispatchRequest.js.html"&gt;lib/core/dispatchRequest.js&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;These files are getting &lt;em&gt;meaty&lt;/em&gt;. There is a nice example of a &lt;a target="_blank" rel="noopener" href="https://en.wikipedia.org/wiki/Cross-cutting_concern"&gt;cross-cutting
concern&lt;/a&gt; here. Everyplace
where there may be a new turn in the event loop a check to
&lt;code&gt;throwIfCancellationRequested&lt;/code&gt; shows up.&lt;/p&gt;
&lt;p&gt;Remember when I said that &lt;a href="#lib-axios-js"&gt;you get different configurations depending on how you
instantiate the &lt;code&gt;axios&lt;/code&gt; object&lt;/a&gt;? The bug materializes into &lt;a href="/~timemachine/codereview/axios@0.20.0/lib/core/dispatchRequest.js.html#L50"&gt;line
50&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id="lib-core-InterceptorManager-js"&gt;&lt;a href="#lib-core-InterceptorManager-js" class="headerlink" title="lib/core/InterceptorManager.js"&gt;&lt;/a&gt;&lt;a href="/~timemachine/codereview/axios@0.20.0/lib/core/InterceptorManager.js.html"&gt;lib/core/InterceptorManager.js&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;I could fan-boy all over the InterceptorManager all day. This class allows the
developer to decorate (add pre/post hooks to) the request. We will see this in
action in Axios.js.&lt;/p&gt;
&lt;h4 id="lib-core-Axios-js"&gt;&lt;a href="#lib-core-Axios-js" class="headerlink" title="lib/core/Axios.js"&gt;&lt;/a&gt;&lt;a href="/~timemachine/codereview/axios@0.20.0/lib/core/Axios.js.html"&gt;lib/core/Axios.js&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Shout out to the power of prototypal inheritance: Lines 73 - 93.&lt;/p&gt;
&lt;p&gt;The
&lt;a href="/~timemachine/codereview/axios@0.20.0/lib/core/Axios.js.html#L9"&gt;constructor&lt;/a&gt;
makes the config accessible from the incorrectly named &lt;code&gt;defaults&lt;/code&gt; property. Then
sets up the interceptors.&lt;/p&gt;
&lt;p&gt;You can see the &lt;em&gt;Chain of Responsibility Pattern&lt;/em&gt;, as a literal &lt;code&gt;chain&lt;/code&gt;
variable. The chain is initialized with the dispatcher and undefined (you need
an even number of links in the chain, because: &lt;em&gt;shenanigans&lt;/em&gt;). All of the
pre-request interceptors are un-shifted to the start of the chain (even numbers
again for a fulfilled or rejected promise). Likewise of the post-request
interceptors are pushed to the end of the chain. Finally, two of the
interceptor-callbacks are removed from the head of the chain and added as
&lt;em&gt;thenables&lt;/em&gt; to a master promise (one for fulfilled and one for rejected). In
the case of the dispatcher it handles its own rejection so we need an extra
element in the chain &lt;em&gt;shenanigans!&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The master promise resolves all the pre-request hooks, the dispatcher, and all
the post-request hooks in order. &lt;strong&gt;Study this code until you understand how it
works!&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="In-Closing"&gt;&lt;a href="#In-Closing" class="headerlink" title="In Closing"&gt;&lt;/a&gt;In Closing&lt;/h2&gt;&lt;p&gt;I use the Axios library, professionally, to send business-critical requests to
third-party servers. When software is critical to your business you must be
critical of the software. However, the majority of software available through
the Node Package Manager passes without scrutiny.&lt;/p&gt;
&lt;p&gt;From the length of this article, you can guess that this was a multi-week effort
to type up all my thoughts. I did as much research on my claims as I thought was
reasonable to give an accurate representation. The first draft was not perfect
and I have made revisions as my understanding of the source code evolved.&lt;/p&gt;
&lt;p&gt;While passionate about code quality I also have a sense of humor; my hope is
that both aspects enrich the reading experience and that my wit does not
distract the reader.&lt;/p&gt;
&lt;p&gt;Thank you to my proofreaders and technical editors, without them this would be
awful.&lt;/p&gt;
&lt;p&gt;I have included additional action items in some of the footnotes and will update
them with links to any pull requests that result so that the reader can stay
abreast of my contributions.&lt;/p&gt;
&lt;div id="footnotes"&gt;&lt;hr&gt;&lt;div id="footnotelist"&gt;&lt;ol&gt;&lt;li id="fn:1"&gt;&lt;span&gt;1.&lt;/span&gt;&lt;span&gt;&lt;p&gt;TODO: Update dependants; open PR.&lt;/p&gt;
&lt;a href="#fnref:1" rev="footnote"&gt; &amp;amp;hookleftarrow;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li id="fn:2"&gt;&lt;span&gt;2.&lt;/span&gt;&lt;span&gt;&lt;p&gt;TODO: Pull request, re-adding the skipped test.&lt;/p&gt;
&lt;a href="#fnref:2" rev="footnote"&gt; &amp;amp;hookleftarrow;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li id="fn:3"&gt;&lt;span&gt;3.&lt;/span&gt;&lt;span&gt;&lt;p&gt;A &lt;em&gt;bad turn&lt;/em&gt; is when the browser/server/applicationâs event loop becomes
  blocked. When blocked the application will become unresponsive for some period
  of time until the block clears.&lt;/p&gt;
&lt;a href="#fnref:3" rev="footnote"&gt; &amp;amp;hookleftarrow;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li id="fn:4"&gt;&lt;span&gt;4.&lt;/span&gt;&lt;span&gt;&lt;p&gt;Roughly 1.0% of Browsers support XMLHttpRequest but not
  Function.prototype.bind.&lt;/p&gt;
&lt;a href="#fnref:4" rev="footnote"&gt; &amp;amp;hookleftarrow;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li id="fn:5"&gt;&lt;span&gt;5.&lt;/span&gt;&lt;span&gt;&lt;p&gt;&lt;em&gt;Feature-Request-Duct-Tape&lt;/em&gt; is a quick code fix-up to fill a feature
  request in the easiest possible way. Feature-Request-Duct-Tape usually smells
  of configuration based feature flags, copy-pasta, &lt;code&gt;if...return&lt;/code&gt; blocks, and
  unrelated &lt;code&gt;elseif&lt;/code&gt; predicates.&lt;/p&gt;
&lt;a href="#fnref:5" rev="footnote"&gt; &amp;amp;hookleftarrow;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li id="fn:6"&gt;&lt;span&gt;6.&lt;/span&gt;&lt;span&gt;&lt;p&gt;TODO: Turn this in to a post with an example of &lt;code&gt;Error.prototype.toJSON()&lt;/code&gt;&lt;/p&gt;
&lt;a href="#fnref:6" rev="footnote"&gt; &amp;amp;hookleftarrow;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/article&gt;



        
          </description><author>Timemachine</author><category>Programming</category><category>JavaScript</category><category>Code Review</category><guid isPermaLink="true">https://ctrl-c.club/~timemachine/2020/10/07/code-review-axios/</guid><pubDate>Wed, 07 Oct 2020 00:00:00 GMT</pubDate></item><item><title>Adding Gitea To My Raspberry Pi</title><link>http://ctrl-c.club/~timemachine/2020/09/24/adding-gitea-to-my-rasberry-pi/index.html</link><description>&lt;article class="post"&gt;
  &lt;header&gt;
    
    &lt;h1 class="posttitle"&gt;
        Adding Gitea To My Raspberry Pi
    &lt;/h1&gt;



    &lt;div class="meta"&gt;
      &lt;span class="author"&gt;
        &lt;span&gt;An abridged history of computer programming&lt;/span&gt;
      &lt;/span&gt;
      
    &lt;div class="postdate"&gt;
      
        &lt;time datetime="2020-09-24T13:36:10.000Z"&gt;2020-09-24&lt;/time&gt;
        
      
    &lt;/div&gt;


      

      
    &lt;div class="article-tag"&gt;
        &lt;i class="fas fa-tag"&gt;&lt;/i&gt;
        &lt;a class="tag-link-link" href="/~timemachine/tags/Raspberry-Pi/" rel="tag"&gt;Raspberry-Pi&lt;/a&gt;, &lt;a class="tag-link-link" href="/~timemachine/tags/git/" rel="tag"&gt;git&lt;/a&gt;
    &lt;/div&gt;


    &lt;/div&gt;
  &lt;/header&gt;
  

  &lt;div class="content"&gt;
    &lt;h2 id="Background"&gt;&lt;a href="#Background" class="headerlink" title="Background"&gt;&lt;/a&gt;Background&lt;/h2&gt;&lt;p&gt;I recently set up a Raspberry Pi to run pi-hole on my network. It works great.
The specific Pi I used is a Raspberry Pi 3 Model B. Running Pi-hole is not
resource intensive. To get get more out of the device, Iâm going to add an
installation of &lt;a target="_blank" rel="noopener" href="https://gitea.io/"&gt;Gitea&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="Hardware"&gt;&lt;a href="#Hardware" class="headerlink" title="Hardware"&gt;&lt;/a&gt;Hardware&lt;/h2&gt;&lt;p&gt;In addition to the Raspberry Pi, Iâm plugging in a 4Tb external hard drive.
This will give my family a solid amount of network storage for backups (Time
Machine / Duplicity).&lt;/p&gt;
&lt;p&gt;I have decided to use full disk encryption. I like the added security on
the device, but there are some drawbacks. Most importantly, the disk can not be
auto-mounted when the Pi boots. A user must supply the password to decrypt the
disk before it is mounted.&lt;/p&gt;
&lt;p&gt;Alternatives to full disk encryption are available:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Both Time Machine and Duplicity can encrypt their backup folders&lt;/li&gt;
&lt;li&gt;Git repos can be encrypted at rest with these projects&lt;ul&gt;
&lt;li&gt;&lt;a target="_blank" rel="noopener" href="https://github.com/AGWA/git-crypt"&gt;https://github.com/AGWA/git-crypt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target="_blank" rel="noopener" href="https://github.com/spwhitton/git-remote-gcrypt"&gt;https://github.com/spwhitton/git-remote-gcrypt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="Mounting-the-Hard-Drive"&gt;&lt;a href="#Mounting-the-Hard-Drive" class="headerlink" title="Mounting the Hard Drive"&gt;&lt;/a&gt;Mounting the Hard Drive&lt;/h3&gt;&lt;p&gt;&lt;code&gt;/dev/disks/&lt;/code&gt; has helpful symlinks to help you locate your usb attached devices:&lt;/p&gt;
&lt;figure class="highlight plain"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;pi@pi-hole:/media $ ls -la /dev/disk/by-path/&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;total 0&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;drwxr-xr-x 2 root root 140 Sep 24 19:05 .&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;drwxr-xr-x 7 root root 140 Sep 22 22:52 ..&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;lrwxrwxrwx 1 root root  13 Sep 22 22:52 platform-3f202000.mmc -&amp;gt; ../../mmcblk0&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;lrwxrwxrwx 1 root root  15 Sep 22 22:52 platform-3f202000.mmc-part1 -&amp;gt; ../../mmcblk0p1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;lrwxrwxrwx 1 root root  15 Sep 22 22:52 platform-3f202000.mmc-part2 -&amp;gt; ../../mmcblk0p2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;lrwxrwxrwx 1 root root   9 Sep 24 19:05 platform-3f980000.usb-usb-0:1.5:1.0-scsi-0:0:0:0 -&amp;gt; ../../sda&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;lrwxrwxrwx 1 root root  10 Sep 24 19:05 platform-3f980000.usb-usb-0:1.5:1.0-scsi-0:0:0:0-part1 -&amp;gt; ../../sda1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The last file in the listing is my drive, &lt;code&gt;/dev/sda1&lt;/code&gt;. I need to add the
&lt;code&gt;cryptsetup&lt;/code&gt; package to unlock the hard drive before it is mounted.&lt;/p&gt;
&lt;figure class="highlight plain"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;$ sudo apt install cryptsetup&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;$ sudo cryptsetup open /dev/sda1 storage&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;$ sudo mkdir /media/storage&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;$ sudo chown -R pi:pi /media/storage&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;$ sudo mount /dev/mapper/storage /media/storage &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Note, to unmount the disk: &lt;code&gt;sudo umount /media/storage&lt;/code&gt; only removes the mount
point, you also need to close the luks mapper: &lt;code&gt;sudo cryptsetup close storage&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;As described above, We can not use &lt;code&gt;fstab&lt;/code&gt; to auto-mount this drive. Instead, Iâll place a script
in my userâs home directory to decrypt and mount the drive.&lt;/p&gt;
&lt;figure class="highlight plain"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;#!/bin/bash -e&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;cryptsetup open /dev/disk/by-uuid/f623a6e2-ea38-4f82-882a-c9823b53f0cf storage&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;mount /dev/mapper/storage /media/storage&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;echo "Done!"&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Here I used another helper from &lt;code&gt;/dev/disk&lt;/code&gt; to mount by the hard driveâs UUID.
This ensures that if I add a second drive, in the future, I do not need worry
about which the kernel finds first and assigns to &lt;code&gt;sda1&lt;/code&gt; or &lt;code&gt;sdb1&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="Proxy-Config"&gt;&lt;a href="#Proxy-Config" class="headerlink" title="Proxy Config"&gt;&lt;/a&gt;Proxy Config&lt;/h2&gt;&lt;p&gt;Pi-hole includes Lighttpd to serve itâs web pages.  Conveniently, Lighttpd
includes &lt;code&gt;mod_proxy&lt;/code&gt; to allow the web server to act as a reverse proxy. Giteaâs
web server (written in Go, by-the-way) defaults to listening at port 3000. The
next step is to make a new configuration for forwarding requests by host name.&lt;/p&gt;
&lt;p&gt;Pi-holeâs http config is in the default Lighttpd location
&lt;code&gt;/etc/lighttpd/lighttpd.conf&lt;/code&gt;. There is an include statement in the config that
reads files in &lt;code&gt;/etc/lighttpd/conf-enabled/&lt;/code&gt;. The &lt;code&gt;conf-enabled&lt;/code&gt; directory is
comprised of symlinks to &lt;code&gt;../conf-available&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Make a new file &lt;code&gt;/etc/lighttpd/conf-available/50-gitea.conf&lt;/code&gt;:&lt;/p&gt;
&lt;figure class="highlight plain"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;server.modules += ( "mod_proxy" ) &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt; &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;$HTTP["host"] == "vox.localnetwork" { &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    proxy.server = ( &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;        "" =&amp;gt; ( &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;            ( "host" =&amp;gt; "localhost", "port" =&amp;gt; "3000" ) &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This configuration loads the proxy module, defines a new host name:
&lt;code&gt;vox.localnetwork&lt;/code&gt;, and finally tells the server to redirect (proxy) requests
to &lt;code&gt;localhost:3000&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;Create symlink, test the config changes, and restart Lighttpd:&lt;/p&gt;
&lt;figure class="highlight plain"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;$ sudo ln -s /etc/lighttpd/conf-available/50-gitea.conf /etc/lighttpd/conf-enabled/50-gitea.conf&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;$ sudo lighttpd -tt -f /etc/lighttpd/lighttpd.conf&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;$ sudo systemctl restart lighttpd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Checking in the browser, Pi-hole is still listening. While we are in the
pi-hole admin letâs setup the DNS services in Pi-hole to bind the url to the
Raspberry Piâs static IP address.  Log into &lt;a target="_blank" rel="noopener" href="http://pi.hole/"&gt;http://pi.hole&lt;/a&gt; and click &lt;code&gt;Local DNS Records&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="/~timemachine/images/pi-hole-config.png" alt="Local DNS Records"&gt;&lt;/p&gt;
&lt;p&gt;This setting will forward all requests on my LAN for url &lt;code&gt;vox.localnetwork&lt;/code&gt;
&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" rel="footnote"&gt;&lt;span class=""&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt; to the Raspberry Pi.&lt;/p&gt;
&lt;h2 id="Gitea-Install"&gt;&lt;a href="#Gitea-Install" class="headerlink" title="Gitea Install"&gt;&lt;/a&gt;Gitea Install&lt;/h2&gt;&lt;p&gt;Raspberry Pi 3 has an ARM7 processor. At the time of writing Gitea version
1.12.0 wonât build correctly for the ARM7 target. Thatâs okay as ARM7 is
backwards compatible to ARM6, so that is the download we will use.&lt;/p&gt;
&lt;p&gt;We need a system user for all git related activity, also there are many
directories we need to create&lt;/p&gt;
&lt;figure class="highlight plain"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;sudo adduser --system --shell /bin/bash --gecos 'Git Version Control' --group --disabled-password --home /home/git git&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;mkdir -p /media/storage/gitea/{custom,data,log}&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;sudo chown -R git:git /media/storage/gitea/&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;sudo chmod -R 751 /media/storage/gitea/&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;mkdir /media/storage/gitea-repositories&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;sudo chown -R git:git /media/storage/gitea-repositories&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;sudo mkdir /etc/gitea&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;sudo chown root:git /etc/gitea/&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;sudo chmod 770 /etc/gitea/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You may notice the permissions on &lt;code&gt;/media/storage/gitea&lt;/code&gt; are set to &lt;code&gt;751&lt;/code&gt;. This
is because of an issue that I ran into (and I have run across with Apache
server as well) where the service can not create files in a directory that is not
executable by everyone.&lt;/p&gt;
&lt;p&gt;The git user, that is running the service, has &lt;code&gt;rwx&lt;/code&gt; permission on the directory
but if you do not add &lt;code&gt;o+x&lt;/code&gt; there will be permission denied errors when you try
to start the service.  &lt;/p&gt;
&lt;h3 id="Gitea-Database"&gt;&lt;a href="#Gitea-Database" class="headerlink" title="Gitea Database"&gt;&lt;/a&gt;Gitea Database&lt;/h3&gt;&lt;p&gt;Many of the online resources for installing Gitea on Raspberry Pi use
MySQL/MariaDB. Iâm going to use SQLite3 to keep configuration simple.&lt;/p&gt;
&lt;h3 id="Downloading-Binary"&gt;&lt;a href="#Downloading-Binary" class="headerlink" title="Downloading Binary"&gt;&lt;/a&gt;Downloading Binary&lt;/h3&gt;&lt;p&gt;Check for the latest version at &lt;a target="_blank" rel="noopener" href="https://dl.gitea.io/gitea/"&gt;https://dl.gitea.io/gitea/&lt;/a&gt; and replace the link below:&lt;/p&gt;
&lt;figure class="highlight plain"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;wget -O gitea.bin https://dl.gitea.io/gitea/1.12.4/gitea-1.12.4-linux-arm-6&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;sudo mv gitea.bin /usr/local/bin/gitea&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id="Test-Startup"&gt;&lt;a href="#Test-Startup" class="headerlink" title="Test Startup"&gt;&lt;/a&gt;Test Startup&lt;/h3&gt;&lt;p&gt;Test that the application will start from the command line before we create
a service.&lt;/p&gt;
&lt;figure class="highlight plain"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;sudo su git&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;GITEA_WORK_DIR=/media/storage/gitea /usr/local/bin/gitea web -c /etc/gitea/app.ini&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;This starts the service and we confirm that it listens on &lt;code&gt;0.0.0.0:3000&lt;/code&gt;. If
your port is different you need to update the Lighttpd config to point to the
correct port.&lt;/p&gt;
&lt;h3 id="Create-the-service"&gt;&lt;a href="#Create-the-service" class="headerlink" title="Create the service"&gt;&lt;/a&gt;Create the service&lt;/h3&gt;&lt;p&gt;I suggest copying the &lt;a target="_blank" rel="noopener" href="https://github.com/go-gitea/gitea/blob/master/contrib/systemd/gitea.service"&gt;example service
file&lt;/a&gt;
and search for the values: &lt;code&gt;WorkingDirectory&lt;/code&gt; and &lt;code&gt;GITEA_WORK_DIR&lt;/code&gt;.  Update
them to your working directory (&lt;code&gt;/media/storage/gitea&lt;/code&gt; for this example). The
service configuration file is saved to: &lt;code&gt;/etc/systemd/system/gitea.service&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;At this point you can stop and start the process with &lt;code&gt;sudo systemctl start gitea&lt;/code&gt;
and &lt;code&gt;sudo systemctl stop itea&lt;/code&gt;. Iâm not going to &lt;code&gt;enable&lt;/code&gt; the service
to start at boot. The encrypted hard disk will not be ready. Instead I will add
the &lt;code&gt;systemctl&lt;/code&gt; command to my &lt;code&gt;mount_storage.sh&lt;/code&gt; script.&lt;/p&gt;
&lt;h3 id="Initial-Configuration"&gt;&lt;a href="#Initial-Configuration" class="headerlink" title="Initial Configuration"&gt;&lt;/a&gt;Initial Configuration&lt;/h3&gt;&lt;p&gt;Point your browser to the server, &lt;a target="_blank" rel="noopener" href="http://vox.localnetwork/"&gt;http://vox.localnetwork&lt;/a&gt; for me.  This is the
initial configuration I chose. &lt;/p&gt;
&lt;p&gt;&lt;img src="/~timemachine/images/gitea-initial-config.png" alt="Gitea Initial Config"&gt;&lt;/p&gt;
&lt;p&gt;This configuration is saved to &lt;code&gt;/etc/gitea/app.ini&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are also options to allow emails (you supply the SMTP server, user, and
password) but I skipped those as Iâm the only user, at this point, that can
connect to the host. It is easy to add these setup steps in the future if
needed.&lt;/p&gt;
&lt;h3 id="Register-First-User"&gt;&lt;a href="#Register-First-User" class="headerlink" title="Register First User"&gt;&lt;/a&gt;Register First User&lt;/h3&gt;&lt;p&gt;The first user that registers becomes the admin of the site. Thatâs convenient. &lt;/p&gt;
&lt;p&gt;Once signed in you can view your profile settings and add your public ssh key.
Finally, you are ready to create and clone your first repo.&lt;/p&gt;
&lt;h2 id="Review"&gt;&lt;a href="#Review" class="headerlink" title="Review"&gt;&lt;/a&gt;Review&lt;/h2&gt;&lt;p&gt;I was able to run through these steps quickly (even while taking notes for this
blog). It was a delight to see how easy it has become to create mount points in
Linux over time. I remember, back in 1996, scratching my head as I read through
the man pages for fstab and mount, trying to sort out how to mount a second
disk to use as the /home on my desktop. That was Slackware v3.0 (I still have
the CD-ROM for that here somewhere), I looked up the kernel version:
1.2.13â¦Yikes!&lt;/p&gt;
&lt;p&gt;My next plan is to install Samba on the Raspberry pi so the family can take
full advantage of the 4Tb Iâve connected to the network.&lt;/p&gt;
&lt;div id="footnotes"&gt;&lt;hr&gt;&lt;div id="footnotelist"&gt;&lt;ol&gt;&lt;li id="fn:1"&gt;&lt;span&gt;1.&lt;/span&gt;&lt;span&gt;&lt;p&gt;&lt;a target="_blank" rel="noopener" href="https://timemachine.fandom.com/wiki/Vox"&gt;https://timemachine.fandom.com/wiki/Vox&lt;/a&gt;&lt;/p&gt;
&lt;a href="#fnref:1" rev="footnote"&gt; &amp;amp;hookleftarrow;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/article&gt;



        
          </description><author>Timemachine</author><category>git</category><category>Raspberry-Pi</category><guid isPermaLink="true">https://ctrl-c.club/~timemachine/2020/09/24/adding-gitea-to-my-rasberry-pi/</guid><pubDate>Thu, 24 Sep 2020 00:00:00 GMT</pubDate></item><item><title>Securing SSH Keys on Shared Hosts</title><link>http://ctrl-c.club/~timemachine/2020/09/14/ssh-forward-agent/index.html</link><description>&lt;article class="post"&gt;
  &lt;header&gt;
    
    &lt;h1 class="posttitle"&gt;
        Securing SSH Keys on Shared Hosts
    &lt;/h1&gt;



    &lt;div class="meta"&gt;
      &lt;span class="author"&gt;
        &lt;span&gt;An abridged history of computer programming&lt;/span&gt;
      &lt;/span&gt;
      
    &lt;div class="postdate"&gt;
      
        &lt;time datetime="2020-09-14T18:36:30.000Z"&gt;2020-09-14&lt;/time&gt;
        
      
    &lt;/div&gt;


      

      
    &lt;div class="article-tag"&gt;
        &lt;i class="fas fa-tag"&gt;&lt;/i&gt;
        &lt;a class="tag-link-link" href="/~timemachine/tags/Security/" rel="tag"&gt;Security&lt;/a&gt;, &lt;a class="tag-link-link" href="/~timemachine/tags/Tilde/" rel="tag"&gt;Tilde&lt;/a&gt;, &lt;a class="tag-link-link" href="/~timemachine/tags/ssh/" rel="tag"&gt;ssh&lt;/a&gt;
    &lt;/div&gt;


    &lt;/div&gt;
  &lt;/header&gt;
  

  &lt;div class="content"&gt;
    &lt;p&gt;First a warning:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Donât put your ssh private keys on a shared host!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The issue is that you canât trust your fellow users on the shared host. You may have set the items in the &lt;code&gt;~/.ssh/&lt;/code&gt; directory with &lt;code&gt;chmod 400&lt;/code&gt; but that doesnât prevent root users from seeing them.&lt;/p&gt;
&lt;p&gt;In this article we will discuss an alternative for using ssh keys to connect to git, or other servers, on a shared system.&lt;/p&gt;
&lt;h2 id="Background"&gt;&lt;a href="#Background" class="headerlink" title="Background"&gt;&lt;/a&gt;Background&lt;/h2&gt;&lt;p&gt;Iâve recently started to develop some small software projects on &lt;a href="http://ctrl-c.club/"&gt;ctrl-c.club&lt;/a&gt;. Ctrl-c is a shared server (tilde) with a few hundred other users. We have local mail, irc, and a bulletin board that we use to create a community of command-line aficionados. Since Iâm developing software on this shared space I want to use version control. The server has &lt;code&gt;git&lt;/code&gt; installed so I can easily send my software assets to &lt;a target="_blank" rel="noopener" href="https://github.com/"&gt;github&lt;/a&gt; or &lt;a target="_blank" rel="noopener" href="https://tildegit.org/"&gt;TildeGit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On my localhost I have created an easy workflow for &lt;code&gt;pushing&lt;/code&gt; changes to github using SSH. I have a public/private key pair in my local &lt;code&gt;.ssh&lt;/code&gt; directory and &lt;a target="_blank" rel="noopener" href="https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh"&gt;have shared my public key with github.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To replicate this on the shared server I would need to copy those keys to the &lt;code&gt;.ssh&lt;/code&gt; directory (or create a new set of keys) on the server. This, however, is a bad security practice. I trust the serverâs admins not to steal my keys and modify my github account but you may not. Or more correctly I shouldnât &lt;em&gt;have to trust the admins&lt;/em&gt;. Security should be the default of my workflow.&lt;/p&gt;
&lt;h2 id="Local-Configuration"&gt;&lt;a href="#Local-Configuration" class="headerlink" title="Local Configuration"&gt;&lt;/a&gt;Local Configuration&lt;/h2&gt;&lt;p&gt;Here are the contents of my &lt;code&gt;.ssh&lt;/code&gt; directory on my local work station:&lt;/p&gt;
&lt;figure class="highlight plain"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;pilot@morlock:~$ ls -l .ssh&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;total 20&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;-rw------- 1 pilot pilot  404 Sep 14 13:47 authorized_keys&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;-rw-rw-r-- 1 pilot pilot  302 Sep 14 13:41 config&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;-rwx------ 1 pilot pilot 1743 Sep 12 23:38 id_rsa&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;-rwx------ 1 pilot pilot  407 Sep 14 13:47 id_rsa.pub&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;-rw-r--r-- 1 pilot pilot 2212 Sep 14 17:24 known_hosts&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;id_rsa&lt;/code&gt; is my private key. &lt;code&gt;id_rsa.pub&lt;/code&gt; is my public key, that has been shared with github.com, and is also used to log into Ctrl-c.club. &lt;code&gt;authorized_keys&lt;/code&gt; is a list of public keys that can login to my local desktop (it contains the public key I use on my laptop). &lt;code&gt;known_hosts&lt;/code&gt; are the public key finger prints that I trust (github.com, ctrl-c.club, and others).&lt;/p&gt;
&lt;p&gt;Finally the &lt;code&gt;config&lt;/code&gt; file has information on where and when to use my ssh keys:&lt;/p&gt;
&lt;figure class="highlight plain"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;Host ccc&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    User timemachine&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    ControlPath ~/.ssh/cm-%r@%h:%p&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    ControlMaster auto&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    ControlPersist 10m&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    IdentityFile /home/pilot/.ssh/id_rsa&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    Hostname ctrl-c.club&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;Host github.com&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    User timemachine3030&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    IdentityFile /home/pilot/.ssh/id_rsa&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You can learn more about the configurations at my &lt;a href="/~timemachine/2020/09/09/First-Day-in-the-Tildesphere/"&gt;blog post that about setting them up&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Control*&lt;/code&gt; properties are for reusing an open ssh connection for new terminals and &lt;code&gt;scp&lt;/code&gt; secure copies.&lt;/p&gt;
&lt;h2 id="Agent-Forwarding"&gt;&lt;a href="#Agent-Forwarding" class="headerlink" title="Agent Forwarding"&gt;&lt;/a&gt;Agent Forwarding&lt;/h2&gt;&lt;p&gt;Installing OpenSSL in Linux or MacOS&lt;sup id="fnref:0"&gt;&lt;a href="#fn:0" rel="footnote"&gt;&lt;span class=""&gt;[0]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt; includes the &lt;code&gt;ssh-agent&lt;/code&gt; utility to hold private keys used in public key authentication. When you &lt;em&gt;unlock&lt;/em&gt; your private keys, using their password, ssh-agent stores the key contents as part of your login shell (or key chain on MacOS). It is a handy way to prevent you from needing to type the password for every authenticated request (similar to the function of &lt;code&gt;sudo&lt;/code&gt; remembering your password for a while).&lt;/p&gt;
&lt;p&gt;One of the bonuses of using ssh-agent is that you can tell OpenSSH to forward your unlocked keys along to other secure connections you create.&lt;/p&gt;
&lt;h2 id="Setup"&gt;&lt;a href="#Setup" class="headerlink" title="Setup"&gt;&lt;/a&gt;Setup&lt;/h2&gt;&lt;p&gt;This is the easy part. Under the &lt;code&gt;Host&lt;/code&gt; heading in your &lt;code&gt;~/.ssh/config&lt;/code&gt; file add &lt;code&gt;ForwardAgent yes&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here is my updated Ctrl-c.club config:&lt;/p&gt;
&lt;figure class="highlight plain"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;Host ccc&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    User timemachine&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    ControlPath ~/.ssh/cm-%r@%h:%p&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    ControlMaster auto&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    ControlPersist 10m&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    IdentityFile /home/pilot/.ssh/id_rsa&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    ForwardAgent yes&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    Hostname ctrl-c.club&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;DONE!&lt;/p&gt;
&lt;h2 id="In-Practice"&gt;&lt;a href="#In-Practice" class="headerlink" title="In Practice"&gt;&lt;/a&gt;In Practice&lt;/h2&gt;&lt;p&gt;Letâs test that my local agentâs private keys are accessible on the shared server by first logging in and then running &lt;a target="_blank" rel="noopener" href="https://docs.github.com/en/enterprise/2.15/user/articles/testing-your-ssh-connection"&gt;ssh to see if we get a connection&lt;/a&gt;.&lt;/p&gt;
&lt;figure class="highlight plain"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;timemachine@copper:~$ ssh -T git@github.com&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;The authenticity of host 'github.com (140.82.114.4)' can't be established.&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;Are you sure you want to continue connecting (yes/no)? &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;We are on a shared host so we donât want to blindly accept that public key!&lt;/strong&gt; Software could have been installed on the server to intercept our connections to Github and listen in. This is called a &lt;em&gt;man-in-the-middle-attack&lt;/em&gt;. Letâs discuss how to verify the public key fingerprint is authentic.&lt;/p&gt;
&lt;h2 id="Look-Up-Public-Keys"&gt;&lt;a href="#Look-Up-Public-Keys" class="headerlink" title="Look Up Public Keys"&gt;&lt;/a&gt;Look Up Public Keys&lt;/h2&gt;&lt;p&gt;Github publishes their &lt;a target="_blank" rel="noopener" href="https://docs.github.com/en/github/authenticating-to-github/githubs-ssh-key-fingerprints"&gt;public key fingerprints&lt;/a&gt; but not every server you connect to will have a web page to verify.&lt;/p&gt;
&lt;p&gt;From our &lt;em&gt;localhost&lt;/em&gt; (ie, not the remote server that is asking for confirmation) we can save the public key and then test it.&lt;/p&gt;
&lt;figure class="highlight plain"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;pilot@morlock:~$ ssh-keyscan github.com &amp;gt; github.pub&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;# github.com:22 SSH-2.0-babeld-42834f78&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;# github.com:22 SSH-2.0-babeld-42834f78&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;# github.com:22 SSH-2.0-babeld-42834f78&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;# github.com:22 SSH-2.0-babeld-42834f78&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;# github.com:22 SSH-2.0-babeld-42834f78&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;pilot@morlock:~$ ssh-keygen -l -f github.pub &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2048 SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8 github.com (RSA)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Passing &lt;code&gt;-l&lt;/code&gt; to ssh-keygen asks to compute the fingerprint, &lt;code&gt;-f&lt;/code&gt; says what file to use.&lt;/p&gt;
&lt;p&gt;Oh no! OpenSSH on the Ctrl-c server shows the data as an md5 fingerprint and my localhost uses sha256. You can specify the hash algorithm with the &lt;code&gt;-E&lt;/code&gt; option to ssh-keygen:&lt;/p&gt;
&lt;figure class="highlight plain"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;pilot@morlock:~$ ssh-keygen -E md5 -l -f github.pub &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2048 MD5:16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48 github.com (RSA)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Good! Those are the same. We can trust the connection.&lt;/p&gt;
&lt;figure class="highlight plain"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;timemachine@copper:~$ ssh -T git@github.com&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;The authenticity of host 'github.com (140.82.114.4)' can't be established.&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;Are you sure you want to continue connecting (yes/no)? yes&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;Warning: Permanently added 'github.com,140.82.114.4' (RSA) to the list of known hosts.&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;Connection closed by 140.82.114.4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;ssh will save the public key in &lt;code&gt;~/.ssh/known_hosts&lt;/code&gt; and warn us if it changes in the future.&lt;/p&gt;
&lt;h2 id="Concussion"&gt;&lt;a href="#Concussion" class="headerlink" title="Concussion"&gt;&lt;/a&gt;Concussion&lt;/h2&gt;&lt;p&gt;We have shown how to use ssh-agent forwarding to allow us to use our local private keys on remote servers only when we are logged in over a secure and trusted connection. Then we showed how to verify that we are only using those keys if we can verify that the security of the connection has not been snooped on.&lt;/p&gt;
&lt;p&gt;For a man in the middle to compromise my connection from Ctrl-c.club to Github they would need to not only compromise the Crtl-c.club server, but also the Github.com website and my local network. We can feel pretty confident at this point that our connections are secure.&lt;/p&gt;
&lt;div id="footnotes"&gt;&lt;hr&gt;&lt;div id="footnotelist"&gt;&lt;ol&gt;&lt;li id="fn:0"&gt;&lt;span&gt;0.&lt;/span&gt;&lt;span&gt;&lt;p&gt;After Lion.&lt;/p&gt;
&lt;a href="#fnref:0" rev="footnote"&gt; &amp;amp;hookleftarrow;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/article&gt;



        
          </description><author>Timemachine</author><category>Tilde</category><category>Security</category><category>ssh</category><guid isPermaLink="true">https://ctrl-c.club/~timemachine/2020/09/14/ssh-forward-agent/</guid><pubDate>Mon, 14 Sep 2020 00:00:00 GMT</pubDate></item><item><title>First Day in the Tildesphere</title><link>http://ctrl-c.club/~timemachine/2020/09/09/First-Day-in-the-Tildesphere/index.html</link><description>&lt;article class="post"&gt;
  &lt;header&gt;
    
    &lt;h1 class="posttitle"&gt;
        First Day in the Tildesphere
    &lt;/h1&gt;



    &lt;div class="meta"&gt;
      &lt;span class="author"&gt;
        &lt;span&gt;An abridged history of computer programming&lt;/span&gt;
      &lt;/span&gt;
      
    &lt;div class="postdate"&gt;
      
        &lt;time datetime="2020-09-09T04:17:21.000Z"&gt;2020-09-09&lt;/time&gt;
        
      
    &lt;/div&gt;


      

      
    &lt;div class="article-tag"&gt;
        &lt;i class="fas fa-tag"&gt;&lt;/i&gt;
        &lt;a class="tag-link-link" href="/~timemachine/tags/Community/" rel="tag"&gt;Community&lt;/a&gt;, &lt;a class="tag-link-link" href="/~timemachine/tags/Tilde/" rel="tag"&gt;Tilde&lt;/a&gt;
    &lt;/div&gt;


    &lt;/div&gt;
  &lt;/header&gt;
  

  &lt;div class="content"&gt;
    &lt;h1 id="Welcome"&gt;&lt;a href="#Welcome" class="headerlink" title="Welcome!"&gt;&lt;/a&gt;Welcome!&lt;/h1&gt;&lt;p&gt;Ok. So you got logged in? Good, now letâs get you set up.&lt;/p&gt;
&lt;h2 id="Forget-your-password"&gt;&lt;a href="#Forget-your-password" class="headerlink" title="Forget your password"&gt;&lt;/a&gt;Forget your password&lt;/h2&gt;&lt;p&gt;When you logged in for the first time you had to reset your password. Now letâs make it so you never need it again by creating some public and private keys for you to log in with.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Note: this step is for OS X and Linux users. If you are using Windows or OS/2 warp then you connected with puTTY and this was done for you. Skip down to the Tmux section.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In a terminal enter:&lt;/p&gt;
&lt;figure class="highlight bash"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;ssh-keygen&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;You will be prompted for a file to store your new keys. The default is in your home directory under the &lt;code&gt;.ssh&lt;/code&gt; directory. Thatâs  the  right folder but letâs name it something different so we know what keys are which. I used &lt;code&gt;/Users/pilot/.ssh/ccc.id_rsa&lt;/code&gt; (use your home directory). Skip the password or enter one if you want (skip it!).&lt;/p&gt;
&lt;figure class="highlight plain"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;$ ssh-keygen&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;Generating public/private rsa key pair.&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;Enter file in which to save the key (/Users/pilot/.ssh/id_rsa): /Users/pilot/.ssh/ccc.id_rsa&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;Enter passphrase (empty for no passphrase):&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;Enter same passphrase again:&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;Your identification has been saved in /Users/pilot/.ssh/ccc.id_rsa.&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;Your public key has been saved in /Users/pilot/.ssh/ccc.id_rsa.pub.&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;The key fingerprint is:&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;SHA256:MDv......dEfdcI2BZD7YIFhf0o77POQ8n4 pilot@timemachine.local&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;The key's randomart image is:&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;+---[RSA 3072]----+&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;| .+.     o.=+==  |&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;| ...+S.....+ =oo |&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;| .o o. o .o+..o  |&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;| ..o.+o +o++  .  |&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;| o +.o S+ o=o    |&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;| =   ..  . o.    |&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;| . =             |&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;| o +E            |&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;| .o..            |&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;+----[SHA256]-----+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Your output will look a bit differentâ¦ enjoy the ascii art.&lt;/p&gt;
&lt;p&gt;Next we will copy the public key to the server:&lt;/p&gt;
&lt;figure class="highlight sh"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;ssh-copy-id -i ~/.ssh/ccc.id_rsa USERNAME@ctrl-c.club&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Enter your password for the server one last time. Now login again with&lt;/p&gt;
&lt;figure class="highlight sh"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;ssh -i ~/.ssh/ccc.id_rsa USERNAME@ctrl-c.club&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Slick? The &lt;code&gt;-i&lt;/code&gt; is for &lt;code&gt;identiy-file&lt;/code&gt;. Here is the passage in the SSH docs about &lt;code&gt;-i&lt;/code&gt;:&lt;/p&gt;
&lt;figure class="highlight plain"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;-i identity_file&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;             Selects a file from which the identity (private key) for public key authentica-&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;             tion is read.  The default is ~/.ssh/id_dsa, ~/.ssh/id_ecdsa, ~/.ssh/id_ed25519&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;             and ~/.ssh/id_rsa.  Identity files may also be specified on a per-host basis in&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;             the configuration file.  It is possible to have multiple -i options (and multi-&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;             ple identities specified in configuration files).  If no certificates have been&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;             explicitly specified by the CertificateFile directive, ssh will also try to load&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;             certificate information from the filename obtained by appending -cert.pub to&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;             identity filenames.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;See that part in the middle there: &lt;code&gt;Identity files may also be specified on a per-host basis in the configuration file.&lt;/code&gt; Letâs do that next:&lt;/p&gt;
&lt;p&gt;In your favorite editor open the file: &lt;code&gt;~/.ssh/config&lt;/code&gt;. If you donât have a favorite editor just type one of the below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS X: &lt;code&gt;open ~/.ssh/config&lt;/code&gt; and it will open in TextEdit. TextEdit is the worldâs second worst editor (looking at you Notepad.exe).&lt;/li&gt;
&lt;li&gt;Linux: &lt;code&gt;nano ~/.ssh/config&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Add the lines below at the end of the file.&lt;/p&gt;
&lt;figure class="highlight plain"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;Host ccc&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    User USERNAME&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    IdentityFile /Users/pilot/.ssh/ccc.id_rsa&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    Hostname ctrl-c.club&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;Host ccc&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;ccc&lt;/code&gt; is like a shortcut.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;User USERNAME&lt;ul&gt;
&lt;li&gt;Thatâs your ctrl-c.club username&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IdentityFile&lt;ul&gt;
&lt;li&gt;The private key to sign your connection with&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hostname ctrl-c.club&lt;ul&gt;
&lt;li&gt;The host to connect to&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now save and close that up. To connect to the server you can now enter the command: &lt;/p&gt;
&lt;figure class="highlight plain"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;ssh ccc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Welcome aboard.&lt;/p&gt;
&lt;h2 id="Tmux"&gt;&lt;a href="#Tmux" class="headerlink" title="Tmux"&gt;&lt;/a&gt;Tmux&lt;/h2&gt;&lt;p&gt;One of the great holy wars of network geeks is Tmux vs Screen. Well, Iâm here to convert you to the Tmux life style. Tmux stands for âterminal multiplexerâ. It does a few important things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is persistent. It continues to run even when you detach and close your connection to the server. Next time you log in, re-attach to tmux and you are right where you left off. The session will stay there foreverâ¦unless the server is restarted.&lt;/li&gt;
&lt;li&gt;It multiplexes. You can create multiple sessions, windows, and panes running different programs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the shell:&lt;/p&gt;
&lt;figure class="highlight plain"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;tmux new -s chat&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;That will create a new &lt;code&gt;-s&lt;/code&gt;ession called âchatâ. It will look like any old terminal only with a green glowing status bar at the bottom. Open the serverâs forum:&lt;/p&gt;
&lt;figure class="highlight plain"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;iris&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;If you are new to iris, type &lt;code&gt;h&lt;/code&gt; to see the help. When you are done brushing up on the dayâs news. Letâs learn our first tmux command. &lt;/p&gt;
&lt;h3 id="Create-a-new-window"&gt;&lt;a href="#Create-a-new-window" class="headerlink" title="Create a new window"&gt;&lt;/a&gt;Create a new window&lt;/h3&gt;&lt;p&gt;All commands in tmux start with a prefix: the default is &lt;code&gt;Ctrl+b&lt;/code&gt;. The key to create a new tmux window is &lt;code&gt;c&lt;/code&gt; (for create). All together that is: &lt;code&gt;ctrl+b&lt;/code&gt; lift your fingers then &lt;code&gt;c&lt;/code&gt;. Boom, iris is gone; now we are at a new shell. Letâs use this one for IRC. Run the command &lt;code&gt;irssi&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Type in the following:&lt;/p&gt;
&lt;figure class="highlight plain"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;/connect localhost&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;/join #ctrl-c&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;Hi timemachine!!! Thanks for the blog!&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Connecting to localhost is the pro way to do itâ¦ Then you connect to Ctrl-C.clubâs channelâ¦Finally say hello. I probably wonât respond because thatâs just my tmux session idling.&lt;/p&gt;
&lt;h3 id="Issues"&gt;&lt;a href="#Issues" class="headerlink" title="Issues?"&gt;&lt;/a&gt;Issues?&lt;/h3&gt;&lt;p&gt;Before we continue. You should take the opportunity to tell me all the problems you found with this article up-to-this-point. Iâm doing all this from memory; but youâre smart, and have google, so youâll figure it out. But do let me know so I can update this for the next hacker.&lt;/p&gt;
&lt;h3 id="Switching-Windows"&gt;&lt;a href="#Switching-Windows" class="headerlink" title="Switching Windows"&gt;&lt;/a&gt;Switching Windows&lt;/h3&gt;&lt;p&gt;What about the message board? Type &lt;code&gt;Ctrl+b 0&lt;/code&gt; (zero) and you will switch to the iris window. &lt;code&gt;Ctrl-b 1&lt;/code&gt; is IRC. If you look at the green status bar you can see &lt;code&gt;[chat] 0:ruby* 1:irssi-&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[chat]&lt;/code&gt; is the name of the session.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0:ruby*&lt;/code&gt; is the iris forum window (the &lt;code&gt;*&lt;/code&gt; means it is currently active)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1:irissi-&lt;/code&gt; is the IRC client (the &lt;code&gt;-&lt;/code&gt; means itâs the last place you where)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To cycle through your windows: &lt;code&gt;Ctrl+b n&lt;/code&gt; for ânextâ and &lt;code&gt;Ctrl+b p&lt;/code&gt; for âpreviousâ&lt;/p&gt;
&lt;h3 id="Persistence"&gt;&lt;a href="#Persistence" class="headerlink" title="Persistence"&gt;&lt;/a&gt;Persistence&lt;/h3&gt;&lt;p&gt;Close your terminal â¦ donât log out, just close the app. Poof! Gonzo. Now open a new terminal, login in to copper (&lt;code&gt;ssh ccc&lt;/code&gt;), and type: &lt;code&gt;tmux at -t chat&lt;/code&gt; That will re-&lt;code&gt;at&lt;/code&gt;tach you to the &lt;code&gt;-t&lt;/code&gt;arget-session named &lt;code&gt;chat&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="Learn-more"&gt;&lt;a href="#Learn-more" class="headerlink" title="Learn more"&gt;&lt;/a&gt;Learn more&lt;/h3&gt;&lt;p&gt;To learn all about tmux open a new window (&lt;code&gt;Ctrl-b c&lt;/code&gt;) and enter the command: &lt;code&gt;man tmux&lt;/code&gt;  this will show you the manual page for the software. See if you can learn how to create a new pane and switch between them without using the mouse. (type &lt;code&gt;q&lt;/code&gt; to quit man, &lt;code&gt;/&lt;/code&gt; to search the document).&lt;/p&gt;
&lt;p&gt;Have fun.&lt;/p&gt;

  &lt;/div&gt;
&lt;/article&gt;



        
          </description><author>Timemachine</author><category>Community</category><category>Tilde</category><guid isPermaLink="true">https://ctrl-c.club/~timemachine/2020/09/09/First-Day-in-the-Tildesphere/</guid><pubDate>Wed, 09 Sep 2020 00:00:00 GMT</pubDate></item><item><title>Publish VimWiki to Blog</title><link>http://ctrl-c.club/~timemachine/2020/09/02/Publish-VimWiki-to-Blog/index.html</link><description>&lt;article class="post"&gt;
  &lt;header&gt;
    
    &lt;h1 class="posttitle"&gt;
        Publish VimWiki to Blog
    &lt;/h1&gt;



    &lt;div class="meta"&gt;
      &lt;span class="author"&gt;
        &lt;span&gt;An abridged history of computer programming&lt;/span&gt;
      &lt;/span&gt;
      
    &lt;div class="postdate"&gt;
      
        &lt;time datetime="2020-09-02T18:00:15.000Z"&gt;2020-09-02&lt;/time&gt;
        
      
    &lt;/div&gt;


      

      
    &lt;div class="article-tag"&gt;
        &lt;i class="fas fa-tag"&gt;&lt;/i&gt;
        &lt;a class="tag-link-link" href="/~timemachine/tags/Perl/" rel="tag"&gt;Perl&lt;/a&gt;, &lt;a class="tag-link-link" href="/~timemachine/tags/Programming/" rel="tag"&gt;Programming&lt;/a&gt;, &lt;a class="tag-link-link" href="/~timemachine/tags/VimWiki/" rel="tag"&gt;VimWiki&lt;/a&gt;
    &lt;/div&gt;


    &lt;/div&gt;
  &lt;/header&gt;
  

  &lt;div class="content"&gt;
    &lt;h3 id="What-is-VimWiki"&gt;&lt;a href="#What-is-VimWiki" class="headerlink" title="What is VimWiki?"&gt;&lt;/a&gt;What is VimWiki?&lt;/h3&gt;&lt;p&gt;I use &lt;a target="_blank" rel="noopener" href="https://github.com/vimwiki/vimwiki"&gt;VimWiki&lt;/a&gt; as my personal wiki and note taking tool. Sometimes what I write in my wiki I want to publish  to my &lt;a href="/~timemachine3030"&gt;blog&lt;/a&gt;. This script aims to do that.&lt;/p&gt;
&lt;h2 id="Requirements"&gt;&lt;a href="#Requirements" class="headerlink" title="Requirements"&gt;&lt;/a&gt;Requirements&lt;/h2&gt;&lt;p&gt;In essence this is just a copy from my &lt;code&gt;~/vimwiki&lt;/code&gt; folder into my &lt;code&gt;~/Projects/blogs/source/_posts/&lt;/code&gt; folder. Hexo (my site generator) wants some meta data added to the top of the file, so Iâll need to have that included. Iâll most likely be in vim, editing the wiki, when I decide to publish it so I can create a vim command to initialize the copy, but I donât want to write the script in vimscript; that would be too much reliance on vim and I want to be able to publish any markdown file.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Copy first parameter to &lt;code&gt;~/Projects/blogs/source/_posts/&lt;/code&gt; make configurable if itâs easy.&lt;/li&gt;
&lt;li&gt;Add the hexo meta data to the top of the file. There is a template for this in &lt;code&gt;~/Projects/blogs/scafolds/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;tags&lt;/code&gt; as switches to the command, as &lt;code&gt;--tags "Programming, Markdown"&lt;/code&gt; or as &lt;code&gt;--tag Programming --tag Markdown&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The fun thing about writing requirements for even the smallest of scripts is you get a first shot of thinking about your interface. While looking up the location of hexoâs scaffolds folder and thought to my self âI can just use hexo to create the file and then append the vimwiki file to the endâ. Will that work? Probably, it couples this tool tightly to hexo, but so does using hexoâs template format. Uncoupling from the template format is more configuration than I want to do for this small âget some automation in place scriptâ.&lt;/p&gt;
&lt;h2 id="I-guess-bash"&gt;&lt;a href="#I-guess-bash" class="headerlink" title="I guess bash?"&gt;&lt;/a&gt;I guess bash?&lt;/h2&gt;&lt;p&gt;Originally I wanted to write this program in JavaScript and run it in with npm. There are loads of command line argument parsers for node.js and file manipulation is easy. The requirements tell me that two commands should do what I wantâ¦&lt;/p&gt;
&lt;p&gt;Never mindâ¦ The hexo command line tools donât have the ability to add tags from the invocation of &lt;code&gt;hexo new page ...&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;I could use &lt;code&gt;sed&lt;/code&gt; to parse the header and write the tags in. Iâm not great at &lt;code&gt;sed&lt;/code&gt; and I would be just copy something off stack overflow to solve the issue. I donât want to do that.&lt;/p&gt;
&lt;p&gt;I could write a hexo plugin but thatâs whole different rabbit hole.&lt;/p&gt;
&lt;h2 id="Maybe-Perl"&gt;&lt;a href="#Maybe-Perl" class="headerlink" title="Maybe Perl?"&gt;&lt;/a&gt;Maybe Perl?&lt;/h2&gt;&lt;p&gt;A fun maxim is: âif bash scripts can get 75% of the way there Perl can finish itâ&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" rel="footnote"&gt;&lt;span class=""&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;. You can quote a bash command in backticks (or &lt;code&gt;px()&lt;/code&gt;) and Perl will run it and return the result.  This is not a bad choice considering the short comings I describe in the previous chapter. I donât want to âtool upâ for this project so I hope the version of per that ships with MacOS is good enough, &lt;code&gt;v5.30.0&lt;/code&gt;&lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" rel="footnote"&gt;&lt;span class=""&gt;[2]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt; &lt;/p&gt;
&lt;h2 id="The-Script"&gt;&lt;a href="#The-Script" class="headerlink" title="The Script"&gt;&lt;/a&gt;The Script&lt;/h2&gt;&lt;figure class="highlight perl"&gt;  &lt;figcaption class="caption"&gt;Process command line arguments&lt;/figcaption&gt;
&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; strict;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; warnings;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; File::Basename;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="keyword"&gt;use&lt;/span&gt; Getopt::Long &lt;span class="string"&gt;qw(GetOptions)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt; &lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; ($path) = &lt;span class="keyword"&gt;shift&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="keyword"&gt;die&lt;/span&gt; &lt;span class="string"&gt;"Filename Required"&lt;/span&gt; &lt;span class="keyword"&gt;unless&lt;/span&gt; $path;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; @tags;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; $taglist = &lt;span class="string"&gt;""&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;GetOptions(&lt;span class="string"&gt;"tag:s@" =&amp;gt; \@tags, "&lt;/span&gt;tags:&lt;span class="keyword"&gt;s&lt;/span&gt;&lt;span class="string"&gt;" =&amp;gt; \$taglist);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="string"&gt;$taglist = $taglist . ', ' if $taglist;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="string"&gt;$taglist = $taglist . join(', ', @tags);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="string"&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="string"&gt;my ($title,$dir,$ext) = fileparse($path, qr/\.[^.]*/);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;  &lt;figcaption class="directive"&gt;(#save publish_from_vimwiki.pl)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This allows commands like &lt;code&gt;publish_from_vimwiki.pl ~/vimwiki/somefile.md --tags "SomeTag, Two, Three"&lt;/code&gt; the &lt;code&gt;GetOpt()&lt;/code&gt; call will look for individual tags in &lt;code&gt;--tag&lt;/code&gt; or/and a comma separated list of tags in &lt;code&gt;--tags&lt;/code&gt;. Everything ends up in the &lt;code&gt;$tagslist&lt;/code&gt; scalar.&lt;/p&gt;
&lt;figure class="highlight perl"&gt;  &lt;figcaption class="caption"&gt;Create blog post&lt;/figcaption&gt;
&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; @result = &lt;span class="string"&gt;qx(hexo --cwd="~/Projects/blog" new post "$title")&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="keyword"&gt;my&lt;/span&gt; $blogfile = $result[-&lt;span class="number"&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;$blogfile =~ &lt;span class="regexp"&gt;s/INFO  Created:\s+([^\r\n]+)[\r\n]/$1/&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;$blogfile = &lt;span class="keyword"&gt;glob&lt;/span&gt;($blogfile);&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="keyword"&gt;rename&lt;/span&gt;($blogfile, $blogfile.&lt;span class="string"&gt;'.bak'&lt;/span&gt;) &lt;span class="keyword"&gt;or&lt;/span&gt; &lt;span class="keyword"&gt;die&lt;/span&gt; $!;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;  &lt;figcaption class="directive"&gt;(#save publish_from_vimwiki.pl)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Here we crate the new post, calling &lt;code&gt;hexo new post&lt;/code&gt; directly. Then munch the results of the hexo command to get the name of the file it created. We make a back of the new post; need to remove that after we are done:&lt;/p&gt;
&lt;figure class="highlight perl"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;&lt;span class="keyword"&gt;unlink&lt;/span&gt; $blogfile.&lt;span class="string"&gt;'.bak'&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;  &lt;figcaption class="directive"&gt;(#save publish_from_vimwiki.pl|cleanup)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Now we can copy the backup file back into the blog post file modifying the tags along the way.&lt;/p&gt;
&lt;figure class="highlight perl"&gt;  &lt;figcaption class="caption"&gt;Write the header of the blog w/ tags&lt;/figcaption&gt;
&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;&lt;span class="keyword"&gt;open&lt;/span&gt;(BLOGIN, &lt;span class="string"&gt;'&amp;lt;'&lt;/span&gt;.$blogfile.&lt;span class="string"&gt;'.bak'&lt;/span&gt;) &lt;span class="keyword"&gt;or&lt;/span&gt; &lt;span class="keyword"&gt;die&lt;/span&gt; $!;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="keyword"&gt;open&lt;/span&gt;(OUT, &lt;span class="string"&gt;'&amp;gt;'&lt;/span&gt;.$blogfile) &lt;span class="keyword"&gt;or&lt;/span&gt; &lt;span class="keyword"&gt;die&lt;/span&gt; $!;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="keyword"&gt;while&lt;/span&gt;(&lt;span class="keyword"&gt;my&lt;/span&gt; $line = &amp;lt;BLOGIN&amp;gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    $line =~ &lt;span class="regexp"&gt;s/tags:/tags: [$taglist]/g&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    &lt;span class="keyword"&gt;print&lt;/span&gt; OUT $line;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="keyword"&gt;close&lt;/span&gt;(BLOGIN);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;  &lt;figcaption class="directive"&gt;(#save publish_from_vimwiki.pl)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Finally we are ready to append with VimWiki file contents to the blog post.&lt;/p&gt;
&lt;figure class="highlight perl"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;&lt;span class="keyword"&gt;open&lt;/span&gt; WIKIIN, &lt;span class="string"&gt;'&amp;lt;'&lt;/span&gt;, $path &lt;span class="keyword"&gt;or&lt;/span&gt; &lt;span class="keyword"&gt;die&lt;/span&gt; $!;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="keyword"&gt;while&lt;/span&gt; (&lt;span class="keyword"&gt;my&lt;/span&gt; $line = &amp;lt;WIKIIN&amp;gt;) {&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;    &lt;span class="keyword"&gt;print&lt;/span&gt; OUT $line;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="keyword"&gt;close&lt;/span&gt;(WIKIIN);&lt;/span&gt;&lt;br&gt;&lt;span class="line"&gt;&lt;span class="keyword"&gt;close&lt;/span&gt;(OUT);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;  &lt;figcaption class="directive"&gt;(#save publish_from_vimwiki.pl)&lt;/figcaption&gt;
&lt;/figure&gt;




&lt;div id="footnotes"&gt;&lt;hr&gt;&lt;div id="footnotelist"&gt;&lt;ol&gt;&lt;li id="fn:1"&gt;&lt;span&gt;1.&lt;/span&gt;&lt;span&gt;&lt;p&gt;This is never true.&lt;/p&gt;
&lt;a href="#fnref:1" rev="footnote"&gt; &amp;amp;hookleftarrow;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li id="fn:2"&gt;&lt;span&gt;2.&lt;/span&gt;&lt;span&gt;&lt;p&gt;It is fine.&lt;/p&gt;
&lt;a href="#fnref:2" rev="footnote"&gt; &amp;amp;hookleftarrow;&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/article&gt;



        
          </description><author>Timemachine</author><category>Programming</category><category>Perl</category><category>VimWiki</category><guid isPermaLink="true">https://ctrl-c.club/~timemachine/2020/09/02/Publish-VimWiki-to-Blog/</guid><pubDate>Wed, 02 Sep 2020 00:00:00 GMT</pubDate></item></channel></rss>