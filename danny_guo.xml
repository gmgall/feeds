<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Danny Guo</title><link>https://www.dannyguo.com/blog</link><description>Danny Guo</description><language>en</language><lastBuildDate>Fri, 04 Apr 2025 06:20:12 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Beat the Drum</title><link>https://www.dannyguo.com/blog/beat-the-drum</link><description>&lt;article&gt;
        &lt;h1&gt;Beat the Drum&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2025-01-31"&gt;
                January 31, 2025
            &lt;/time&gt;
             · 
            678 words  ·  ~4 minutes to read
            
        &lt;/div&gt;

        &lt;p&gt;&lt;a href="https://www.linkedin.com/in/eric-burton-1a420015/"&gt;My former COO&lt;/a&gt; gave me a
piece of advice when I became a manager. He said that leaders have to deliver
the same message again and again and again to make sure it gets through to
everyone in the organization. Sometimes, it’s also necessary to simplify the
message and lose some nuance for it to actually sink in. The advice made sense
to me at the time, but it became more concrete to me as I tried to apply it and
as I noticed when leaders above me failed to do it. I brought it up to my former
COO recently, and he put it in a fantastically pithy way by saying “yep, you
have to beat the drum.”&lt;/p&gt;
&lt;p&gt;In the past, some militaries &lt;a href="https://en.wikipedia.org/wiki/Military_drums"&gt;used
drums&lt;/a&gt; as a form of communication.
The drums kept armies aligned on messages as simple as “advance” and “retreat.”
Similary, organizations need their leaders to continuously communicate to keep
people in sync.&lt;/p&gt;
&lt;p&gt;The larger the organization, the more important this idea is. In a startup with
a few people, it’s easy for everyone to stay on the same page. In a massive
company with thousands of people, everyone getting out of sync from each other
is the default outcome. It takes work to get everyone to even hear a particular
message, more work to get them to remember it, and even more work to get them to
act on it.&lt;/p&gt;
&lt;h2 id="failure-modes"&gt;Failure Modes&lt;a class="anchor" href="#failure-modes"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This may seem wrong. If the CEO wants to send a message to everyone, they just
need to send a company-wide email or mention it in an all-hands meeting, right?
Nope, because there are so many ways for such a simple thing to fail.&lt;/p&gt;
&lt;p&gt;One person only skims their emails and didn’t bother reading the CEO’s detailed
email.&lt;/p&gt;
&lt;p&gt;Another person was on vacation during the all-hands and never bothered to try to
catch up on it.&lt;/p&gt;
&lt;p&gt;Another person was out sick and does want to catch up, but the all-hands wasn’t
recorded, and nobody took notes. The person asked someone else what the CEO
said, resulting in a &lt;a href="https://en.wikipedia.org/wiki/Chinese_whispers"&gt;game of
telephone&lt;/a&gt; and a distorted
message.&lt;/p&gt;
&lt;p&gt;Another person got the message but then forgot it a few days later. This is the
&lt;a href="https://en.wikipedia.org/wiki/Forgetting_curve"&gt;forgetting curve&lt;/a&gt; at work. If
the CEO doesn’t repeat the message regularly, the memory of that message
disappears. Especially if the message is complicated and has many points.&lt;/p&gt;
&lt;p&gt;Another person disagreed with the message, ignored it, and nobody cared. This
person eventually learned to just disregard everything the CEO says.&lt;/p&gt;
&lt;p&gt;Another person doesn’t have all the context that the CEO does and as a result,
fails to fully understand what the CEO said.&lt;/p&gt;
&lt;p&gt;There are so many failure modes, even though the message is coming from the CEO,
the person who should have the easiest time getting a message across. But even
the CEO needs to repeat a message multiple times and figure out how to word it
so that people truly get it.&lt;/p&gt;
&lt;h2 id="empathy"&gt;Empathy&lt;a class="anchor" href="#empathy"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One reason it’s hard for leaders to actually do this (beyond the fact that it
takes work) is that it’s an exercise in empathy, even though leaders tend to
have big egos and to believe that everyone thinks what they have to say is
particularly important and smart. But to communicate effectively, they have to
put themselves in the mindset of their audience. And their audience may be so
used to hearing nonsense that they develop a strong filter for what they hear.&lt;/p&gt;
&lt;p&gt;When you come up with a message, it’s easy to understand and remember it because
it’s your own creation. But that doesn’t mean it will be easy for someone else
to digest it, retain it, and internalize it. You need to repeat it and ideally
write it down somewhere for people to reference. If you do that and don’t keep
changing what you say, people may actually start to believe that you mean it.&lt;/p&gt;
&lt;p&gt;It’s a simple concept but takes discipline to apply. Figure out what’s
important for people to know. Say it. Say it again. Say it in a different
medium. Say it more simply. Say it to different people. Just don’t stop beating
the drum.&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/beat-the-drum</guid><pubDate>Fri, 31 Jan 2025 00:00:00 GMT</pubDate></item><item><title>Prefer Numbered Lists to Bullets</title><link>https://www.dannyguo.com/blog/prefer-numbered-lists-to-bullets</link><description>&lt;article&gt;
        &lt;h1&gt;Prefer Numbered Lists to Bullets&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2024-12-30"&gt;
                December 30, 2024
            &lt;/time&gt;
             · 
            348 words  ·  ~2 minutes to read
            
        &lt;/div&gt;

        &lt;p&gt;When communicating in writing (especially asynchronously), I suggest preferring
numbered lists to bullets because numbered lists give others an easy way to
reference your specific points.&lt;/p&gt;
&lt;p&gt;To make my communication more efficient, I first batch up what I need to say or
ask. Then I break it down into separate, addressable points. For example, if I’m
getting started on a project, I might read the requirements and come up with a
list of questions for the project manager.&lt;/p&gt;
&lt;p&gt;Me:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;What if &amp;lt;insert edge case&amp;gt; happens?&lt;/li&gt;
&lt;li&gt;How urgent is this project?&lt;/li&gt;
&lt;li&gt;Do we need legal department approval?&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Project manager:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;I hadn’t thought about that. If it happens, how about we &amp;lt;insert manual
workaround&amp;gt;?&lt;/li&gt;
&lt;li&gt;The CEO wants this ASAP.&lt;/li&gt;
&lt;li&gt;They already did.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Me:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Yeah, that works. We can automate it later.&lt;/li&gt;
&lt;li&gt;Okay, should we stop working on project A or project B so that we have
bandwidth to pick this up?&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Project manager:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol start="2"&gt;
&lt;li&gt;Let’s stop B.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Because of the numbering, it’s easier to maintain multiple conversations.
Numbers create lightweight threads that are easy to follow, even if there are
many more points than in this contrived example, and even if the back and forth
involves more than just short sentences.&lt;/p&gt;
&lt;p&gt;When people use bullets instead, I’ve seen others respond by copying the entire
message and then replying inline with a different color or bolding the
responses. This seems to be a common pattern in email (as opposed to something
like Slack). I don’t think that’s a bad approach, but numbering things is easier
and can be enough for many conversations.&lt;/p&gt;
&lt;p&gt;One objection could be that there is a semantic difference between numbered
lists and bulleted lists. Numbered lists imply that the order is important,
which might not be the case. My response is that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;This is about effective communication between humans, who are generally smart
enough to understand when order is important.&lt;/li&gt;
&lt;li&gt;The writer can always be specific that order is or is not important if the
distinction matters.&lt;/li&gt;
&lt;li&gt;If I used bullets here, and you wanted to argue that my second point is
unconvincing, you would effectively be converting a bulleted list into a
numbered one for convenience, which is exactly what I am saying we should be
doing.&lt;/li&gt;
&lt;/ol&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/prefer-numbered-lists-to-bullets</guid><pubDate>Mon, 30 Dec 2024 00:00:00 GMT</pubDate></item><item><title>Google Banned Me From Google Voice</title><link>https://www.dannyguo.com/blog/google-banned-me-from-google-voice</link><description>&lt;article&gt;
        &lt;h1&gt;Google Banned Me From Google Voice&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2024-11-07"&gt;
                November 7, 2024
            &lt;/time&gt;
             · 
            2,562 words  ·  ~13 minutes to read
            
        &lt;/div&gt;

        &lt;p&gt;After 15 years, Google banned me from &lt;a href="https://voice.google.com/"&gt;Google Voice&lt;/a&gt;.
This post is a summary of what happened, with the hope that it might help
someone in the future who runs into the same situation. &lt;a href="#retrospective"&gt;At the
end&lt;/a&gt;, I have some
thoughts about the latent danger of being banned from Google at any time with no
notice.&lt;/p&gt;
&lt;h2 id="background"&gt;Background&lt;a class="anchor" href="#background"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I got my first cell phone in high school and immediately signed up for Google
Voice simply because I wanted to be able to send and receive texts from my
computer. So my Google Voice number is the only one I’ve ever given out to
friends, and I use it as my phone number whenever I can. The only time I use my
“real” Verizon phone number is when I can’t receive verification codes because
some services block &lt;a href="https://en.wikipedia.org/wiki/Voice_over_IP"&gt;VoIP&lt;/a&gt; numbers.&lt;/p&gt;
&lt;p&gt;That was a minor annoyance, and I’ve loved being able to text and even call from
any device, even if my phone was off or not in service (e.g. traveling
internationally). So I stuck with it for 15 years. My only worry has been that
it seems like another product that Google could easily decide to kill off and
send to the &lt;a href="https://killedbygoogle.com/"&gt;Google graveyard&lt;/a&gt; at any moment. But
that turned out to be the wrong worry for me.&lt;/p&gt;
&lt;h2 id="getting-banned"&gt;Getting Banned&lt;a class="anchor" href="#getting-banned"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My problems started on October 4, 2024. I got a notification on my phone saying
I had been logged out of my Google account. This had never happened to me
before, and I thought someone might be trying to hack into my account. I was
concerned but not terribly worried because I had two-factor authentication
turned on. On my personal laptop, I saw a notification that I had been logged
out of Google Drive.&lt;/p&gt;
&lt;p&gt;I logged back in on my phone and laptop, going through two-factor authentication
both times. Then I checked the &lt;a href="https://myaccount.google.com/notifications"&gt;security
log&lt;/a&gt; for my Google account. I saw
that my account had been disabled at 12:55 pm, but the log didn’t have any
details about why. Logging back in had restored my account at 2:38 pm.&lt;/p&gt;
&lt;p&gt;The log didn’t have any other security activity, like login attempts. I even
reviewed my &lt;a href="https://myactivity.google.com"&gt;full Google activity&lt;/a&gt; but didn’t see
anything that I didn’t recognize.  Everything seemed back to normal, so I went
back to work.&lt;/p&gt;
&lt;p&gt;A few hours later, I tried sending some pictures in a group text in Google
Voice. The first picture went through fine. But when I tried to send a second
one, I received an error message that said something like “Sorry, there was an
error. Please try again later.” I retried a few times. Then I tried sending a
plain text message to my wife and got the same error.&lt;/p&gt;
&lt;p&gt;I was worried that it was related to my account being deactivated, but the
optimist in me thought that maybe Google Voice was having an outage. Until I got
home and went on my laptop to check Google Voice in my browser. It redirected me
to &lt;a href="https://support.google.com/accounts/answer/40039?p=grandcentral"&gt;this Google support
page&lt;/a&gt; with this
message:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unable to access a Google product&lt;/p&gt;
&lt;p&gt;If you’ve been redirected to this page from a particular product, it means
that your access to this product has been suspended. Read on for more
information.&lt;/p&gt;
&lt;p&gt;Your access to this Google product has been suspended because of a perceived
violation of either the &lt;a href="https://www.google.com/policies/terms/"&gt;Google Terms of
Service&lt;/a&gt; or product-specific Terms of
Service. For specific product guidelines, please visit the homepage of each
Google product you’re interested in for a link to its Terms of Service.&lt;/p&gt;
&lt;p&gt;Google reserves the right to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Disable an account for investigation.&lt;/li&gt;
&lt;li&gt;Suspend a Google Account user from accessing a particular product or the
entire Google Accounts system, if the Terms of Service or &lt;a href="https://support.google.com/accounts/answer/147806"&gt;product-specific
policies&lt;/a&gt; are violated.&lt;/li&gt;
&lt;li&gt;Terminate an account at any time, for any reason, with or without notice.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next steps for suspended accounts: If you believe your access to this product
was suspended in error, &lt;a href="https://support.google.com/accounts/contact/suspended"&gt;contact
us&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Tip: If you are not redirected to this page from a product, review your
&lt;a href="https://myaccount.google.com/restrictions"&gt;service restrictions to file an
appeal&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My heart sank. Getting banned by Google’s automated systems is a situation that
I have read &lt;a href="https://www.google.com/search?q=hacker+news+google+account+disabled+site:news.ycombinator.com"&gt;plenty of
stories&lt;/a&gt;
about, and I had an idea of what was next: a Kafkaesque situation in which I
would probably never talk to an actual human being, I’d never get any useful
details, and I would likely be forced to accept losing my phone number.&lt;/p&gt;
&lt;p&gt;I tried making an outbound call. It didn’t work. I asked my wife to call me.
That didn’t work either. I asked my wife to text me. From her perspective, it
looked like it worked, but I never received it. That was even worse because it
meant that anyone who texted me wouldn’t get any indication that anything was
wrong.&lt;/p&gt;
&lt;h2 id="first-appeal"&gt;First Appeal&lt;a class="anchor" href="#first-appeal"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Google support page advised me to &lt;a href="https://support.google.com/accounts/contact/suspended"&gt;submit a
form&lt;/a&gt; appealing the
suspension. I did so immediately, explaining that I was suspended right after
sending a picture and noting that I had been logged out of my Google account
earlier in the day. I received an automated email:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Thank you for contacting us about restoring access to your Google Account.&lt;/p&gt;
&lt;p&gt;Google will review your appeal as soon as possible. Most requests take 2
business days to review, but some might take longer.&lt;/p&gt;
&lt;p&gt;You may be able to download your data from some Google services. To get
started, sign in to your account. If your account is eligible, you’ll see a
link to download your data.&lt;/p&gt;
&lt;p&gt;Thanks for your patience.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I did try to use &lt;a href="https://takeout.google.com/"&gt;Google Takeout&lt;/a&gt; to export my
data, but Google Voice no longer shows up in the list of products, even though
I’m sure it did in the past because I have &lt;a href="https://support.google.com/voice/answer/10130510?hl=en"&gt;exported my Google Voice
data&lt;/a&gt; before. So the
suspension presumably affected that as well.&lt;/p&gt;
&lt;p&gt;I subscribe to a &lt;a href="https://one.google.com/about"&gt;Google One&lt;/a&gt; plan. I knew that
one of the more understated benefits is the ability to get live support from an
actual person, something that is generally impossible with Google. I had nothing
to lose, so I started a chat. It ended up being a waste of time because the
person I talked to was fixated on me mentioning getting logged out of my
account. So they started recommending ways to protect my account. When I brought
the conversation back to the Google Voice suspension, they were unable to access
the ticket that was created when I submitted my appeal. So I ended the
conversation.&lt;/p&gt;
&lt;p&gt;On October 6 (two days later), I heard back about my appeal:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hello,&lt;/p&gt;
&lt;p&gt;We have reviewed your request and cannot reinstate your Google Voice service.
Your Google Voice service has been suspended for violations of our &lt;a href="https://support.google.com/voice/answer/9230450?hl=en"&gt;Google
Voice Policies&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have any further questions, please consult the &lt;a href="https://support.google.com/voice/#topic=13968863"&gt;Google Voice Help
Center&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks,&lt;/p&gt;
&lt;p&gt;Google Voice Support Team&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="second-appeal"&gt;Second Appeal&lt;a class="anchor" href="#second-appeal"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;On October 7, I submitted a second appeal. I explained that I reviewed the
Google Voice policies and did not believe I violated any of them. I never sent
large quantities of texts, I never sent commercial texts, I only texted friends
and family, and there was nothing remotely inappropriate about the picture I
sent right before I was suspended. The picture was of four adults around a baby
in a stroller on a sidewalk. The baby is dressed and even has a blanket on him.
I added that that was the only text I sent on the day I was suspended, and I
didn’t make any calls that day.&lt;/p&gt;
&lt;p&gt;On October 8, I received the same reply that I got for the first appeal.&lt;/p&gt;
&lt;p&gt;I considered writing this blog post immediately, posting it to Hacker News, and
hopefully getting enough traction that someone at Google would see it and do
something about it. But I didn’t bother because even on the off chance that it
worked, I wouldn’t be able to trust Google Voice again and would still want to
port my phone number out.&lt;/p&gt;
&lt;h2 id="reclaiming-my-number"&gt;Reclaiming My Number&lt;a class="anchor" href="#reclaiming-my-number"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At this point, porting my number out was my only priority. I didn’t want to tell
all my friends and family to use a new number. And I didn’t want to deal with
trying to update my number for a countless number of services, especially since
I’m sure it’d be a hassle for many of them without access to the old number.&lt;/p&gt;
&lt;p&gt;I did some searching and learned that the Google Voice subreddit has &lt;a href="https://www.reddit.com/r/Googlevoice/comments/17n4zl2/google_voice_service_suspensions/"&gt;an entire
document on
suspensions&lt;/a&gt;.
People apparently post about suspensions often enough that the subreddit
disallows threads on suspensions since there’s nothing they can do about them.&lt;/p&gt;
&lt;p&gt;I found &lt;a href="https://www.reddit.com/r/Googlevoice/comments/1dr47m4/account_suspended_reclaiming_your_number_and_your/"&gt;one wonderfully detailed
post&lt;/a&gt;
(“Account Suspended - Reclaiming your Number and your Dignity; a How-To Guide”)
that has been removed because of the subreddit’s rule. But that post, as well as
&lt;a href="https://www.reddit.com/r/google/comments/1filpr1/got_my_suspended_google_voice_number_back_fcc/"&gt;another
one&lt;/a&gt;
that is still up, said the posters were able to get their numbers out by &lt;a href="https://consumercomplaints.fcc.gov/hc/en-us"&gt;filing
complaints&lt;/a&gt; with the
&lt;a href="https://en.wikipedia.org/wiki/Federal_Communications_Commission"&gt;FCC&lt;/a&gt;. So I
planned to do that, expecting the whole process to take a couple of months.&lt;/p&gt;
&lt;p&gt;On October 9, I added a new line to my Verizon plan as a target for my Google
Voice number. A silver lining is that with the new line, I was able to get a new
iPhone 15 for almost free after bill credits. I initiated a port in request for
my Google Voice number. I expected the port to fail, since I was unable to
access my Google Voice account to &lt;a href="https://support.google.com/voice/answer/1065667?hl=en"&gt;unlock the
number&lt;/a&gt;. Then I would
submit the FCC complaint.&lt;/p&gt;
&lt;p&gt;But to my pleasant surprise, the port went through in a couple of days! I
activated service on the new iPhone with my old Google Voice number. I did have
an issue where I could make calls and send and receive texts, but I couldn’t
receive calls. I called the Verizon port center (1-888-844-7095), and the person
who helped me did something on their end to truly finish off the port. After
that, I could receive calls as well. So I never needed to use the FCC’s muscle.&lt;/p&gt;
&lt;p&gt;Then I did a &lt;a href="https://www.verizon.com/support/swap-devices-faqs/"&gt;number swap&lt;/a&gt;
between my Verizon lines so that I can use my former Google Voice number on my
Android phone instead of the iPhone.&lt;/p&gt;
&lt;p&gt;After a couple of days, I looked up the number on
&lt;a href="https://freecarrierlookup.com/"&gt;FreeCarrierLookup&lt;/a&gt;, and it showed up as a
wireless Verizon number. Previously, it showed up as a landline, and the carrier
was &lt;a href="https://www.bandwidth.com/"&gt;Bandwidth&lt;/a&gt;, which is
&lt;a href="https://news.ycombinator.com/item?id=19049200"&gt;apparently&lt;/a&gt; what powers Google
Voice SMS in the backend.&lt;/p&gt;
&lt;p&gt;On October 23, I received an email from Google Voice saying that my number was
ported away:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hello Danny Guo,&lt;/p&gt;
&lt;p&gt;This email is to confirm that your Google Voice number (xxx-xxx-xxxx) has been
ported away from Google Voice. Calls made to that number will no longer ring
your forwarding phones and new voicemails won’t appear in your Google Voice
inbox.&lt;/p&gt;
&lt;p&gt;Your Google Voice account has been downgraded accordingly, but your existing
voicemails and text messages remain available in your inbox. You can also
continue placing calls from Gmail.&lt;/p&gt;
&lt;p&gt;You can upgrade your account at any time by getting a new Google Voice number.&lt;/p&gt;
&lt;p&gt;Thanks&lt;/p&gt;
&lt;p&gt;The Google Voice team&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now when I open Google Voice on my phone, it asks me to pick a new number as if
I’m starting from scratch. But on web, it still redirects me to the suspension
page.&lt;/p&gt;
&lt;h2 id="retrospective"&gt;Retrospective&lt;a class="anchor" href="#retrospective"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have conflicted thoughts about what happened. I’ve used Google services for
the majority of my life. In college, I remember playing &lt;a href="https://en.wikipedia.org/wiki/Would_you_rather"&gt;would you
rather&lt;/a&gt; at lunch, and a friend
asked if I’d rather lose access to everything Google or lose a physical sense. I
really had to think about it.&lt;/p&gt;
&lt;p&gt;I’ve only ever used Android smartphones and smartwatches, despite being
virtually the only one among my friends and family to not have switched to
iPhone. Which makes me the person who tends to get grief for ruining group chats
by turning them into &lt;a href="https://www.wsj.com/articles/why-apples-imessage-is-winning-teens-dread-the-green-text-bubble-11641618009"&gt;green
bubbles&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And I directly pay Google by subscribing to Google One, YouTube Premium, and
Google Workspace (just for my custom domain email).&lt;/p&gt;
&lt;p&gt;One major reason I’ve stuck with Google for so long is that I value using
services that are multiplatform. I may have an Android phone and watch, but I
also have a MacBook and an iPad.&lt;/p&gt;
&lt;p&gt;And I still think Google Search can be pretty magical. Despite &lt;a href="https://www.theatlantic.com/technology/archive/2023/09/google-search-size-usefulness-decline/675409/"&gt;its
decline&lt;/a&gt;
and the fact that &lt;a href="https://en.wikipedia.org/wiki/Large_language_model"&gt;LLM&lt;/a&gt;s are
just better for certain searches.&lt;/p&gt;
&lt;h3 id="fear"&gt;Fear&lt;a class="anchor" href="#fear"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;But relying on Google worries me because of all the stories I’ve read about
people being banned. Sure, some of those cases might be lacking some details
that would justify the bans, but I was convinced enough to put a lot of effort
into migrating away from Gmail several years ago. Consider how important your
email account is to your digital life and how awful it would be to suddenly lose
access to your email with no warning.&lt;/p&gt;
&lt;p&gt;By now, everything important uses my custom domain email address. I do use
Google Workspace for it, so i’m technically still using Gmail. But the point is
that I control the address. If Google bans me one day, all I have to do is
update my DNS records to switch to something like
&lt;a href="https://www.fastmail.com/"&gt;Fastmail&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The possibility of a Google ban is also one small reason I haven’t gotten into
Android development. I could &lt;a href="https://medium.com/@antaresone/google-just-terminated-my-google-play-developer-account-forever-f62d6362b6ac"&gt;accidentally violate their
terms&lt;/a&gt;
and get banned from publishing apps in an instant.&lt;/p&gt;
&lt;p&gt;And I deliberately do not take any pictures of my infant son nude on the off
chance it &lt;a href="https://www.nytimes.com/2022/08/21/technology/google-surveillance-toddler-photo.html"&gt;gets flagged as child sexual abuse
material&lt;/a&gt;
after being uploaded into Google Photos, and my entire Google account is banned.
With my recent situation, I consider myself lucky that I was at least only
banned from Google Voice.&lt;/p&gt;
&lt;p&gt;It says something that my biggest issue with Google isn’t that their services
aren’t good anymore or that they kill things off all the time. It’s that I’m
afraid they will just ban me with no recourse. It finally happened, and it
wasn’t even for a service that I was worried about.&lt;/p&gt;
&lt;h3 id="caveats"&gt;Caveats&lt;a class="anchor" href="#caveats"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I work in software and in fintech. I can understand that Google operates at such
a massive scale that many things have to be automated, and even if there are
some false positives, that could be a worthy tradeoff to Google to not have to
put humans into the loop.&lt;/p&gt;
&lt;p&gt;I also understand the logic of not telling people what rules they broke because
you don’t want bad actors to get a better understanding of the system because
that would allow them to fine tune their attacks accordingly.&lt;/p&gt;
&lt;h3 id="curiosity"&gt;Curiosity&lt;a class="anchor" href="#curiosity"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;But I’m still frustrated about temporarily losing my phone number. Sure I never
paid for Google Voice, but Google never gave me an option to pay for it. In this
case, I would have happily paid $100 just to find out why exactly I was banned.
What rule or model decided I needed to be banned?&lt;/p&gt;
&lt;p&gt;Part of it is curiosity. Was the last picture I sent the issue? Getting logged
out of my phone earlier in the day suggests it wasn’t. But I didn’t do anything
else on Google Voice that day, and I barely sent any texts or made any calls in
the days before. I’m confident that if a real person looked at my account,
they’d agree something in the automation went wrong. You may have some
skepticism. Unfortunately, I can’t provide my activity, since I can’t see it
anymore after the app recognized that my number was ported out. But I’m &lt;a href="https://www.reddit.com/r/Googlevoice/comments/1fcw44j/google_voice_exit_strategy_update/"&gt;not the
only
one&lt;/a&gt;
dealing with this kind of a situation.&lt;/p&gt;
&lt;p&gt;I wonder if I should be more upset. Maybe I should actually try to vote with my
wallet and switch to that iPhone, move my files from Google Drive to iCloud or
Dropbox, and migrate to Fastmail. But I know Google can afford to simply not
care.&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/google-banned-me-from-google-voice</guid><pubDate>Thu, 07 Nov 2024 00:00:00 GMT</pubDate></item><item><title>How to Get iCloud+ for Free</title><link>https://www.dannyguo.com/blog/how-to-get-icloud-plus-for-free</link><description>&lt;article&gt;
        &lt;h1&gt;How to Get iCloud+ for Free&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2024-04-17"&gt;
                April 17, 2024
            &lt;/time&gt;
             · 
            344 words  ·  ~2 minutes to read
            
        &lt;/div&gt;

        &lt;p&gt;For the past couple of years, I’ve subscribed to Apple’s cheapest &lt;a href="https://www.apple.com/icloud/#compare-plans"&gt;iCloud+
plan&lt;/a&gt; (with 50 GB of storage) for
free. It started unintentionally. I got the &lt;a href="https://www.apple.com/apple-card/"&gt;Apple
Card&lt;/a&gt; and changed my iCloud+ billing to it,
but I didn’t use the card for any other purchases. A few months later, I noticed
that I hadn’t seen any Apple Card payments from my bank account, so I checked my
Apple Card statement. I realized that Apple Card forgives small balances, and
the cheapest iCloud+ plan is only $0.99 per month.&lt;/p&gt;
&lt;p&gt;My latest statement shows the “Credit adjustment” at the end of the month that
brought my balance to $0. I even got $0.03 in cash back, so technically, Apple
is paying &lt;em&gt;me&lt;/em&gt; $0.36 per year to have iCloud+.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://imgur.com/JaVhkV0.jpg" alt="Apple Card statement"&gt;&lt;/p&gt;
&lt;p&gt;I make a hobby out of &lt;a href="https://www.dannyguo.com/blog/my-credit-and-debit-card-collection"&gt;taking advantage of credit card
rewards&lt;/a&gt;, so
the concept of small balance forgiveness wasn’t new to me. I’ve seen it before
with Capital One and Discover cards, and &lt;a href="https://www.doctorofcredit.com/small-balance-waiver-a-k-a-lots-of-free-99-cent-amazon-gcs/"&gt;Doctor of Credit has a
list&lt;/a&gt;
of data points. I never intentionally made a small purchase with the goal of
having it forgiven, since that’s not worth the time. But I need iCloud+ anyway,
and since it’s a subscription, I’m not spending any time on it.&lt;/p&gt;
&lt;p&gt;A caveat is that the adjustment only happens in months where I don’t use my
Apple Card for anything else. But that is typical for me because I optimize for
rewards, and Apple Card doesn’t give great rewards for me. It gives 3% back at
Apple and at certain merchants with Apple Pay. It also gives 2% back with Apple
Pay in general. Instead:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I would put Apple purchases on my &lt;a href="https://www.citi.com/credit-cards/citi-rewards-plus-credit-card"&gt;Citi
Rewards+&lt;/a&gt;
card for an extra two years of extended warranty for free.&lt;/li&gt;
&lt;li&gt;My &lt;a href="https://www.usbank.com/credit-cards/altitude-reserve-visa-infinite-credit-card.html"&gt;U.S. Bank Altitude
Reserve&lt;/a&gt;
card gives me effectively 4.5% back on all mobile wallet purchases (3x points
with a 50% bonus when redeemed through &lt;a href="https://www.usbank.com/customer-service/knowledge-base/KB0192126.html"&gt;Real-Time
Rewards&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;There are multiple cards that give 2% back on all purchases, with no Apple
Pay requirement. Such as the &lt;a href="https://www.paypal.com/us/digital-wallet/manage-money/paypal-cashback-mastercard"&gt;PayPal Cashback
Mastercard&lt;/a&gt;,
the &lt;a href="https://www.sofi.com/credit-card/"&gt;SoFi Credit Card&lt;/a&gt;, and the &lt;a href="https://www.citi.com/credit-cards/citi-double-cash-credit-card"&gt;Citi
Double Cash&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/how-to-get-icloud-plus-for-free</guid><pubDate>Wed, 17 Apr 2024 00:00:00 GMT</pubDate></item><item><title>My Cat Alerted Me to a DDoS Attack</title><link>https://www.dannyguo.com/blog/my-cat-alerted-me-to-a-ddos-attack</link><description>&lt;article&gt;
        &lt;h1&gt;My Cat Alerted Me to a DDoS Attack&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2024-04-14"&gt;
                April 14, 2024
            &lt;/time&gt;
             · 
            509 words  ·  ~3 minutes to read
            
        &lt;/div&gt;

        &lt;p&gt;A few years ago, my cat gave me my most memorable middle of the night software
engineering incident. I was working at a startup, and we didn’t have a formal
on-call rotation yet. That was a deliberate decision, since being on-call is
painful, and the team was good about just collectively keeping an eye out for
urgent alerts. We eventually set up an on-call rotation, but before that
happened, I had a fun night.&lt;/p&gt;
&lt;p&gt;Around 3 a.m., I woke up because my cat was grooming my hair. The grooming
itself wasn’t unusual. She did it occasionally, and I optimistically took it as
a sign that she actually liked me and didn’t just tolerate me. Here’s the &lt;a href="https://www.urbandictionary.com/define.php?term=Cat%20Tax"&gt;cat
tax&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/DM89U2s.jpg" alt="my cat in a Fancy Feast box"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/jDwIABh.jpg" alt="my cat grooming my hair"&gt;&lt;/p&gt;
&lt;p&gt;But in 9 years, that was the only time she did it while I was sleeping. I
checked my phone to see what time it was, and I noticed that an &lt;a href="https://aws.amazon.com/cloudwatch/"&gt;AWS
CloudWatch&lt;/a&gt; alert had gone off a couple
minutes ago because of &lt;a href="https://aws.amazon.com/blogs/networking-and-content-delivery/identifying-unhealthy-targets-of-elastic-load-balancer/"&gt;unhealthy targets for our load
balancer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I tried to go to our website, but it didn’t load. I groaned and went to log onto
my work laptop. Our monitoring dashboard showed a massive number of requests
coming from many IP addresses that were associated with different countries. And
international traffic wasn’t typical for us anyway since our products were only
available to people in the United States. It was a &lt;a href="https://www.cloudflare.com/learning/ddos/what-is-a-ddos-attack/"&gt;distributed
denial-of-service (DDoS)
attack&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My first and not great thought was to block IP addresses at the server level,
which would have been tedious and possibly ineffective if the attacker had
significantly more source IP addresses to use. But then I remembered that we had
already set up &lt;a href="https://aws.amazon.com/waf/"&gt;AWS Web Application Firewall&lt;/a&gt;. To
deal with the immediate outage, I set up a rule to &lt;a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-type-geo-match.html"&gt;block requests from other
countries&lt;/a&gt;.
It took effect and blocked hundreds of thousands of requests over the next hour
or so. Our website started working again, and the flood of requests stopped.&lt;/p&gt;
&lt;p&gt;Later that morning, we noticed that we had received an email to our customer
support inbox around when the attack started. With horrible grammar, the sender
claimed to have found a vulnerability with our website that crashed
&lt;a href="https://en.wikipedia.org/wiki/Apache_HTTP_Server"&gt;Apache&lt;/a&gt;, which we didn’t even
use. They said they stopped all traffic to our website and could keep it that
way for months. They generously offered to give us a “solution file” if we sent
them $5,000 in Bitcoin. We didn’t reply, though in retrospect, it could have
been fun to try to &lt;a href="https://www.youtube.com/watch?v=dWzz3NeDz3E"&gt;troll them&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I still find it hard to believe the perfect timing of my cat waking me up. You
might guess that the AWS alert caused my phone to vibrate or make a sound,
waking my cat up first. But I keep my phone in do not disturb mode during the
night. So I just like to think that somehow, she sensed something was wrong that
couldn’t wait until the morning. It was certainly a more pleasant way to be
woken up than by a blaring &lt;a href="https://www.pagerduty.com/"&gt;PagerDuty&lt;/a&gt; alarm.&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/my-cat-alerted-me-to-a-ddos-attack</guid><pubDate>Sun, 14 Apr 2024 00:00:00 GMT</pubDate></item><item><title>My Peloton Desk Setup</title><link>https://www.dannyguo.com/blog/my-peloton-desk-setup</link><description>&lt;article&gt;
        &lt;h1&gt;My Peloton Desk Setup&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2024-03-25"&gt;
                March 25, 2024
            &lt;/time&gt;
             · 
            672 words  ·  ~4 minutes to read
            
                        &lt;br&gt;I may earn commissions from purchases made through
                        affiliate links in this post.
                    
        &lt;/div&gt;

        &lt;p&gt;I have a desk setup for my &lt;a href="https://www.onepeloton.com"&gt;Peloton&lt;/a&gt; bike so that I
can do other things while riding. Here’s what it looks like.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/B5YLapA.jpg" alt="Peloton desk setup"&gt;&lt;/p&gt;
&lt;p&gt;This started when a coworker recommended a tray that is designed to fit in the
bike’s handle. The tray is good enough to be a functional desk on its own, but
I’ve added a laptop stand, mouse, and keyboard to make the setup more
comfortable and avoid hunching over.&lt;/p&gt;
&lt;p&gt;I’ve used it while working, writing, and reading, and I’ve even done 1-on-1
meetings while riding. But I never take an actual Peloton class with this setup.
I do a “Just Ride,” so there’s nothing playing on the Peloton screen, and I ride
at whatever leisurely pace my subconscious decides. This means I’m never out of
breath. I also don’t bother with clipping in the regular cleats for these rides.
I use a pair of slip-on shoes instead to make it easier to get on and off the
bike.&lt;/p&gt;
&lt;p&gt;This setup helps me get a little more exercise in, it gives me an energy boost
while I’m doing other things, and it can make me feel like I’m thinking better.
It’s like how going for a walk can be a way to generate good thoughts. Of
course, using a Peloton bike isn’t the only way to do this. There are many
options for
&lt;a href="https://www.amazon.com/s?k=desk+treadmill&amp;amp;crid=1PMY8FJ0RBT0M&amp;amp;sprefix=desk+treadmill%2Caps%2C91&amp;amp;linkCode=ll2&amp;amp;tag=thdalo00-20&amp;amp;linkId=6b114c9cd46971714024afd49ea29c5e&amp;amp;language=en_US&amp;amp;ref_=as_li_ss_tl"&gt;treadmills&lt;/a&gt;
and
&lt;a href="https://www.amazon.com/s?k=desk+bike&amp;amp;crid=32US6LQ8JXO9S&amp;amp;sprefix=desk+bike%2Caps%2C82&amp;amp;linkCode=ll2&amp;amp;tag=thdalo00-20&amp;amp;linkId=6a2708c284df95020ab99e6a495ab352&amp;amp;language=en_US&amp;amp;ref_=as_li_ss_tl"&gt;bikes&lt;/a&gt;
that are designed to be used with desks. &lt;a href="https://en.wikipedia.org/wiki/Stephen_Wolfram"&gt;Stephen
Wolfram&lt;/a&gt; wrote about his
&lt;a href="https://writings.stephenwolfram.com/2019/02/seeking-the-productive-life-some-details-of-my-personal-infrastructure/"&gt;treadmill desk&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’ve been happy with my setup, though it does take me a minute to switch
between desk mode and regular riding mode.&lt;/p&gt;
&lt;h1 id="tray"&gt;Tray&lt;/h1&gt;
&lt;p&gt;The tray is a &lt;a href="https://www.amazon.com/TFD-Sidewinder-Compatible-Designed-Materials/dp/B09RP6K9G8?keywords=peloton%2Bsidewinder&amp;amp;qid=1687022893&amp;amp;sr=8-2&amp;amp;ufe=app_do%3Aamzn1.fos.18ed3cb5-28d5-4975-8bc7-93deae8f9840&amp;amp;th=1&amp;amp;linkCode=ll1&amp;amp;tag=thdalo00-20&amp;amp;linkId=e51b290e4dc57e3943883ae8825f2f1d&amp;amp;language=en_US&amp;amp;ref_=as_li_ss_tl"&gt;TFD Tray+
Sidewinder&lt;/a&gt;.
It easily slides into the handlebars, and it feels secure. The original Tray is
for original model Peloton bikes, while the Tray+ is for the Bike+. I got the
Sidewinder variation because it’s wider, and I wanted more space for a mouse and
keyboard.&lt;/p&gt;
&lt;h1 id="stand"&gt;Stand&lt;/h1&gt;
&lt;p&gt;The laptop stand is a &lt;a href="https://www.amazon.com/gp/product/B09PQTF49G?ie=UTF8&amp;amp;th=1&amp;amp;linkCode=ll1&amp;amp;tag=thdalo00-20&amp;amp;linkId=6c979fa71bdfa2f3100c140d54559ac3&amp;amp;language=en_US&amp;amp;ref_=as_li_ss_tl"&gt;Rottay
stand&lt;/a&gt;.
I picked this one because it allows adjusting both the height and the angle. The
height can go up to 16 inches, which is higher than most of the options that I
considered. For ergonomics, I wanted to be able to get the top of my laptop
screen to near eye level.&lt;/p&gt;
&lt;h1 id="keyboard"&gt;Keyboard&lt;/h1&gt;
&lt;p&gt;The keyboard is a &lt;a href="https://www.amazon.com/gp/product/B09KNRKZ74?ie=UTF8&amp;amp;th=1&amp;amp;linkCode=ll1&amp;amp;tag=thdalo00-20&amp;amp;linkId=03ef1271afae74f7462762c4ab2dbe83&amp;amp;language=en_US&amp;amp;ref_=as_li_ss_tl"&gt;Epomaker
NT68&lt;/a&gt;.
Any wireless keyboard would work, but I picked this one because it has
mechanical switches, it can connect over Bluetooth, it’s easy to switch
connections between my personal and work laptops, and it charges over USB-C.&lt;/p&gt;
&lt;p&gt;It’s also one of the few keyboards that matches the Mac keyboard layout, with
four modifier keys in the bottom left corner. So my muscle memory doesn’t break
when I switch from a MacBook keyboard. It also means I don’t have to curl my
thumb in as much to hit the Command key.&lt;/p&gt;
&lt;h1 id="mouse"&gt;Mouse&lt;/h1&gt;
&lt;p&gt;The mouse is a &lt;a href="https://www.amazon.com/Logitech-MX-ERGO-Wireless-Trackball/dp/B0768M8B5J?crid=2DI5ME30NR08&amp;amp;keywords=mx+ergo&amp;amp;qid=1687022549&amp;amp;sprefix=mx+ergo%2Caps%2C166&amp;amp;sr=8-3&amp;amp;ufe=app_do%3Aamzn1.fos.18ed3cb5-28d5-4975-8bc7-93deae8f9840&amp;amp;linkCode=ll1&amp;amp;tag=thdalo00-20&amp;amp;linkId=1ed14c1194590b4d23b30caf07c70808&amp;amp;language=en_US&amp;amp;ref_=as_li_ss_tl"&gt;Logitech MX Ergo
Plus&lt;/a&gt;.
I chose it because it’s a trackball mouse, so I don’t have to move the mouse
itself around, which saves space. It also means that I don’t need to worry about
the mouse being able to track on the tray’s transparent surface. A mouse pad
would solve that problem, but it’d be another thing to move in a setup that I
frequently install and remove.&lt;/p&gt;
&lt;p&gt;Note that there’s also a &lt;a href="https://www.amazon.com/Logitech-Ergo-Wireless-Trackball-Mouse/dp/B0753P1GTS?crid=2DI5ME30NR08&amp;amp;keywords=mx+ergo&amp;amp;qid=1687022626&amp;amp;sprefix=mx+ergo%2Caps%2C166&amp;amp;sr=8-1&amp;amp;ufe=app_do%3Aamzn1.fos.18ed3cb5-28d5-4975-8bc7-93deae8f9840&amp;amp;linkCode=ll1&amp;amp;tag=thdalo00-20&amp;amp;linkId=0894288ea0db62545b92a55dbd8f81b2&amp;amp;language=en_US&amp;amp;ref_=as_li_ss_tl"&gt;regular MX
Ergo&lt;/a&gt;.
The only difference is that the Plus comes with an extra wedge to angle the
mouse 10 degrees more vertically, &lt;a href="https://www.ergopedia.ca/risk_factors/Pronation_or_Working_with_the_Hands_Flat_on_the_Worksurface.html"&gt;reducing
pronation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I do wish this mouse charged over USB-C instead of micro USB, that it had
on-board memory so that I don’t have to keep running Logitech software to remap
buttons, and that it had more buttons to begin with. But there just there aren’t
many trackball mice to choose from.&lt;/p&gt;
&lt;h1 id="cup"&gt;Cup&lt;/h1&gt;
&lt;p&gt;You might have also noticed a metal cup in the picture. It’s a &lt;a href="https://www.amazon.com/Real-Deal-Steel-Slim-Stack-Insulated/dp/B07D272N6B?th=1&amp;amp;linkCode=ll1&amp;amp;tag=thdalo00-20&amp;amp;linkId=70ee46719ce3917c8879a105cfe3cd44&amp;amp;language=en_US&amp;amp;ref_=as_li_ss_tl"&gt;Real Deal Steel
cup&lt;/a&gt;.
I love this cup because it has vacuum insulation that can keep ice water cold
for hours. And because It’s metal, it won’t shatter if it drops to the
ground. That hasn’t happened yet, but it’s a risk with my Peloton setup.&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/my-peloton-desk-setup</guid><pubDate>Mon, 25 Mar 2024 00:00:00 GMT</pubDate></item><item><title>How I Do Code Review</title><link>https://www.dannyguo.com/blog/how-i-do-code-review</link><description>&lt;article&gt;
        &lt;h1&gt;How I Do Code Review&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2024-03-20"&gt;
                March 20, 2024
            &lt;/time&gt;
             · 
            1,973 words  ·  ~10 minutes to read
            
                        &lt;br&gt;I may earn commissions from purchases made through
                        affiliate links in this post.
                    
        &lt;/div&gt;

        &lt;p&gt;&lt;a href="https://twitter.com/pete_millspaugh"&gt;A coworker&lt;/a&gt; asked me about my approach to
&lt;a href="https://en.wikipedia.org/wiki/Code_review"&gt;code review&lt;/a&gt;, as a reviewer. The
following is my philosophy, which includes many tips and points that I have
observed or learned from other people.&lt;/p&gt;
&lt;h2 id="automation"&gt;Automation&lt;a class="anchor" href="#automation"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Manual code review shouldn’t be our first line of defense. Time is one of our
most valuable resouces, so to the extent that it is practical, we should
automate anything that might come up in code review. &lt;a href="https://en.wikipedia.org/wiki/Continuous_integration"&gt;Continuous
integration&lt;/a&gt; should catch
things like &lt;a href="https://github.com/rishirdua/awesome-code-formatters"&gt;formatting&lt;/a&gt;,
&lt;a href="https://en.wikipedia.org/wiki/Lint_(software)"&gt;lint&lt;/a&gt;, and test errors, allowing
the author to fix issues before requesting a review. And we aren’t limited by
what our tools provide out of the box. We can always write an ad-hoc script or
shell command that verifies something.&lt;/p&gt;
&lt;p&gt;I’m interested to see how &lt;a href="https://en.wikipedia.org/wiki/Generative_artificial_intelligence"&gt;generative
AI&lt;/a&gt; will
affect this aspect of programming. I’ve seen human-based code review services
before, like &lt;a href="https://www.codementor.io/code-review"&gt;Codementor&lt;/a&gt; and
&lt;a href="https://www.pullrequest.com/"&gt;PullRequest&lt;/a&gt;, but tools like
&lt;a href="https://metabob.com/"&gt;Metabob&lt;/a&gt;, &lt;a href="https://coderabbit.ai/"&gt;CodeRabbit&lt;/a&gt;, and
&lt;a href="https://bito.ai/product/ai-code-review-agent/"&gt;Bito&lt;/a&gt; might push the boundaries
of what we can expect from automated code review. Though we need to be mindful
of pitfalls like the possibility of
&lt;a href="https://en.wikipedia.org/wiki/Hallucination_(artificial_intelligence)"&gt;hallucinations&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="manual-code-review"&gt;Manual Code Review&lt;a class="anchor" href="#manual-code-review"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It’s also worth keeping in mind that we pay a cost by doing code reviews, in
terms of engineering time and increasing how long it can take to ship a change
to production. I think most teams will have a net benefit from doing them, but
consider that &lt;a href="https://www.raycast.com/blog/no-code-reviews-by-default"&gt;Raycast doesn’t require code
reviews&lt;/a&gt;. They leave it
up to the author whether to request a review. I can imagine how that could work
well under the right circumstances. Another approach is to do &lt;a href="https://en.wikipedia.org/wiki/Pair_programming"&gt;pair
programming&lt;/a&gt; and consider that
to be a replacement for code review. Code review is a best practice, but that
doesn’t mean it’s &lt;em&gt;always&lt;/em&gt; good or necessary.&lt;/p&gt;
&lt;h2 id="benefits"&gt;Benefits&lt;a class="anchor" href="#benefits"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So why do we do code review? The main reason is that it gives us a chance to
catch problems, such as bugs, missed edge cases, race conditions, security
vulnerabilities, and potential performance issues. Reviewers can provide a
different perspective than we get from writing the code in the first place.&lt;/p&gt;
&lt;p&gt;Similarly, reviewers can suggest opportunities for improvement. Maybe we can
reduce reptition, or give a function a clearer name, or increase how many edge
cases we cover with unit tests.&lt;/p&gt;
&lt;p&gt;These are the direct benefits, but there are ancillary ones as well.&lt;/p&gt;
&lt;h3 id="share-knowledge"&gt;Share Knowledge&lt;a class="anchor" href="#share-knowledge"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Code review gives the reviewer a chance to share knowledge with the author. For
some problems and opportunities for improvement, the author may be able to come
up with them on their own, especially if they take a second look at the code.
But they may not know about something in the first place. For example, the
author may introduce a &lt;a href="https://en.wikipedia.org/wiki/SQL_injection"&gt;SQL
injection&lt;/a&gt; vulnerability and not
even know what SQL injection is. So the reviewer can teach the author a new
concept through code review.&lt;/p&gt;
&lt;p&gt;This is especially the case when a senior engineer reviews code that a more
junior engineer writes. But sharing knowledge goes both ways, regardless of any
experience gap. Reviewing code can also teach the reviewer something. I have
learned plenty of things from doing code review.&lt;/p&gt;
&lt;h3 id="stay-close-to-the-code"&gt;Stay Close to the Code&lt;a class="anchor" href="#stay-close-to-the-code"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For engineering managers, code review can be a way to stay close to the code.
Some engineers &lt;a href="https://leaddev.com/skills-new-managers/should-engineering-managers-write-code"&gt;write little if any
code&lt;/a&gt;
after switching to management. Over time, this can cause them to fall out of
touch with how things really work. Code review is one way to mitigate that
atrophy.&lt;/p&gt;
&lt;h3 id="notice-patterns"&gt;Notice Patterns&lt;a class="anchor" href="#notice-patterns"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Over time, a reviewer can notice patterns from doing multiple code reviews.
Perhaps different people are making the same mistake or are implementing the
same thing in different places. This gives the reviewer a chance to have a
productive discussion with the team.&lt;/p&gt;
&lt;h2 id="tactics"&gt;Tactics&lt;a class="anchor" href="#tactics"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even though the benefits are almost impossible to quantify, code review usually
feels worthwhile to me. I appreciate receiving thorough reviews, and I try to
make my reviews useful in turn. But how should we approach code review? Beyond
the core act of leaving comments, I have some tactical suggestions.&lt;/p&gt;
&lt;h3 id="prioritization"&gt;Prioritization&lt;a class="anchor" href="#prioritization"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Once someone (or an automated process) has requested my review, I try to
prioritize it because I want to unblock others as quickly as possible. I use
&lt;a href="https://www.google.com/script/start/"&gt;Google Apps Script&lt;/a&gt; to triage my Gmail
inbox, and I’ve configured it to treat code review requests as high-priority
emails.&lt;/p&gt;
&lt;p&gt;I like to peek at the pull request (PR) or merge request immediately. If I think
I can review it in a few minutes, I’ll try to knock it out in the moment,
channeling &lt;a href="https://gettingthingsdone.com/2020/05/the-two-minute-rule-2/"&gt;David Allen’s two-minute
rule&lt;/a&gt;. Ideally, I
can approve it without much thought and let the author merge it without waiting.
These PRs are usually small and easily understandable.&lt;/p&gt;
&lt;p&gt;If I think the review will take longer, I’ll prioritize it against my existing
queue of work, but I’ll still try to take care of it quickly. If I think it’ll
take longer than a day, I’ll comment or message the author that I’m aware
of the review request, but I need more time for it. So that the author knows the
request hasn’t gone into a black hole.&lt;/p&gt;
&lt;p&gt;Code review turnaround time is important to me for two main reasons. The first
is that I know from personal experience that waiting for a code review isn’t
fun. It can force an expensive context switch to another task or project. And it
impacts the overall feeling and reality of being able to move quickly. See &lt;a href="https://twitter.com/jlongster/status/1400511441556459523"&gt;this
tweet&lt;/a&gt; by &lt;a href="https://jlongster.com/"&gt;James
Long&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One of the biggest cultural shifts in my experience from Mozilla to Stripe is
code review speed. At Mozilla you’d often wait days and have to hunt down
people to review PRs.&lt;/p&gt;
&lt;p&gt;At Stripe my PR is often reviewed within 10 minutes.&lt;/p&gt;
&lt;p&gt;That makes a &lt;em&gt;huge&lt;/em&gt; difference for shipping fast&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The other, related reason is that at a business/organizational level, at least
for most of the code reviews that I do, the review is the last significant
blocker to getting a change merged so that it can produce value for customers,
the organization, etc.&lt;/p&gt;
&lt;p&gt;Consider all the possible work leading up to releasing a change, such as doing
market research, coming up with the product specification, making the design,
implementing the change, and testing it. All that work doesn’t produce real
value until the change is merged and in production. The faster I can do the
review, the faster we can start reaping value.&lt;/p&gt;
&lt;h3 id="mindset"&gt;Mindset&lt;a class="anchor" href="#mindset"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When I start a code review, I try to have an optimistic mindset of wanting to
get to an approval. My attitude should be to help the author, not to be an
overbearing gatekeeper. While I do want PRs (my own included) to be as good as
they can be, my standard for approval isn’t perfection. Instead, the main
question I ask myself is: “are we better off merging this PR than not?”&lt;/p&gt;
&lt;h3 id="understand-the-context"&gt;Understand the Context&lt;a class="anchor" href="#understand-the-context"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Before diving into the code, I want to understand the context for the change so
that I’m not reviewing in a vacuum. Context can come from a linked ticket, the
PR description, a &lt;a href="https://slack.com/"&gt;Slack&lt;/a&gt; thread, etc., and I’ll ask for
additional context when necessary. Even when the context is well-documented
already, I’ll sometimes ask for the author to make it an inline comment in the
code so that it doesn’t get lost for future people.&lt;/p&gt;
&lt;h3 id="consider-emotions"&gt;Consider Emotions&lt;a class="anchor" href="#consider-emotions"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Code review is another form of giving feedback, which can be hard (I recommend
reading &lt;a href="https://www.amazon.com/Radical-Candor-Revised-Kick-Ass-Humanity/dp/1250235375?_encoding=UTF8&amp;amp;qid=&amp;amp;sr=&amp;amp;linkCode=ll1&amp;amp;tag=thdalo00-20&amp;amp;linkId=5eba91267b4ed43d5265f590dd0d637b&amp;amp;language=en_US&amp;amp;ref_=as_li_ss_tl"&gt;Radical
Candor&lt;/a&gt;
for advice on that). I try to consider the author’s emotions and the fact that
nobody delivers their best possible work 100% of the time. I want to address
issues directly, without suggesting that they reflect something about the
author. If I say that a bit of code is stupid, the author could interpret that
to mean that I think &lt;em&gt;they&lt;/em&gt; are stupid. Instead, I’ll point out the issues with
the code using language that is as objective as possible.&lt;/p&gt;
&lt;p&gt;On a related note, code review doesn’t have to only involve pointing out
negative things. I also like to point out things that are particularly good
about the PR. And I’ll tell the author if they’ve taught me something.&lt;/p&gt;
&lt;h3 id="nitpicks"&gt;Nitpicks&lt;a class="anchor" href="#nitpicks"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I note which of my comments are merely nitpicks rather than actual blockers. I
don’t expect the author to accept every suggestion. This gives the author the
freedom to choose whether or not to make the change. But by labeling nitpicks, I
don’t feel guilty about bringing up things that are relatively trivial.&lt;/p&gt;
&lt;h3 id="defer-to-the-author"&gt;Defer to the Author&lt;a class="anchor" href="#defer-to-the-author"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Similarly, I sometimes have comments that are bigger than nitpicks, but I don’t
feel that strongly about them, or there’s no clear “right” position, and it’s
very much a matter of opinion. In these cases, I’ll explain my thinking, but
I’ll leave it up to the author. Sometimes the issue warrants a team discussion.
But in general, I defer to the author since they are the one who is responsible
for the change. I want them to feel like they truly own it.&lt;/p&gt;
&lt;h3 id="approve-despite-questions"&gt;Approve Despite Questions&lt;a class="anchor" href="#approve-despite-questions"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Sometimes I’ll have questions that could turn into blockers. If I don’t have any
blocking comments otherwise, I’ll go ahead and approve the pull request, but
I’ll say that my approval depends on the answers to my questions. This way, if
the answers are in our favor, the author can answer them but also merge without
having to wait for me to read the answers and approve.&lt;/p&gt;
&lt;p&gt;So the process can go from:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The author opens a PR and requests my review&lt;/li&gt;
&lt;li&gt;I ask questions&lt;/li&gt;
&lt;li&gt;The author answers and re-requests my review&lt;/li&gt;
&lt;li&gt;I approve&lt;/li&gt;
&lt;li&gt;The author merges&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The author opens a PR and requests my review&lt;/li&gt;
&lt;li&gt;I ask questions but go ahead and approve with a comment explaining how my
approval is dependent on the answers&lt;/li&gt;
&lt;li&gt;The author answers the questions and merges&lt;/li&gt;
&lt;li&gt;I can read the answers asynchronously&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Which removes an entire review cycle from the author’s perspective.&lt;/p&gt;
&lt;h3 id="get-second-opinions"&gt;Get Second Opinions&lt;a class="anchor" href="#get-second-opinions"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I request second opinions as necessary. I may not be familiar enough with the
code or context to do a good enough review on my own. Sometimes I’ll ask for
another complete review. Other times, I’ll ask a specific question to the other
reviewer.&lt;/p&gt;
&lt;h3 id="consider-more-than-just-code"&gt;Consider More Than Just Code&lt;a class="anchor" href="#consider-more-than-just-code"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I don’t think a code review should be limited to just the code. I also look for
succinct but descriptive pull request titles (and commit messages if we’re not
squash merging). And I’ll comment if linked tickets and pull request
descriptions aren’t detailed enough.&lt;/p&gt;
&lt;p&gt;I also want to consider questions that aren’t directly related to what the code
does and the quality of the code. Does the change introduce technical debt
that’s going to hurt us in the long term? Are the right people aware of the
change? What is the rollout plan? Did we miss something during the planning
phase that could change our entire approach? And so on.&lt;/p&gt;
&lt;h3 id="suggest-addressing-in-a-follow-up-pr"&gt;Suggest Addressing in a Follow-up PR&lt;a class="anchor" href="#suggest-addressing-in-a-follow-up-pr"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Some changes require more than one PR. If you know there is going to be at least
one more PR that is related to the one you are reviewing, consider suggesting
that the author address a particular problem in a follow-up PR, allowing them to
merge the current PR immediately.&lt;/p&gt;
&lt;h3 id="consider-urgency"&gt;Consider Urgency&lt;a class="anchor" href="#consider-urgency"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Code review depends on the urgency of the change. I’m not always going to do the
most thorough review possible. If something needs to go out quickly, especially
in an emergency, I may just glance through the code. Or I may give a rubber
stamp and then do a more thorough review after the code is merged.&lt;/p&gt;
&lt;h3 id="loosen-standards"&gt;Loosen Standards&lt;a class="anchor" href="#loosen-standards"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Similar to urgency, also consider how important the code is. Not all code in a
codebase is of equal importance. For example, if I’m reviewing a one-off script
that we don’t expect to run again in the future or to have to maintain, I loosen
my standards. Though I will leave a comment acknowledging that judgment call.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;a class="anchor" href="#conclusion"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Code review goes deeper than just checking a pull request for mistakes. It’s an
important aspect of doing software engineering as a team and is one of the ways
that learning computer science in school can be different from “real world”
programming. Code review is another skill, another thing that we can improve at
to benefit our teams.&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/how-i-do-code-review</guid><pubDate>Wed, 20 Mar 2024 00:00:00 GMT</pubDate></item><item><title>A Code Review of My Earliest Projects</title><link>https://www.dannyguo.com/blog/a-code-review-of-my-earliest-projects</link><description>&lt;article&gt;
        &lt;h1&gt;A Code Review of My Earliest Projects&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2024-03-14"&gt;
                March 14, 2024
            &lt;/time&gt;
             · 
            3,082 words  ·  ~16 minutes to read
            
        &lt;/div&gt;

        &lt;p&gt;While I was cleaning my personal files, I found my earliest programming
projects, which are over a decade old. I decided to do a code review for fun. Do
you know that feeling of reading code that’s only vaguely familiar, being mildly
horrified, and then realizing that you were in fact the one who wrote it? Yeah,
I got that a lot while looking at this code. Here are the highlights from three
projects: forex trading, The Daily Lore, and MovieSeer.&lt;/p&gt;
&lt;h2 id="forex-trading"&gt;Forex Trading&lt;a class="anchor" href="#forex-trading"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Exhibit A is from my freshman year of college. My first experience with
programming was an &lt;a href="https://www.cs.princeton.edu/courses/archive/spring10/cos126/info.html"&gt;introductory computer science
class&lt;/a&gt;.
A few months later, armed with a B grade knowledge of variables, loops,
functions, and classes, I dove into my first side project by writing &lt;a href="https://en.wikipedia.org/wiki/Foreign_exchange_market"&gt;foreign
exchange&lt;/a&gt; (forex) trading
programs. The full story of my brief stint as an amateur currency trader is
&lt;a href="https://www.dannyguo.com/blog/forex-trading-for-fun-and-luckily-profit"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’ve published most of the code to
&lt;a href="https://github.com/dguo/forex-trading"&gt;GitHub&lt;/a&gt;. I left it as intact as possible
and resisted the urge to clean anything up. It’s written in &lt;a href="https://docs.mql4.com/"&gt;MetaQuotes Language
4&lt;/a&gt; (MQL4), which has syntax similar to C++, as well as
built-in functions for trading, such as
&lt;a href="https://docs.mql4.com/trading/ordersend"&gt;OrderSend&lt;/a&gt; and
&lt;a href="https://docs.mql4.com/trading/orderclose"&gt;OrderClose&lt;/a&gt;. Here is the function
that I wrote to place an order.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;PlaceOrder&lt;/span&gt;&lt;span&gt;(string &lt;/span&gt;&lt;span&gt;pairToTrade&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;double&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;sizeOfTrade&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  string pair &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; pairToTrade;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;double&lt;/span&gt;&lt;span&gt; lots &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;NormalizeDouble&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;MathAbs&lt;/span&gt;&lt;span&gt;(sizeOfTrade), &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;bool&lt;/span&gt;&lt;span&gt; goLong &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;FirstGreater&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0.00&lt;/span&gt;&lt;span&gt;, sizeOfTrade)) goLong &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;double&lt;/span&gt;&lt;span&gt; bidPrice &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;MarketInfo&lt;/span&gt;&lt;span&gt;(pair, MODE_BID);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;double&lt;/span&gt;&lt;span&gt; askPrice &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;MarketInfo&lt;/span&gt;&lt;span&gt;(pair, MODE_ASK);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;// place the order if the lot size is below the maximum&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;FirstGreater&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;100.00&lt;/span&gt;&lt;span&gt;, lots)) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (goLong) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;OrderSend&lt;/span&gt;&lt;span&gt;(pair, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, lots, askPrice, &lt;/span&gt;&lt;span&gt;20000&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, Green);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;OrderSend&lt;/span&gt;&lt;span&gt;(pair, &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;, lots, bidPrice, &lt;/span&gt;&lt;span&gt;20000&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, Green);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;// otherwise, split it up into as many orders as needed&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;FirstGreater&lt;/span&gt;&lt;span&gt;(lots, &lt;/span&gt;&lt;span&gt;100.00&lt;/span&gt;&lt;span&gt;)) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (goLong) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;OrderSend&lt;/span&gt;&lt;span&gt;(pair, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;100.00&lt;/span&gt;&lt;span&gt;, askPrice, &lt;/span&gt;&lt;span&gt;20000&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, Green);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;OrderSend&lt;/span&gt;&lt;span&gt;(pair, &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;100.00&lt;/span&gt;&lt;span&gt;, bidPrice, &lt;/span&gt;&lt;span&gt;20000&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, Green);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      lots &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;NormalizeDouble&lt;/span&gt;&lt;span&gt;(lots &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;100.00&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (goLong) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;OrderSend&lt;/span&gt;&lt;span&gt;(pair, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, lots, askPrice, &lt;/span&gt;&lt;span&gt;20000&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, Green);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;OrderSend&lt;/span&gt;&lt;span&gt;(pair, &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;, lots, bidPrice, &lt;/span&gt;&lt;span&gt;20000&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;NULL&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, Green);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="persisting-data"&gt;Persisting Data&lt;a class="anchor" href="#persisting-data"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In school, the only way that I had learned to persist data was to use text
files, so that’s what I did. I wrote and read CSV files, which served as my
database.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; handle &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;FileOpen&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Symbol&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;".csv"&lt;/span&gt;&lt;span&gt;, FILE_CSV&lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt;FILE_READ, &lt;/span&gt;&lt;span&gt;","&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;FileReadString&lt;/span&gt;&lt;span&gt;(handle);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;FileReadString&lt;/span&gt;&lt;span&gt;(handle);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;FileReadString&lt;/span&gt;&lt;span&gt;(handle);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;roundZeroMargin &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;StrToDouble&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;FileReadString&lt;/span&gt;&lt;span&gt;(handle));&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;FileReadString&lt;/span&gt;&lt;span&gt;(handle);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;roundOneMargin &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;StrToDouble&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;FileReadString&lt;/span&gt;&lt;span&gt;(handle));&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;FileReadString&lt;/span&gt;&lt;span&gt;(handle);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;roundTwoMargin &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;StrToDouble&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;FileReadString&lt;/span&gt;&lt;span&gt;(handle));&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;FileReadString&lt;/span&gt;&lt;span&gt;(handle);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;roundThreeMargin &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;StrToDouble&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;FileReadString&lt;/span&gt;&lt;span&gt;(handle));&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;FileReadString&lt;/span&gt;&lt;span&gt;(handle);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;roundFourMargin &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;StrToDouble&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;FileReadString&lt;/span&gt;&lt;span&gt;(handle));&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;FileReadString&lt;/span&gt;&lt;span&gt;(handle);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;currentStreak &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;StrToInteger&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;FileReadString&lt;/span&gt;&lt;span&gt;(handle));&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;FileReadString&lt;/span&gt;&lt;span&gt;(handle);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;lockDirection &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;StrToInteger&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;FileReadString&lt;/span&gt;&lt;span&gt;(handle));&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;FileReadString&lt;/span&gt;&lt;span&gt;(handle);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;lockPrice &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;StrToDouble&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;FileReadString&lt;/span&gt;&lt;span&gt;(handle));&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;FileReadString&lt;/span&gt;&lt;span&gt;(handle);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;inMotion &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;StrToInteger&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;FileReadString&lt;/span&gt;&lt;span&gt;(handle));&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;FileClose&lt;/span&gt;&lt;span&gt;(handle);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It worked well enough, but if I were to do it over, I’d probably use
&lt;a href="https://www.sqlite.org"&gt;SQLite&lt;/a&gt;, which is &lt;a href="https://www.sqlite.org/whentouse.html"&gt;designed to compete with
fopen()&lt;/a&gt; and would make it easier to
maintain a history of data as well as to easily query that data.&lt;/p&gt;
&lt;h3 id="doublesequal"&gt;DoublesEqual&lt;a class="anchor" href="#doublesequal"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I found &lt;a href="https://github.com/dguo/forex-trading/blob/b90bb61b25b8ce4496d382609ddd6a428a1ffcfc/PairUpdater/PairUpdater.mq4#L193"&gt;this
function&lt;/a&gt;
in &lt;code&gt;PairUpdater/PairUpdater.mq4&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;//+------------------------------------------------------------------+&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;//| function to check if two doubles are equal                       |&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;//+------------------------------------------------------------------+&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;bool&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;DoublesEqual&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;double&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;number1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;double&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;number2&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;//----&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;NormalizeDouble&lt;/span&gt;&lt;span&gt;(number1 &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; number2, &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;//----&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;//+------------------------------------------------------------------+&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I had unnecessary &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; conditionals. I could have directly returned
the result of &lt;code&gt;NormalizeDouble(number1 - number2, 4) == 0&lt;/code&gt; instead.&lt;/p&gt;
&lt;p&gt;Also note the useless comment that doesn’t tell you anything more than the
function signature. I found many more cases of bad comments, like &lt;a href="https://github.com/dguo/forex-trading/blob/b90bb61b25b8ce4496d382609ddd6a428a1ffcfc/Reversion/RecordUpdater.java#L98"&gt;this
one&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;// print out success line&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;System.out.&lt;/span&gt;&lt;span&gt;println&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"Success"&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nowadays, I try to write comments that add meaningful details and context,
instead of just repeating what the code plainly says.&lt;/p&gt;
&lt;h3 id="repetition"&gt;Repetition&lt;a class="anchor" href="#repetition"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I was apparently &lt;em&gt;very&lt;/em&gt; tolerant of repetition. &lt;code&gt;Averager/Averager.java&lt;/code&gt; has
&lt;a href="https://github.com/dguo/forex-trading/blob/b90bb61b25b8ce4496d382609ddd6a428a1ffcfc/Averager/Averager.java#L123"&gt;this
monstrosity&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;DoublesEqual&lt;/span&gt;&lt;span&gt;(total, &lt;/span&gt;&lt;span&gt;1000.0&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;) firstHalf[d] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; firstHalf[d] &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1000.0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;DoublesEqual&lt;/span&gt;&lt;span&gt;(total, &lt;/span&gt;&lt;span&gt;2000.0&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;11&lt;/span&gt;&lt;span&gt;)) firstHalf[d] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; firstHalf[d] &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1000.0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;DoublesEqual&lt;/span&gt;&lt;span&gt;(total, &lt;/span&gt;&lt;span&gt;3000.0&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;13&lt;/span&gt;&lt;span&gt;)) firstHalf[d] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; firstHalf[d] &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1000.0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;DoublesEqual&lt;/span&gt;&lt;span&gt;(total, &lt;/span&gt;&lt;span&gt;4000.0&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt;)) firstHalf[d] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; firstHalf[d] &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1000.0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;DoublesEqual&lt;/span&gt;&lt;span&gt;(total, &lt;/span&gt;&lt;span&gt;5000.0&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;23&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;11&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt;)) firstHalf[d] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; firstHalf[d] &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1000.0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;DoublesEqual&lt;/span&gt;&lt;span&gt;(total, &lt;/span&gt;&lt;span&gt;6000.0&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;22&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;13&lt;/span&gt;&lt;span&gt;)) firstHalf[d] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; firstHalf[d] &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1000.0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;DoublesEqual&lt;/span&gt;&lt;span&gt;(total, &lt;/span&gt;&lt;span&gt;7000.0&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;22&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;13&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;16&lt;/span&gt;&lt;span&gt;)) firstHalf[d] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; firstHalf[d] &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1000.0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;DoublesEqual&lt;/span&gt;&lt;span&gt;(total, &lt;/span&gt;&lt;span&gt;8000.0&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;22&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;12&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;18&lt;/span&gt;&lt;span&gt;)) firstHalf[d] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; firstHalf[d] &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1000.0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;DoublesEqual&lt;/span&gt;&lt;span&gt;(total, &lt;/span&gt;&lt;span&gt;9000.0&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;22&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;13&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;16&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;18&lt;/span&gt;&lt;span&gt;)) firstHalf[d] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; firstHalf[d] &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1000.0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;DoublesEqual&lt;/span&gt;&lt;span&gt;(total, &lt;/span&gt;&lt;span&gt;10000.0&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;21&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;12&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;14&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;16&lt;/span&gt;&lt;span&gt;)) firstHalf[d] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; firstHalf[d] &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1000.0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;DoublesEqual&lt;/span&gt;&lt;span&gt;(total, &lt;/span&gt;&lt;span&gt;11000.0&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;21&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;23&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;11&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;13&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;17&lt;/span&gt;&lt;span&gt;)) firstHalf[d] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; firstHalf[d] &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1000.0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;DoublesEqual&lt;/span&gt;&lt;span&gt;(total, &lt;/span&gt;&lt;span&gt;12000.0&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;21&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;22&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;11&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;13&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;17&lt;/span&gt;&lt;span&gt;)) firstHalf[d] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; firstHalf[d] &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1000.0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;DoublesEqual&lt;/span&gt;&lt;span&gt;(total, &lt;/span&gt;&lt;span&gt;13000.0&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;21&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;22&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;12&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;14&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;16&lt;/span&gt;&lt;span&gt;)) firstHalf[d] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; firstHalf[d] &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1000.0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;DoublesEqual&lt;/span&gt;&lt;span&gt;(total, &lt;/span&gt;&lt;span&gt;14000.0&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;21&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;22&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;12&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;14&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;16&lt;/span&gt;&lt;span&gt;)) firstHalf[d] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; firstHalf[d] &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1000.0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;DoublesEqual&lt;/span&gt;&lt;span&gt;(total, &lt;/span&gt;&lt;span&gt;15000.0&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;21&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;22&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;12&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;13&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;16&lt;/span&gt;&lt;span&gt;)) firstHalf[d] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; firstHalf[d] &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1000.0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;DoublesEqual&lt;/span&gt;&lt;span&gt;(total, &lt;/span&gt;&lt;span&gt;16000.0&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;21&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;22&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;11&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;12&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;14&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;16&lt;/span&gt;&lt;span&gt;)) firstHalf[d] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; firstHalf[d] &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1000.0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;DoublesEqual&lt;/span&gt;&lt;span&gt;(total, &lt;/span&gt;&lt;span&gt;17000.0&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;21&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;22&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;11&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;13&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;14&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;16&lt;/span&gt;&lt;span&gt;)) firstHalf[d] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; firstHalf[d] &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1000.0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;DoublesEqual&lt;/span&gt;&lt;span&gt;(total, &lt;/span&gt;&lt;span&gt;18000.0&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;21&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;22&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;11&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;12&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;13&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;16&lt;/span&gt;&lt;span&gt;)) firstHalf[d] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; firstHalf[d] &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1000.0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;DoublesEqual&lt;/span&gt;&lt;span&gt;(total, &lt;/span&gt;&lt;span&gt;19000.0&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;21&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;22&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;11&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;12&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;13&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;14&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;16&lt;/span&gt;&lt;span&gt;)) firstHalf[d] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; firstHalf[d] &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1000.0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;DoublesEqual&lt;/span&gt;&lt;span&gt;(total, &lt;/span&gt;&lt;span&gt;20000.0&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;21&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;22&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;11&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;12&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;13&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;14&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;16&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;17&lt;/span&gt;&lt;span&gt;)) firstHalf[d] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; firstHalf[d] &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1000.0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;DoublesEqual&lt;/span&gt;&lt;span&gt;(total, &lt;/span&gt;&lt;span&gt;21000.0&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;21&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;22&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;11&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;12&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;13&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;14&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;16&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;17&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;18&lt;/span&gt;&lt;span&gt;)) firstHalf[d] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; firstHalf[d] &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1000.0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;DoublesEqual&lt;/span&gt;&lt;span&gt;(total, &lt;/span&gt;&lt;span&gt;22000.0&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;21&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;22&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;23&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;11&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;12&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;13&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;14&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;16&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;17&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;18&lt;/span&gt;&lt;span&gt;)) firstHalf[d] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; firstHalf[d] &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1000.0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;DoublesEqual&lt;/span&gt;&lt;span&gt;(total, &lt;/span&gt;&lt;span&gt;23000.0&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;20&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;21&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;22&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;23&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;11&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;12&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;13&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;14&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;15&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;16&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;17&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Hour&lt;/span&gt;&lt;span&gt;() &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;18&lt;/span&gt;&lt;span&gt;)) firstHalf[d] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; firstHalf[d] &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;1000.0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And check out this code from &lt;code&gt;MeanReversion/tests/Optimizer.java&lt;/code&gt;, complete with
a variable name of &lt;code&gt;wtf&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; aa &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;; aa &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt; width; aa&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;//  for (int bb = aa + 1; bb &amp;lt; width; bb++) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;//   for (int cc = bb + 1; cc &amp;lt; width; cc++) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;//  for (int dd = cc + 1; dd &amp;lt; width; dd++) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;         &lt;/span&gt;&lt;span&gt;//   for (int ee = dd + 1; ee &amp;lt; width; ee++) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;              &lt;/span&gt;&lt;span&gt;//for (int ff = ee + 1; ff &amp;lt; width; ff++) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;               &lt;/span&gt;&lt;span&gt;// for (int gg = ff + 1; gg &amp;lt; width; gg++) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                  &lt;/span&gt;&lt;span&gt;//for (int hh = gg + 1; hh &amp;lt; width; hh++) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                 &lt;/span&gt;&lt;span&gt;//   for (int ii = hh + 1; ii &amp;lt; width; ii++) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                      &lt;/span&gt;&lt;span&gt;//    for (int jj = ii + 1; jj &amp;lt; width; jj++) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                      &lt;/span&gt;&lt;span&gt;//  for (int kk = jj + 1; kk &amp;lt; width; kk++) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                      &lt;/span&gt;&lt;span&gt;//  for (int ll = kk + 1; ll &amp;lt; width; ll++) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                      &lt;/span&gt;&lt;span&gt;//   for (int mm = ll + 1; mm &amp;lt; width; mm++) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                      &lt;/span&gt;&lt;span&gt;// for (int nn = mm + 1; nn &amp;lt; width; nn++) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                      &lt;/span&gt;&lt;span&gt;//   for (int oo = nn + 1; oo &amp;lt; width; oo++) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                      &lt;/span&gt;&lt;span&gt;//    for (int pp = oo + 1; pp &amp;lt; width; pp++) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                      &lt;/span&gt;&lt;span&gt;//      for (int qq = pp + 1; qq &amp;lt; width; qq++) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                      &lt;/span&gt;&lt;span&gt;//         for (int rr = qq + 1; rr &amp;lt; width; rr++) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                      &lt;/span&gt;&lt;span&gt;//     for (int ss = rr + 1; ss &amp;lt; width; ss++) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                      &lt;/span&gt;&lt;span&gt;//     for (int tt = ss + 1; tt &amp;lt; width; tt++) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                      &lt;/span&gt;&lt;span&gt;//  for (int uu = tt + 1; uu &amp;lt; width; uu++) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                      &lt;/span&gt;&lt;span&gt;// for (int vv = uu + 1; vv &amp;lt; width; vv++) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                      &lt;/span&gt;&lt;span&gt;// for (int ww = vv + 1; ww &amp;lt; width; ww++) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                      &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt;[] invalid &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;boolean&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;&lt;span&gt;];&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                      &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;int&lt;/span&gt;&lt;span&gt; wtf &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;; wtf &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt; width; wtf&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                        invalid[wtf] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                       &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (wtf &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; aa &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; wtf &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; aa &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; wtf &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; aa) invalid[wtf] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                  &lt;/span&gt;&lt;span&gt;//      if (wtf == dd || wtf == ee || wtf == ff) invalid[wtf] = false;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                        &lt;/span&gt;&lt;span&gt;//if (wtf == gg || wtf == hh || wtf == ii) invalid[wtf] = false;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                        &lt;/span&gt;&lt;span&gt;//   if (wtf == jj || wtf == kk || wtf == ll) invalid[wtf] = false;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                        &lt;/span&gt;&lt;span&gt;//   if (wtf == mm || wtf == nn || wtf == oo) invalid[wtf] = false;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                        &lt;/span&gt;&lt;span&gt;// if (wtf == pp || wtf == qq || wtf == rr) invalid[wtf] = false;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                        &lt;/span&gt;&lt;span&gt;// if (wtf == ss || wtf == tt || wtf == uu) invalid[wtf] = false;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                        &lt;/span&gt;&lt;span&gt;//   if (wtf == vv || wtf == ww) invalid[wtf] = false;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                      }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="undescriptive-error-messages"&gt;Undescriptive Error Messages&lt;a class="anchor" href="#undescriptive-error-messages"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Speaking of (and you’re probably also thinking) &lt;code&gt;wtf&lt;/code&gt;, I
&lt;a href="https://github.com/dguo/forex-trading/blob/b90bb61b25b8ce4496d382609ddd6a428a1ffcfc/Forex/Other/Test2/Forex.java#L28"&gt;noticed&lt;/a&gt;
in &lt;code&gt;Forex/Other/Test2/Forex.java&lt;/code&gt; that I was okay with undescriptive error
messages.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt;(rawData.&lt;/span&gt;&lt;span&gt;isEmpty&lt;/span&gt;&lt;span&gt;()) System.out.&lt;/span&gt;&lt;span&gt;println&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"wtf"&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Even if I just threw that in for debugging, it only would have taken a couple of
seconds to &lt;a href="https://wix-ux.com/when-life-gives-you-lemons-write-better-error-messages-46c5223e1a2f"&gt;make the message more
meaningful&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="the-daily-lore"&gt;The Daily Lore&lt;a class="anchor" href="#the-daily-lore"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My next side project was a news aggregation website called &lt;a href="https://www.dailylore.com/legacy/"&gt;The Daily
Lore&lt;/a&gt; that showed the headlines from various
websites. I eventually &lt;a href="https://www.dailylore.com/"&gt;remade it&lt;/a&gt;, but I preserved
the original code in &lt;a href="https://github.com/dguo/headlines"&gt;this repo&lt;/a&gt;. I did clean
this repo up a bit before pushing to GitHub because there were some issues that
weren’t just bad code.&lt;/p&gt;
&lt;h3 id="bad-commit-author"&gt;Bad Commit Author&lt;a class="anchor" href="#bad-commit-author"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;My commits had bad email addresses because I evidently didn’t configure Git back
then. They looked like some sort of school network id. I rewrote the author info
using &lt;code&gt;git filter-branch&lt;/code&gt; by following &lt;a href="https://stackoverflow.com/a/750182/1481479"&gt;these
instructions&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="missing-gitignore"&gt;Missing .gitignore&lt;a class="anchor" href="#missing-gitignore"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I also didn’t know about the concept of
&lt;a href="https://git-scm.com/docs/gitignore"&gt;gitignore&lt;/a&gt; back then, so my repo had &lt;code&gt;.pyc&lt;/code&gt;
files, Excel spreadsheets, and even a PDF explaining how SVGs work. I removed
them from the Git history using &lt;a href="https://rtyley.github.io/bfg-repo-cleaner/"&gt;The
BFG&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The worst thing is that I committed secrets, like my AWS secret access key. I
used The BFG to remove them from the Git history as well. That has &lt;a href="https://www.dannyguo.com/blog/I-published-my-aws-secret-key-to-github"&gt;its own
story&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="inconsistent-cases"&gt;Inconsistent Cases&lt;a class="anchor" href="#inconsistent-cases"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I was inconsistent with &lt;a href="https://en.wikipedia.org/wiki/Snake_case"&gt;snake case&lt;/a&gt;
vs. &lt;a href="https://en.wikipedia.org/wiki/Camel_case"&gt;camel case&lt;/a&gt; for naming. Not just
within the same file but even between &lt;a href="https://github.com/dguo/headlines/blob/d6aa64ac88895b786acc7694045e6232bfc3229c/generate_units.js#L57"&gt;back to back
lines&lt;/a&gt;!&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; number_of_rows &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; Math.&lt;/span&gt;&lt;span&gt;ceil&lt;/span&gt;&lt;span&gt;(sources.length &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; currentCategory &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"null"&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Inconsistency hurts readability and is also a sign that
&lt;a href="https://en.wikipedia.org/wiki/Lint_(software)"&gt;linting&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Continuous_integration"&gt;continuous
integration&lt;/a&gt; aren’t set up
for a repo.&lt;/p&gt;
&lt;p&gt;And yes, it is strange that I used the string &lt;code&gt;"null"&lt;/code&gt; instead of an actual
&lt;code&gt;null&lt;/code&gt; value.&lt;/p&gt;
&lt;h3 id="inline-styles"&gt;Inline Styles&lt;a class="anchor" href="#inline-styles"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I used inline styles &lt;a href="https://github.com/dguo/headlines/blob/d6aa64ac88895b786acc7694045e6232bfc3229c/index.html#L106"&gt;in a few
cases&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"container"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"margin-top: -20px;"&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While I think that’s fine for such a simple, one-page website, I had other
styles in a &lt;code&gt;styles.css&lt;/code&gt; file. I might as well have put all the styles in there
so that the styling wasn’t done in two different ways.&lt;/p&gt;
&lt;h2 id="movieseer"&gt;MovieSeer&lt;a class="anchor" href="#movieseer"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Last of all, for a college hackathon, I built a movie recommendation website
called &lt;a href="https://github.com/dguo/movieseer"&gt;MovieSeer&lt;/a&gt;. I used data from the
&lt;a href="https://www.rottentomatoes.com/"&gt;Rotten Tomatoes&lt;/a&gt; API (which now &lt;a href="https://developer.fandango.com/rotten_tomatoes"&gt;requires an
application&lt;/a&gt; to access). The
user could like and dislike movies, and MovieSeer would use those ratings, along
with the Rotten Tomatoes data, to recommend movies. It was a simplistic
&lt;a href="https://en.wikipedia.org/wiki/Recommender_system#Content-based_filtering"&gt;content-based
filtering&lt;/a&gt;
approach.&lt;/p&gt;
&lt;h3 id="leftover-debugging"&gt;Leftover Debugging&lt;a class="anchor" href="#leftover-debugging"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I didn’t need to look at the code to remember my biggest mistake with this
project. At the end of the hackathon, I volunteered to present first. It went
well enough, until I hit the button to generate recommendations..and everything
hung. After an eternity (probably ten seconds in wall clock time), the
recommendations appeared.&lt;/p&gt;
&lt;p&gt;I realized later that I accidentally left a &lt;a href="https://github.com/dguo/movieseer/blob/c15c0aa5c1bba331436773defb863fdb9c17471a/recs.py#L81C17-L81C37"&gt;debugging print
statement&lt;/a&gt;
in, and it ran in nested loops. This is the abridged version.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;get_recs&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; movie &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; movies.find():&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; person &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; movie[&lt;/span&gt;&lt;span&gt;'abridged_cast'&lt;/span&gt;&lt;span&gt;]:&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;print&lt;/span&gt;&lt;span&gt; person[&lt;/span&gt;&lt;span&gt;'name'&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So the server printed each cast member for every movie in the database! And the
worst thing is that I was aware of it. The &lt;a href="https://github.com/dguo/movieseer/commit/506cb05fdfe8cc7faac8ae8c9d170022818905b8"&gt;last commit before my
presentation&lt;/a&gt;
had a message of: “demo version (need to remove print statements)“. Live demos
are always treacherous, but I should have done one more practice run before the
real thing.&lt;/p&gt;
&lt;h3 id="database-connection-on-every-request"&gt;Database Connection on Every Request&lt;a class="anchor" href="#database-connection-on-every-request"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For the same function, I noticed that I created a new database connection with
every recommendation request.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;def&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;get_recs&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;info&lt;/span&gt;&lt;span&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;# connect to Mongo, and open the "movies" table&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    connection &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; Connection()&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    db &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; connection.movies_database&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    movies &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; db.movies&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In addition to removing the useless comment, I could have &lt;a href="https://www.mongodb.com/docs/manual/administration/connection-pool-overview/"&gt;set up a connection
pool&lt;/a&gt;
when the server starts instead of repeatedly creating connections.&lt;/p&gt;
&lt;h3 id="debug-mode"&gt;Debug Mode&lt;a class="anchor" href="#debug-mode"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I always ran the &lt;a href="https://flask.palletsprojects.com/"&gt;Flask&lt;/a&gt; server in &lt;a href="https://flask.palletsprojects.com/en/3.0.x/debugging/"&gt;debug
mode&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; __name__ &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;'__main__'&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    app.debug &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    app.run()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which is a big security concern in production and exposes raw error messages to
the user. I should have made sure to only run the server in debug mode during
development.&lt;/p&gt;
&lt;h3 id="authentication"&gt;Authentication&lt;a class="anchor" href="#authentication"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There was no authentication for
&lt;a href="https://github.com/dguo/movieseer/blob/c15c0aa5c1bba331436773defb863fdb9c17471a/static/js/loadmovies.js#L165"&gt;requests&lt;/a&gt;
from the client to the server.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;restart&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() { $.&lt;/span&gt;&lt;span&gt;post&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'../../process_data'&lt;/span&gt;&lt;span&gt;, info, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &lt;em&gt;was&lt;/em&gt; for a hackathon, so I didn’t bother with creating a system for users,
but I like to think that I would have considered authentication if I did.&lt;/p&gt;
&lt;p&gt;Also, &lt;code&gt;process_data&lt;/code&gt; was a terribly generic name for an endpoint.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;a class="anchor" href="#conclusion"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Looking at my old code made me repeatedly cringe, but it was a good reminder
that I have in fact learned things and grown as a programmer. My mistakes were
glaringly obvious. I hope that in another 10 years, my future self will look
back on what I’m building now with the same feelings.&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/a-code-review-of-my-earliest-projects</guid><pubDate>Thu, 14 Mar 2024 00:00:00 GMT</pubDate></item><item><title>Making Make a README</title><link>https://www.dannyguo.com/blog/making-make-a-readme</link><description>&lt;article&gt;
        &lt;h1&gt;Making Make a README&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2024-03-06"&gt;
                March 6, 2024
            &lt;/time&gt;
             · 
            1,216 words  ·  ~7 minutes to read
            
        &lt;/div&gt;

        &lt;p&gt;My side project with the highest gratification-to-effort ratio is a simple
website called &lt;a href="https://www.makeareadme.com"&gt;Make a README&lt;/a&gt; (the source is &lt;a href="https://github.com/dguo/make-a-readme"&gt;on
GitHub&lt;/a&gt;). I made it in 2017 on a whim. I
was trying to use a third party library that had an anemic README, and it
reminded me of all the other frustrating times I’ve run into inadequate
documentation and wished that &lt;a href="https://stripe.com/docs"&gt;Stripe&lt;/a&gt; could
&lt;a href="https://mintlify.com/blog/stripe-docs"&gt;write&lt;/a&gt; all the software documentation
in the world.&lt;/p&gt;
&lt;p&gt;I thought of &lt;a href="https://keepachangelog.com"&gt;Keep a Changelog&lt;/a&gt; and decided to make
a similar website for READMEs that explains what they are and suggests what to
put in them.&lt;/p&gt;
&lt;h2 id="development"&gt;Development&lt;a class="anchor" href="#development"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I &lt;a href="https://github.com/dguo/make-a-readme/pull/1/files"&gt;started&lt;/a&gt; with a simple
&lt;code&gt;index.html&lt;/code&gt;. I used &lt;a href="https://bulma.io/"&gt;Bulma&lt;/a&gt; for styling and
&lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt; for hosting. I
&lt;a href="https://github.com/dguo/make-a-readme/commit/4673555488b77348a10371622470e03beca4b853"&gt;added&lt;/a&gt;
a &lt;a href="https://en.wikipedia.org/wiki/Markdown"&gt;Markdown&lt;/a&gt; template with a live
preview and some more content over the next few days, and I was done! I posted
the website to a couple of subreddits, it got a few thousand hits, the traffic
died down, and I mostly forgot about the project.&lt;/p&gt;
&lt;p&gt;But a year later, I noticed in Google Analytics that traffic was consistently
increasing. Google Search had started highly ranking the website for queries
like “readme” and “readme template”. Today, Google still drives the vast
majority of traffic. Here are the top ten queries for the past month:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/JLUu8bj.jpg" alt="Google Search queries"&gt;&lt;/p&gt;
&lt;p&gt;I’ve tweaked the content over the years, but the website is largely the same as
it started. I did
&lt;a href="https://github.com/dguo/make-a-readme/commit/090671b329ec998965f8fc9cc898a9c9c4386ab0"&gt;migrate&lt;/a&gt;
the styling to &lt;a href="https://tailwindui.com/"&gt;Tailwind&lt;/a&gt;, and I
&lt;a href="https://github.com/dguo/make-a-readme/commit/58acff6f9335c86d12d037c347c9d4958ce0de26"&gt;started&lt;/a&gt;
using &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt; in preparation for some future
enhancements if I ever carve out the time to do them.&lt;/p&gt;
&lt;p&gt;For analytics, I started using &lt;a href="https://plausible.io"&gt;Plausible&lt;/a&gt; after Google
&lt;a href="https://blog.google/products/ads-commerce/upgrade-to-google-analytics-4-before-july-1/"&gt;shut down Universal
Analytics&lt;/a&gt;
with &lt;a href="https://webmasters.stackexchange.com/a/135975/93213"&gt;no way&lt;/a&gt; to migrate
historical data into Google Analytics 4, which made it a particularly good time
to find something new. One reason I picked Plausible is that it allows me to
make the analytics for a website
public, which I &lt;a href="https://plausible.io/makeareadme.com/"&gt;did for Make a README&lt;/a&gt;.
As anyone can see, the website has had about two million visitors all time.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/fDVtnRq.jpg" alt="Plausible screenshot"&gt;&lt;/p&gt;
&lt;h2 id="editable-template"&gt;Editable Template&lt;a class="anchor" href="#editable-template"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The only aspect of the website that isn’t just text is the editable README
template in Markdown. For the editor, I use
&lt;a href="https://github.com/Andarist/react-textarea-autosize"&gt;react-textarea-autosize&lt;/a&gt;,
which provides a
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea"&gt;textarea&lt;/a&gt;
that automatically resizes based on the content.&lt;/p&gt;
&lt;p&gt;For the renderer, I use
&lt;a href="https://github.com/remarkjs/react-markdown"&gt;react-markdown&lt;/a&gt; in conjunction
with &lt;a href="https://github.com/sindresorhus/github-markdown-css"&gt;github-markdown-css&lt;/a&gt;
to make the output have GitHub’s Markdown styling.&lt;/p&gt;
&lt;p&gt;I also pass in a custom renderer for &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/code"&gt;code
elements&lt;/a&gt; in
order to use
&lt;a href="https://github.com/react-syntax-highlighter/react-syntax-highlighter"&gt;react-syntax-highlighter&lt;/a&gt;
for syntax highlighting. It was a little tricky to figure out how to set this
up with Next.js and &lt;a href="https://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt; because I
wanted to use the async version of &lt;code&gt;react-syntax-highlighter&lt;/code&gt;. The end result
is that the renderer can do syntax highlighting for most languages, but the
syntax file for a particular language will only be downloaded if the visitor
actually chooses the language.&lt;/p&gt;
&lt;p&gt;In this video, you can see that when I change the code block’s language from
&lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt; to &lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt;, I get
a &lt;code&gt;react-syntax-highlighter&lt;/code&gt; file that’s just for Rust. I do also get a file
for &lt;a href="https://en.wikipedia.org/wiki/R_(programming_language)"&gt;R&lt;/a&gt;, since that’s a
valid language.&lt;/p&gt;
&lt;video&gt;
    &lt;source src="https://i.imgur.com/4aIjsYb.mp4" type="video/mp4"&gt;
    &lt;p&gt;Your browser doesn't support this embedded video.&lt;/p&gt;
&lt;/source&gt;&lt;/video&gt;
&lt;p&gt;Most visitors will probably never get to the point of using a different
language, so I’m happy to have avoided making them download unnecessary code.&lt;/p&gt;
&lt;h2 id="monetization"&gt;Monetization&lt;a class="anchor" href="#monetization"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The website costs me virtually nothing to run, considering it’s a static
website. I’m on Netlify’s &lt;a href="https://www.netlify.com/pricing/"&gt;free starter
plan&lt;/a&gt;, which includes 100 GB of bandwidth
every month, and Make a README only uses about 7 GB a month. So apart from the
domain name, there aren’t any operating costs.&lt;/p&gt;
&lt;p&gt;But traffic was high enough that I wanted to use the website as an opportunity
to experiment with monetization, even as just a learning experience. I added
developer-focused ads with &lt;a href="https://www.carbonads.net/"&gt;Carbon&lt;/a&gt;. I was okay with
doing it because Carbon only adds a single display ad that has a decent chance
of being relevant to the intended audience. Plus I never minded Carbon ads on
other websites. I made a total of $153.36 from Carbon over about five months
(about $30.67 per month).&lt;/p&gt;
&lt;p&gt;Then I moved to the now defunct
&lt;a href="https://github.com/gitcoinco/code_fund_ads"&gt;CodeFund&lt;/a&gt; platform, which had
higher payouts in my testing, didn’t use cookies, and was open source. I made a
total of $443.73 from CodeFund over about 11 months (about $40.33 per month).&lt;/p&gt;
&lt;p&gt;After CodeFund shut down, I eventually switched to
&lt;a href="https://www.ethicalads.io/"&gt;EthicalAds&lt;/a&gt;, which is a part of &lt;a href="https://readthedocs.com/"&gt;Read the
Docs&lt;/a&gt;, also doesn’t use cookies, and is also &lt;a href="https://github.com/readthedocs/ethical-ad-server/"&gt;open
source&lt;/a&gt;. I made a total of
$442.27 from EthicalAds for over 200,000 views over the course of a year (about
$36.86 per month). That’s about $2 in revenue per thousand views.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/FGukMy1.jpg" alt="EthicalAds dashboard"&gt;&lt;/p&gt;
&lt;p&gt;There was also a two year period where I &lt;a href="https://github.com/dguo/make-a-readme/pull/31/files"&gt;uninstalled
ads&lt;/a&gt; because
&lt;a href="https://readme.com/"&gt;ReadMe&lt;/a&gt; (documentation as a service) sponsored the
website. I have &lt;a href="https://news.ycombinator.com/"&gt;Hacker News&lt;/a&gt; to thank for that.
I saw &lt;a href="https://news.ycombinator.com/item?id=23438930"&gt;a post&lt;/a&gt; asking about side
projects that are making money. I
&lt;a href="https://news.ycombinator.com/item?id=23443428"&gt;commented&lt;/a&gt; about Make a README
and got a reply from &lt;a href="https://gkoberger.com/"&gt;Gregory Koberger&lt;/a&gt;, the founder of
ReadMe:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ah, my SEO nemesis!&lt;/p&gt;
&lt;p&gt;Really, though, your site is awesome. I just emailed you about sponsoring it,
if you’re interested :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I laughed out loud when I read that because I had noticed that Make a README
would sometimes show up in search results ahead of ReadMe, so I could guess who
the commenter was even before I saw the username and profile.&lt;/p&gt;
&lt;p&gt;It was an easy decision to take the sponsorship offer because I was already a
fan of ReadMe. I’ve done plenty of third party integrations at work, and when I
open a company’s documentation page for the first time, I can immediately
recognize if they are using ReadMe. That’s a positive sign for me that the
documentation will be pretty comprehensive and useful, relative to documentation
by companies that build their own systems from scratch.&lt;/p&gt;
&lt;p&gt;Lastly, I’ve received two acquistion offers (four digits each) to buy the
website. I turned them down because it’s more gratifying to keep the website as
a side project. I never intended to make any money off of this anyway. Though it
has been nice to earn a bit of largely passive income from the advertising and
sponsorship.&lt;/p&gt;
&lt;h2 id="gratification"&gt;Gratification&lt;a class="anchor" href="#gratification"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Way more than money, the biggest source of gratification is just learning when
people find the site to be useful. I have a monitor set up with
&lt;a href="https://f5bot.com/"&gt;F5Bot&lt;/a&gt;. It checks Reddit, Hacker News, and
&lt;a href="https://lobste.rs/"&gt;Lobsters&lt;/a&gt; for mentions of “makeareadme” and sends me an
email when it finds something. I also occasionally &lt;a href="https://twitter.com/search?q=makeareadme.com"&gt;search
Twitter&lt;/a&gt; for “makeareadme.com”.&lt;/p&gt;
&lt;p&gt;I’ve been in the programming world long enough that making a README is second
nature. It can be hard for me to remember that at one point, I didn’t know the
value of good documentation and what information is useful in a README. It’s the
&lt;a href="https://en.wikipedia.org/wiki/Curse_of_knowledge"&gt;curse of knowledge&lt;/a&gt; at work.
So when someone recommends Make a README to other people, it reminds me that
everyone is a beginner at some point. And that for this one basic but important
thing, my website served as a helpful resource. That feels &lt;em&gt;so good&lt;/em&gt; every time.&lt;/p&gt;
&lt;h2 id="future-work"&gt;Future Work&lt;a class="anchor" href="#future-work"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the future, I’d like to add two things to the website. The first is
translations. The &lt;a href="https://plausible.io/makeareadme.com/countries"&gt;analytics&lt;/a&gt;
show that significant traffic comes from countries that don’t primarily speak
English. Adding translations would make the website more accessible to more
people.&lt;/p&gt;
&lt;p&gt;I also want to add an interactive README generator. I think the current
template is a good educational starting point, but the website could be more
useful for experienced engineers who don’t need the educational aspect but are
making new READMEs.&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/making-make-a-readme</guid><pubDate>Wed, 06 Mar 2024 00:00:00 GMT</pubDate></item><item><title>Start With a Minimum Viable System</title><link>https://www.dannyguo.com/blog/start-with-a-minimum-viable-system</link><description>&lt;article&gt;
        &lt;h1&gt;Start With a Minimum Viable System&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2023-08-09"&gt;
                August 9, 2023
            &lt;/time&gt;
             · 
            806 words  ·  ~5 minutes to read
            
        &lt;/div&gt;

        &lt;p&gt;After college, my first big programming project for work was to build a
&lt;a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete"&gt;CRUD&lt;/a&gt; app from
scratch. The most important lesson that I learned from it was that when I’m in
an unfamiliar environment, I should prefer to build a minimum viable system by
developing things vertically instead of horizontally. That means building just a
portion of a layer and then moving to the next layer as quickly as possible.
Rather than building out entire layers sequentially. Connecting the pieces of a
system can be surprisingly challenging, which means that if I leave it to the
end, I can run into unexpected issues and slowdowns.&lt;/p&gt;
&lt;p&gt;For my project, I started with the database schema. Then I followed my team’s
pattern in writing database accessor code. Next, I wrote business logic code in
a backend service. Lastly, I wrote the
&lt;a href="https://en.wikipedia.org/wiki/User_interface"&gt;UI&lt;/a&gt; code that called the backend
service. So I started at the bottom and completed each layer for all the
required features before moving to the next layer. At the end, I deployed the
pieces and connected them together.&lt;/p&gt;
&lt;p&gt;The deployment process was the hardest part of the project. For the code, I
sometimes needed help from my mentor. But for the most part, it was up to me how
fast I completed it. For deployment, however, there were multiple times that I
needed another team to do something.&lt;/p&gt;
&lt;p&gt;I remember one Friday afternoon when I learned that I needed someone to add a
connection string to a configuration file. It was a manual process, and only one
person was really trusted to make the change. That person had left for the day,
so I had to wait until the next week. Yes, there are process/institutional
problems with that situation, but it was the reality that I had to work with. In
the context of completing my project, I should have knocked out the
configuration charge early on. I could have requested the change and worked on
my code in parallel while I was waiting.&lt;/p&gt;
&lt;p&gt;Issues like that made the project stretch on longer than it should have. I’d be
blocked by things that were not entirely within my control and because I had
already finished the code that &lt;em&gt;was&lt;/em&gt; up to me, they’d be total blockers.&lt;/p&gt;
&lt;p&gt;If I were to do a project like that again, I’d try to get something that works
into production as quickly as possible. I’d build one feature end to end first.
Then I’d iterate and build the other features.&lt;/p&gt;
&lt;h2 id="mvp"&gt;MVP&lt;a class="anchor" href="#mvp"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is the system equivalent of a
&lt;a href="https://en.wikipedia.org/wiki/Minimum_viable_product"&gt;minimum viable product&lt;/a&gt;. A UI that can talk
to a backend service that can talk to a database to fulfill one user request is
a better starting point than a sophisticated, totally fleshed out backend that
has no corresponding frontend for someone to actually do anything. The former is
a minimum viable system. The latter doesn’t have all the pieces that the system
needs.&lt;/p&gt;
&lt;p&gt;Consider what a minimum viable system for a todo app looks like compared to an
unusable system.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/a9a7zV7.jpg" alt="diagrams for a todo app"&gt;&lt;/p&gt;
&lt;p&gt;For a CRUD app, code tends to be the easiest thing to figure out, but creating a
robust, working system involves more than code. Computer science classes don’t
involve much networking, security policies, and configuration, while real world
programming can have plenty of all that.&lt;/p&gt;
&lt;p&gt;This also applies to something like integrating with a new API or external
system. Instead of expanding on my code to support what I want to do with the
API, I would inititally focus on interacting with the API to figure out how it
really behaves. Maybe there’s an IP
&lt;a href="https://en.wikipedia.org/wiki/Whitelist"&gt;allowlist&lt;/a&gt; that needs to be updated.
Or maybe I’ll learn that requests to my system won’t come with a
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type"&gt;Content-Type&lt;/a&gt;
header, which causes my framework to not parse the request (true story). Many
integrations will have kinks like that, and I want to find them as early as
possible.&lt;/p&gt;
&lt;h2 id="learning"&gt;Learning&lt;a class="anchor" href="#learning"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Another way I think about minimum viable systems is that it’s about learning
more efficiently. Once you’ve learned how to retrieve data from the database
with whatever language/framework/library/pattern you’re expected to use, doing
it for a different piece of data probably doesn’t teach you much more. It’s too
similar to what you’ve already done. Whereas implementing the UI to show that
data is going to teach you a lot more.&lt;/p&gt;
&lt;p&gt;One objection could be that you might only be responsible for one piece of the
system, or maybe you want to focus on learning one topic in depth (e.g. becoming
a database expert). That makes sense, but for any project that involves more
than one piece of a system, you can still advocate for integrating the pieces
quickly. To the extent that your success depends on crossing the boundaries in a
system, I recommend doing it as early as possible. It will save you pain and
make it easier to estimate how long things will take.&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/start-with-a-minimum-viable-system</guid><pubDate>Wed, 09 Aug 2023 00:00:00 GMT</pubDate></item><item><title>How to Convert Any JavaScript Value to a Boolean</title><link>https://www.dannyguo.com/blog/how-to-convert-any-javascript-value-to-a-boolean</link><description>&lt;article&gt;
        &lt;h1&gt;How to Convert Any JavaScript Value to a Boolean&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2023-06-17"&gt;
                June 17, 2023
            &lt;/time&gt;
             · 
            252 words  ·  ~2 minutes to read
            
        &lt;/div&gt;

        &lt;p&gt;The best way to convert a JavaScript value to a boolean is to use the
&lt;code&gt;Boolean()&lt;/code&gt; function. It returns &lt;code&gt;false&lt;/code&gt; for any
&lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Falsy"&gt;falsy&lt;/a&gt; value and
&lt;code&gt;true&lt;/code&gt; otherwise (any value that is not falsy is
&lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Truthy"&gt;truthy&lt;/a&gt;). You can try
out the examples in this post with &lt;a href="https://replit.com/@dyguo/How-to-Convert-Any-JavaScript-Value-to-a-Boolean#index.js"&gt;this
Replit&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;// Falsy values&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; a &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Boolean&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; b &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Boolean&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;""&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; c &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Boolean&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; d &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Boolean&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;// Truthy values&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; e &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Boolean&lt;/span&gt;&lt;span&gt;({});&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; f &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Boolean&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"foobar"&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; g &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Boolean&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; h &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Boolean&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;// The values are boolean primitives (`false` and `true`)&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;console.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;({a, b, c, d, e, f, g, h});&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="not-operator"&gt;Not Operator&lt;a class="anchor" href="#not-operator"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;An alternative is to use the not operator (&lt;code&gt;!&lt;/code&gt;) twice. The first one returns a
primitive boolean value, and then the second one flips the value to what you
actually want.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; fooString &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;""&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; fooBoolean &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;!!&lt;/span&gt;&lt;span&gt;fooString;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;// The value is `false`&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;console.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;({fooBoolean});&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This method takes fewer characters to write, but I prefer to use the &lt;code&gt;Boolean()&lt;/code&gt;
method because I think it’s clearer and more readable. We should generally
&lt;a href="https://thoughtbot.com/blog/write-code-to-be-read"&gt;optimize for reading code over writing
code&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="boolean-constructor"&gt;Boolean Constructor&lt;a class="anchor" href="#boolean-constructor"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Make sure you don’t use &lt;code&gt;Boolean&lt;/code&gt; as a constructor (using &lt;code&gt;new&lt;/code&gt;) because that
creates an &lt;em&gt;object&lt;/em&gt;. You would have to use &lt;code&gt;.valueOf()&lt;/code&gt; to get a primitive
value.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;// bar is an object&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; bar &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Boolean&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;""&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (bar) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;// So this would run because an object is truthy&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    console.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"in bar branch"&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; barValue &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; bar.&lt;/span&gt;&lt;span&gt;valueOf&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (barValue) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;// But this wouldn't run because barValue is `false`&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    console.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"in barValue branch"&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;console.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;({bar, barValue});&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/how-to-convert-any-javascript-value-to-a-boolean</guid><pubDate>Sat, 17 Jun 2023 00:00:00 GMT</pubDate></item><item><title>My Credit and Debit Card Collection</title><link>https://www.dannyguo.com/blog/my-credit-and-debit-card-collection</link><description>&lt;article&gt;
        &lt;h1&gt;My Credit and Debit Card Collection&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2023-05-09"&gt;
                May 9, 2023
            &lt;/time&gt;
             · 
            47 words  ·  ~1 minute to read
            
        &lt;/div&gt;

        &lt;p&gt;One of my hobbies is to take advantage of credit card rewards and sign up
bonuses. Here is my collection of credit and debit cards (excluding any active
ones). I’ve kept every card I’ve ever received, and I have over 100 cards in
total.&lt;/p&gt;


&lt;div id="gallery"&gt;&lt;/div&gt;


    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/my-credit-and-debit-card-collection</guid><pubDate>Tue, 09 May 2023 00:00:00 GMT</pubDate></item><item><title>Forex Trading for Fun and Luckily Profit</title><link>https://www.dannyguo.com/blog/forex-trading-for-fun-and-luckily-profit</link><description>&lt;article&gt;
        &lt;h1&gt;Forex Trading for Fun and Luckily Profit&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2023-04-17"&gt;
                April 17, 2023
            &lt;/time&gt;
             · 
            2,080 words  ·  ~11 minutes to read
            
                        &lt;br&gt;I may earn commissions from purchases made through
                        affiliate links in this post.
                    
        &lt;/div&gt;

        &lt;p&gt;In college, my first programming side project involved writing &lt;a href="https://en.wikipedia.org/wiki/Foreign_exchange_market"&gt;foreign
exchange&lt;/a&gt; (forex) trading
programs. This is an introduction to forex trading and the story of my brief
stint as an amateur currency trader.&lt;/p&gt;
&lt;h2 id="the-forex-market"&gt;The Forex Market&lt;a class="anchor" href="#the-forex-market"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When most people think of &lt;a href="https://www.investopedia.com/trading-4427765"&gt;financial
trading&lt;/a&gt;, they probably think of
buying and selling stocks, bonds, or (nowadays) crypto. But the financial world
goes much deeper than that. Particularly through the
&lt;a href="https://www.investopedia.com/terms/d/derivativestimebomb.asp"&gt;power&lt;/a&gt; of
&lt;a href="https://www.investopedia.com/terms/d/derivative.asp"&gt;derivatives&lt;/a&gt;, there are
ways to bet on all sorts of things, like the &lt;a href="https://www.vice.com/en/article/k7wyew/wheat-futures-are-the-hottest-stock-on-wall-street"&gt;future price of
wheat&lt;/a&gt;,
the &lt;a href="https://www.investopedia.com/stock-analysis/2012/4-ways-to-trade-the-vix-vxx-vxz-tvix-xxv0504.aspx"&gt;volatility of the stock
market&lt;/a&gt;,
or even the &lt;a href="https://www.investopedia.com/terms/s/spreadoption.asp"&gt;difference&lt;/a&gt;
between the price of a natural resource (such as crude oil) and the price of
something that is refined from that resource (such as gasoline).&lt;/p&gt;
&lt;p&gt;In terms of trading volume, the markets for those instruments are all dwarfed by
the one that I became interested in back in 2010: the foreign exchange market,
which is the market for currencies. It’s the
&lt;a href="https://www.investopedia.com/articles/forex/11/who-trades-forex-and-why.asp"&gt;largest&lt;/a&gt;,
most liquid market in the world, with an
&lt;a href="https://www.reuters.com/markets/us/global-fx-trading-hits-record-75-trln-day-bis-survey-2022-10-27/"&gt;estimated&lt;/a&gt;
daily volume of $7.5 trillion. That means an annual volume that is measured in
the &lt;em&gt;quadrillions&lt;/em&gt; ($1,000,000,000,000,000).  The market has its own
&lt;a href="https://www.investopedia.com/articles/forex/10/forex-market-history.asp"&gt;interesting
history&lt;/a&gt;,
which includes &lt;a href="https://en.wikipedia.org/wiki/George_Soros"&gt;George Soros&lt;/a&gt; making
$1 billion in a day by &lt;a href="https://fortunly.com/articles/george-soros-and-the-bank-of-england/"&gt;betting against the Bank of
England&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="hedging-currency-risk"&gt;Hedging Currency Risk&lt;a class="anchor" href="#hedging-currency-risk"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Consider the experience of going from the United States to Europe. You might go
to a bank ahead of time to change your U.S.
&lt;a href="https://en.wikipedia.org/wiki/United_States_dollar"&gt;dollars&lt;/a&gt; into
&lt;a href="https://en.wikipedia.org/wiki/Euro"&gt;euros&lt;/a&gt;. You make the exchange at a certain
rate, and then you go on your trip. When you get back, you change your remaining
euros back into dollars. Depending on how the exchange rate has fluctuated while
you were gone, you could have a profit or a loss on the money that you didn’t
spend. This is a small-scale example of &lt;a href="https://en.wikipedia.org/wiki/Foreign_exchange_risk"&gt;foreign exchange
risk&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You might not care about that risk, but think about a large company that
operates internationally. The company might make deals that involve receiving
payments at a later date. If the company doesn’t take any steps to mitigate its
foreign exchange risk, it is effectively gambling on exchange rates. Instead,
the company can pay to
&lt;a href="https://en.wikipedia.org/wiki/Foreign_exchange_hedge"&gt;hedge&lt;/a&gt; its risk using
derivatives, removing the chance of a loss. As well as the chance of a profit!&lt;/p&gt;
&lt;p&gt;For example, the company can set things up so that if the original deal loses
money because of exchange rate changes, the derivative will make a corresponding
amount of money. And vice versa. If the original deal makes money, the
derivative would lose money. It would cost some money to set up the derivative
in the first place, but the company would be paying for &lt;em&gt;certainty&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I wanted to do the opposite. I wanted to take on risk in the hopes of making a
profit. The first step was to pick a broker.&lt;/p&gt;
&lt;h2 id="picking-a-broker"&gt;Picking a Broker&lt;a class="anchor" href="#picking-a-broker"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I researched many brokers. A majority of them were located in Cyprus.
&lt;a href="https://bestctraderbrokers.com/why-are-there-so-many-forex-brokers-in-cyprus/"&gt;Supposedly&lt;/a&gt;,
that’s because it’s easier to get licensed there and because of lower fees and
taxes.&lt;/p&gt;
&lt;p&gt;One factor was the maximum allowed
&lt;a href="https://www.investopedia.com/terms/l/leverage.asp"&gt;leverage&lt;/a&gt;. Leverage in this
context refers to borrowing money so that you only have to put in a small amount
of your own money to control a larger position. When I was looking at brokers,
the highest amount that I saw was a stratospheric 500:1, which means that for a
$500 position, you only need to put in $1 of your own money, and the broker
lends you the remaining $499. In the United States,
&lt;a href="https://www.investopedia.com/articles/forex/011515/us-regulations-forex-brokers.asp"&gt;regulations&lt;/a&gt;
limit leverage to 50:1 for forex brokers.&lt;/p&gt;
&lt;p&gt;High amounts of leverage are common in the forex market because exchange rates
tend to be fairly stable, so it can be hard to make signifcant profits without
large positions. Leverage allows you to take those positions without financing
them completely with your own money, effectively letting you magnify the effects
of small changes.&lt;/p&gt;
&lt;p&gt;But the power that comes with leverage isn’t free. The more leverage you use,
the easier it is to lose everything through a &lt;a href="https://www.investopedia.com/terms/m/margincall.asp"&gt;margin
call&lt;/a&gt;, when you have too
big of a loss, and you are forced to put in more money, or the broker will close
your position for you. Leverage makes it easier to both make and lose money.&lt;/p&gt;
&lt;p&gt;With the 500:1 example, the exchange rate only has to change by a tiny amount
for you to lose everything you put into the position. That scared me, so I
didn’t anticipate wanting to use that much leverage.&lt;/p&gt;
&lt;p&gt;Some of the brokers also seemed sketchy to me. It’s hard to explain how, but
their websites and customer support representatives didn’t give me a good
feeling. I ended up picking &lt;a href="https://www.oanda.com/us-en/trading/"&gt;Oanda&lt;/a&gt;, which
let me leverage up to 50:1. They seemed trustworthy, and they supported
&lt;a href="https://en.wikipedia.org/wiki/MetaTrader_4"&gt;MetaTrader 4&lt;/a&gt;, which I knew would
let me automate my trading.&lt;/p&gt;
&lt;h2 id="manual-trading"&gt;Manual Trading&lt;a class="anchor" href="#manual-trading"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To start, I made some small trades manually to get a feel for things. I used
Oanda’s desktop application. Here’s an old screenshot:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/dWFc9SV.png" alt="Oanda fxTrade interface"&gt;&lt;/p&gt;
&lt;h2 id="currencies"&gt;Currencies&lt;a class="anchor" href="#currencies"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can see what currencies I could trade through Oanda:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Australian_dollar"&gt;Australian dollar&lt;/a&gt; (AUD)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Canadian_dollar"&gt;Canadian dollar&lt;/a&gt; (CAD)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Euro"&gt;European Union euro&lt;/a&gt; (EUR)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Japanese_yen"&gt;Japanese yen&lt;/a&gt; (JPY)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/New_Zealand_dollar"&gt;New Zealand dollar&lt;/a&gt; (NZD)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Pound_sterling"&gt;Pound sterling&lt;/a&gt; (GBP)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Swiss_franc"&gt;Swiss franc&lt;/a&gt; (CHF)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/United_States_dollar"&gt;United States dollar&lt;/a&gt;
(USD)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I learned some nicknames for currencies, such as
”&lt;a href="https://www.investopedia.com/terms/l/loonie.asp"&gt;loonie&lt;/a&gt;” for the Canadian
dollar because the $1 Canadian coin has a
&lt;a href="https://en.wikipedia.org/wiki/Loon"&gt;loon&lt;/a&gt; on one side. Similarly, the New
Zealand dollar is informally known as the “kiwi” because the $1 New Zealand coin
has a &lt;a href="https://en.wikipedia.org/wiki/Kiwi_(bird)"&gt;kiwi bird&lt;/a&gt; on one side.&lt;/p&gt;
&lt;h2 id="currency-pair"&gt;Currency Pair&lt;a class="anchor" href="#currency-pair"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can also see that the currencies come in
&lt;a href="https://en.wikipedia.org/wiki/Currency_pair"&gt;pairs&lt;/a&gt;, such as EUR/USD. When I
look up EUR/USD &lt;a href="https://finance.yahoo.com/quote/EURUSD=X/"&gt;right now&lt;/a&gt;, it has a
rate of 1.09. That means that 1 euro is currently equivalent to 1.09 U.S.
dollars.&lt;/p&gt;
&lt;p&gt;For each pair, the first currency is the “base” currency, and the second
currency is the “quote” currency. When you buy a currency pair, you are
simultaneously buying the base currency and selling the quote currency. You can
also sell a currency pair, which means selling the base currency and buying the
quote currency. So when you buy a currency pair, you hope the rate goes up, and
when you sell a pair, you hope that the rate goes down.&lt;/p&gt;
&lt;p&gt;Some currency pairs have nicknames of their own. GBP/USD is known as the
”&lt;a href="https://www.investopedia.com/terms/c/cable.asp"&gt;cable&lt;/a&gt;” as a reference to
&lt;a href="https://en.wikipedia.org/wiki/Transatlantic_communications_cable"&gt;underwater
cables&lt;/a&gt; that
spanned the Atlantic Ocean to enable faster communication between the United
States and England. Later, EUR/USD became known as the “fiber” as a nod to the
&lt;a href="https://en.wikipedia.org/wiki/Fiber-optic_cable"&gt;fiber-optic cables&lt;/a&gt; that are
used for the same purpose.&lt;/p&gt;
&lt;p&gt;Currency pairs can also be
&lt;a href="https://www.investopedia.com/terms/c/currencypair.asp"&gt;categorized&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Major pairs, such as EUR/USD, involve the U.S. dollar and are the most traded
pairs&lt;/li&gt;
&lt;li&gt;Minor pairs (also known as crosses), such as GBP/JPY, don’t involve the U.S.
dollar but do involve one of the other highly traded currencies&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.investopedia.com/terms/e/exotic_currency.asp"&gt;Exotic&lt;/a&gt; pairs, such
as EUR/TRY (&lt;a href="https://en.wikipedia.org/wiki/Turkish_lira"&gt;Turkish lira&lt;/a&gt;),
involve a currency that is not traded much&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.investopedia.com/terms/forex/c/commodity-pairs.asp"&gt;Commodity&lt;/a&gt;
pairs, such as EUR/CAD, involve a currency that is highly correlated with
commodity prices, such as the Canadian, Australian, and New Zealand dollars&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="spread"&gt;Spread&lt;a class="anchor" href="#spread"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You might have noticed that each currency pair actually has two prices: a sell
price (also known as the &lt;a href="https://www.investopedia.com/terms/a/ask.asp"&gt;ask
price&lt;/a&gt;) as well as a buy price
(also known as the &lt;a href="https://www.investopedia.com/terms/b/bidprice.asp"&gt;bid
price&lt;/a&gt;), and the buy price is
always higher than the sell price.&lt;/p&gt;
&lt;p&gt;The difference is known as the &lt;a href="https://www.investopedia.com/terms/b/bid-askspread.asp"&gt;bid-ask
spread&lt;/a&gt;. It means that
if you simultaneously buy a pair and sell it, you would lose money. The broker
would effectively keep the difference, and that’s one way for the broker to make
money. So to make a profit yourself, it’s not enough for the currency pair to
change in your favor. It has to change enough for you to beat the spread.&lt;/p&gt;
&lt;p&gt;The spread is usually shown as a number of pips (&lt;a href="https://www.investopedia.com/terms/p/pip.asp"&gt;percentage in
point&lt;/a&gt;). A pip is the smallest
price change possible for a given currency pair (by convention). Typically, that
means 1 pip is 0.0001. So if you buy EUR/USD at 1.0721 and then sell it at
1.0763, you’ve made a profit of 42 pips. Oanda supports the concept of
&lt;a href="https://www1.oanda.com/forex-trading/learn/getting-started/pips"&gt;fractional
pips&lt;/a&gt; (also
known as pipettes), so their rates have an additional decimal place.&lt;/p&gt;
&lt;p&gt;In the screenshot, the number at the bottom center of each currency pair is the
spread. The spread is usually lower for pairs that have greater trading volume.
You can see that EUR/USD, which is the most traded pair, had a spread of 1.2
pips at the time. Whereas AUD/NZD had a spread of 6.1 pips.&lt;/p&gt;
&lt;p&gt;Spreads also change throughout the day. As a whole, the forex market is &lt;a href="https://www.investopedia.com/ask/answers/how-forex-market-trade-24-hours-day/"&gt;open 24
hours a
day&lt;/a&gt;.
Trading volume is correlated with when certain markets are open. The busiest
time is when the European and U.S. markets are simultaneously open, and that’s
when spreads are lowest. But there is always at least one market open.&lt;/p&gt;
&lt;h2 id="strategy"&gt;Strategy&lt;a class="anchor" href="#strategy"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After I got a handle on the basics of forex trading, I tried to come up with a
trading strategy. Spoiler alert: I didn’t know what I was doing.&lt;/p&gt;
&lt;p&gt;I ended up with a strategy of taking a small position to start. If the exchange
rate moved several pips in my favor, I’d cash out and then reverse my position.
If the rate moved against me, I’d take another, larger position in the same
direction as the original position. My hope was that the new position would make
enough profit to outweigh any loss from the original position. If the rate
continued to move against me, I’d make a third, even larger trade. And so on.&lt;/p&gt;
&lt;p&gt;In most cases, it only took me a few trades to make a profit.  The risk was that
if a rate kept moving against me, I would eventually run out of money to put in.
At that point, all my money would be in one position that could be wiped out
with a margin call.&lt;/p&gt;
&lt;p&gt;I was able to consistently make small profits, but there was always the risk of
a catastrophic loss that would wipe out all those small gains. I later learned
that my approach is called a &lt;a href="https://en.wikipedia.org/wiki/Martingale_(betting_system)"&gt;martingale
strategy&lt;/a&gt;. In
retrospect, I had no reason to believe that it was any good. I had no special
insight into forex rate changes and no technological advantage. My strategy was
just gambling.&lt;/p&gt;
&lt;p&gt;I did think about other strategies, including using &lt;a href="https://www.investopedia.com/terms/e/economic_indicator.asp"&gt;economic
indicator&lt;/a&gt; releases
as a basis for trades. I even did some crude
&lt;a href="https://www.investopedia.com/terms/b/backtesting.asp"&gt;backtesting&lt;/a&gt; with
historical indicators and forex rates. But I never really put such a strategy
into action. The martingale system was my primary method. It’s hard to overstate
how dumb that seems to me now. The only thing I can take solace in is &lt;a href="https://www.reddit.com/r/Showerthoughts/comments/8fwqcw/if_you_dont_look_back_on_your_past_self_and/"&gt;the idea
that this means I’ve grown a
bit&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you don’t look back on your past self and cringe, then you didn’t grow as a
person.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="automated-trading"&gt;Automated Trading&lt;a class="anchor" href="#automated-trading"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I made trades manually for a while. The next step was to automate my trading
using MetaTrader 4. I bought a &lt;a href="https://www.amazon.com/Expert-Advisor-Programming-Automated-MetaTrader/dp/0982645902?crid=3QDACH7CXL46R&amp;amp;keywords=Expert+Advisor+Programming%3A+Creating+Automated+Trading+Systems+in+MQL+for+MetaTrader+4&amp;amp;qid=1644888838&amp;amp;sprefix=expert+advisor+programming+creating+automated+trading+systems+in+mql+for+metatrader+4%2Caps%2C97&amp;amp;sr=8-1&amp;amp;linkCode=ll1&amp;amp;tag=thdalo00-20&amp;amp;linkId=2c0c6edb764af5bde0421e042ee819e1&amp;amp;language=en_US&amp;amp;ref_=as_li_ss_tl"&gt;book on Expert Advisor
Programming&lt;/a&gt;
to learn how to write “expert advisors,” which are basically &lt;a href="https://www.investopedia.com/terms/forex/f/forex-trading-robot.asp"&gt;trading
bots&lt;/a&gt;. They
are implemented in &lt;a href="https://docs.mql4.com/"&gt;MetaQuotes Language 4&lt;/a&gt; (MQL4), which
has syntax similar to &lt;a href="https://en.wikipedia.org/wiki/C%2B%2B"&gt;C++&lt;/a&gt;, as well as
built-in functions for trading, such as
&lt;a href="https://docs.mql4.com/trading/ordersend"&gt;OrderSend&lt;/a&gt; and
&lt;a href="https://docs.mql4.com/trading/orderclose"&gt;OrderClose&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I was a novice programmer with only one introduction to computer science class
under my belt, but I figured out enough to make things work in a crude manner.
If you want to see how crude, I’ve published as much of my &lt;a href="https://github.com/dguo/forex-trading"&gt;old code as I could
find to GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I connected my expert advisors to my Oanda account and let everything run on a
laptop 24/7. For alerting, I &lt;a href="https://github.com/dguo/forex-trading/blob/b90bb61b25b8ce4496d382609ddd6a428a1ffcfc/Forex/MT4/EA.java#L109"&gt;used the SendMail
function&lt;/a&gt;
to email myself.&lt;/p&gt;
&lt;h2 id="results"&gt;Results&lt;a class="anchor" href="#results"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I don’t have good records for my performance, but from what I can find, I
deposited $31,050 in total, and I ended up withdrawing $38,701.99. So that’s a
return of 24.6% ($7,651.99) in about half a year.&lt;/p&gt;
&lt;p&gt;I experienced huge swings during that time. There were moments where I had
thousands of dollars in &lt;a href="https://www.investopedia.com/terms/p/paperprofitorloss.asp"&gt;paper
losses&lt;/a&gt;. Other
times, I’d be up thousands of dollars. To some extent, I became desensitized to
the volatility.&lt;/p&gt;
&lt;p&gt;But one day reminded me that exchange rates aren’t just numbers in a game. They
represent something more real than that. On March 11, 2011, I watched the
USD/JPY price change more quickly than I had ever seen. I found out that it was
&lt;a href="https://files.stlouisfed.org/files/htdocs/publications/review/11/09/303-324Neely.pdf"&gt;because&lt;/a&gt;
of the &lt;a href="https://en.wikipedia.org/wiki/2011_T%C5%8Dhoku_earthquake_and_tsunami"&gt;Tōhoku earthquake and
tsunami&lt;/a&gt;.
I was gambling with code, but exchange rates both &lt;a href="https://www.investopedia.com/trading/factors-influence-exchange-rates/"&gt;reflect important things
about the
world&lt;/a&gt;
and &lt;a href="https://www.investopedia.com/articles/forex/053115/understand-indirect-effects-exchange-rates.asp"&gt;have their own widespread
impact&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I don’t clearly remember why I stopped trading, but I like to think that it was
because I realized I was just gambling. I feel lucky that I quit while I was
ahead and made a profit. I could have lost it all on any given day.&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/forex-trading-for-fun-and-luckily-profit</guid><pubDate>Mon, 17 Apr 2023 00:00:00 GMT</pubDate></item><item><title>How to Enforce Exhaustive TypeScript Enum Mappings Using Records</title><link>https://www.dannyguo.com/blog/how-to-enforce-exhaustive-typescript-enum-mappings-using-records</link><description>&lt;article&gt;
        &lt;h1&gt;How to Enforce Exhaustive TypeScript Enum Mappings Using Records&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2023-04-12"&gt;
                April 12, 2023
            &lt;/time&gt;
             · 
            349 words  ·  ~2 minutes to read
            
        &lt;/div&gt;

        &lt;p&gt;Instead of using a function to exhaustively map a
&lt;a href="https://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt;
&lt;a href="https://www.typescriptlang.org/docs/handbook/enums.html"&gt;enum&lt;/a&gt; to other values,
you can use a &lt;a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type"&gt;Record
type&lt;/a&gt;.
This turns a runtime error into a compile-time error.&lt;/p&gt;
&lt;p&gt;For example (and you can try out these examples with &lt;a href="https://replit.com/@dyguo/Enforce-Exhaustive-TypeScript-Enum-Mappings-Using-Records#index.ts"&gt;this
Replit&lt;/a&gt;),
let’s say you have an enum of countries, and you want a way to get the capital
for each country. You might write a function to do so.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;enum&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Country&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    Australia &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"Australia"&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    China &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"China"&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    UnitedStates &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"United States"&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;getCountryCapital&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;country&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Country&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (country &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; Country.Australia) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"Canberra"&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (country &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; Country.China) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"Beijing"&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (country &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; Country.UnitedStates) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"Washington, D.C."&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This does the job, but what if someone adds a new &lt;code&gt;Country&lt;/code&gt; value without
updating &lt;code&gt;getCountryCapital&lt;/code&gt;? Then the function would return &lt;code&gt;undefined&lt;/code&gt;, which
could cause bad behavior. One option is to throw an error.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;getCountryCapital&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;country&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Country&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (country &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; Country.Australia) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"Canberra"&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (country &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; Country.China) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"Beijing"&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (country &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; Country.UnitedStates) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"Washington, D.C."&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Error&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;`Unexpected country: &lt;/span&gt;&lt;span&gt;${&lt;/span&gt;&lt;span&gt;country&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So you would at least get a runtime error as early as possible. But you can do
better in terms of safety by using a &lt;code&gt;Record&lt;/code&gt;, which turns this situation into a
compile-time error.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; CountryToCapital&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Record&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Country&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;&amp;gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    [Country.Australia]: &lt;/span&gt;&lt;span&gt;"Canberra"&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    [Country.China]: &lt;/span&gt;&lt;span&gt;"Beijing"&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    [Country.UnitedStates]: &lt;/span&gt;&lt;span&gt;"Washington, D.C."&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s say you add South Africa to the enum without updating &lt;code&gt;CountryToCapital&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;enum&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Country&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    Australia &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"Australia"&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    China &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"China"&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    SouthAfrica &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"South Africa"&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    UnitedStates &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"United States"&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;TypeScript should then give you an error. And if your
&lt;a href="https://en.wikipedia.org/wiki/Integrated_development_environment"&gt;IDE&lt;/a&gt; or
editor is connected to TypeScript, you should see a hint for the error in your
code as well.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;Property '"South Africa"' is missing in type '{ Australia: string; China:&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;string; "United States": string; }' but required in type 'Record&amp;lt;Country,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;string&amp;gt;'.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="unions"&gt;Unions&lt;a class="anchor" href="#unions"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This approach works for
&lt;a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types"&gt;unions&lt;/a&gt;
as well. Adding South Africa to this union would also result in a type error.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Country&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"Australia"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"China"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"United States"&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; CountryToCapital&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Record&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;Country&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;&amp;gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;"Australia"&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;"Canberra"&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;"China"&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;"Beijing"&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;"United States"&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;"Washington, D.C."&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/how-to-enforce-exhaustive-typescript-enum-mappings-using-records</guid><pubDate>Wed, 12 Apr 2023 00:00:00 GMT</pubDate></item><item><title>Why I Blog</title><link>https://www.dannyguo.com/blog/why-i-blog</link><description>&lt;article&gt;
        &lt;h1&gt;Why I Blog&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2023-04-06"&gt;
                April 6, 2023
            &lt;/time&gt;
             · 
            2,029 words  ·  ~11 minutes to read
            
        &lt;/div&gt;

        &lt;p&gt;Some people have asked me why I blog and why I value writing in general. These
are my reasons, in roughly decreasing order of importance to me.&lt;/p&gt;
&lt;h2 id="clarify-my-thinking"&gt;Clarify My Thinking&lt;a class="anchor" href="#clarify-my-thinking"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Writing is one of the best tools I have to clarify my own thinking. I’m a
natural ruminator. I’m not good at thinking on the spot. I prefer to have time
to think through details, connections, nuances, and consequences.&lt;/p&gt;
&lt;p&gt;Writing lets me do that while also helping me avoid going around in circles.
When thoughts are in my head, it’s easy for them to get jumbled up. I miss
things, and I keep coming back to the same thoughts, leading to the unproductive
ruminating. But writing my thoughts down stops that process. I am forced to
organize my thoughts in a coherent manner and to acknowledge when they don’t
make sense. Thoughts in my head are like a mixture of dirty water, while writing
is like a filter. It removes the nonsense from my thinking.&lt;/p&gt;
&lt;p&gt;If you had asked me when I was in school what the purpose of writing is, I would
have said something like putting what you think into words. What I understand
now is that the very act of writing can change your thinking. Writing is not
mere transcription. It can be a way to think more clearly and to &lt;em&gt;produce&lt;/em&gt;
thoughts. For example, I had never thought of the analogy to filtering dirty
water until I sat down to edit this section for maybe the fourth time.&lt;/p&gt;
&lt;p&gt;This isn’t an original thought of mine. See &lt;a href="https://en.wikipedia.org/wiki/Paul_Graham_(programmer)"&gt;Paul
Graham&lt;/a&gt;’s
&lt;a href="http://www.paulgraham.com/words.html"&gt;essay&lt;/a&gt; on “Putting Ideas Into Words.”&lt;/p&gt;
&lt;p&gt;When I am done writing something, I can have a different or more nuanced
perspective than when I started. And even when that doesn’t happen, writing
still gives me better words to express myself. Going from thoughts to words is
messy. I get frustrated when I talk to someone and feel like they aren’t
understanding me only because I’m not using the right words. So I strive to hit
upon precise wording that accurately captures what I am thinking or feeling.
That’s a lot easier for me to do when I am writing because I have the space to
play around with different words and to think about how someone else would
interpret them.&lt;/p&gt;
&lt;h2 id="share-knowledge-and-ideas"&gt;Share Knowledge and Ideas&lt;a class="anchor" href="#share-knowledge-and-ideas"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Every medium for sharing information has its advantages and disadvantages, but I
generally prefer blog posts. They allow for more details than tweets do, they
take much less time to read than books, they are easy to consume at my own pace
(unlike videos), and they are easy to link to and reference.&lt;/p&gt;
&lt;p&gt;I love the feeling that I get from reading a great blog post, whether the post
perfectly solves a problem that I have, teaches me something new, or encourages
me to change my mind about something. One reason is that I want to avoid
learning by making mistakes. While I value that process when it happens, it’s
still painful and inefficient. Instead, I want to learn from other people so
that I avoid making the same mistakes that they do.&lt;/p&gt;
&lt;p&gt;Blogging helps me try to return the favor for everything that I’ve learned from
other people’s blog posts. I don’t want others to make my mistakes either, which
is why I have no problem telling the world that I once &lt;a href="https://www.dannyguo.com/blog/i-published-my-aws-secret-key-to-github/"&gt;published an AWS secret
key to a public GitHub
repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In general, blogging lets me share what I know and believe. I don’t claim to
actually know all that much, but everyone has something worth sharing.  The idea
that a post I write could be useful for even just one other person motivates me.
And I know from comments that at least a few people have found some of my posts
helpful, which is so gratifying.&lt;/p&gt;
&lt;h2 id="learn-things"&gt;Learn Things&lt;a class="anchor" href="#learn-things"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I usually blog about things that I am already familiar with, but I’ve sometimes
used blogging as a way to learn something new. For example, I wrote a &lt;a href="https://www.dannyguo.com/blog/the-introductory-guide-to-assemblyscript/"&gt;post on
AssemblyScript&lt;/a&gt;,
which allowed me to learn about it without doing something more involved and
time-consuming, like a side project.&lt;/p&gt;
&lt;p&gt;Even when I write about things I feel like I know well, I tend to learn new
details in the process. Sometimes, it’s knowledge that could be useful in the
future, such as the &lt;a href="https://www.dannyguo.com/blog/how-to-check-if-a-javascript-string-begins-or-ends-with-a-string/#advanced-usage"&gt;optional
parameters&lt;/a&gt;
for &lt;code&gt;startsWith&lt;/code&gt; and &lt;code&gt;endsWith&lt;/code&gt; in JavaScript. I didn’t know those existed until
I wrote my post.&lt;/p&gt;
&lt;p&gt;Other times, I learn things that are interesting to me but maybe don’t have much
practical value, like what the &lt;a href="https://jquery.com/"&gt;jQuery&lt;/a&gt; homepage
&lt;a href="https://www.dannyguo.com/blog/the-history-and-legacy-of-jquery/#a-brief-history-of-jquery"&gt;originally looked
like&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Either way, almost every blog post I write teaches me something new, even if the
detail doesn’t end up making it into the published post.&lt;/p&gt;
&lt;h2 id="practice-writing"&gt;Practice Writing&lt;a class="anchor" href="#practice-writing"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It’s pretty hard to get better at something without actually doing it, and
blogging allows me to practice writing. Most importantly, it’s a form of writing
that is totally up to me. While I also write during my day job (e.g. Slack
messages, emails, ticket specifications, code reviews, documentation,
prosposals, etc.), those cases are usually driven by some external factor.&lt;/p&gt;
&lt;p&gt;My personal blog, on the other hand, gives me the freedom to write about
whatever I truly feel like writing about. That means I write more, and I have
hopefully gotten at least a little better at writing as a result.&lt;/p&gt;
&lt;p&gt;Blogging also means that I can get feedback from a global audience. Unlike an
email that I know only one person is going to read, I know that anyone with
access to the internet could read my blog post. That motivates me to try harder
to write it well.&lt;/p&gt;
&lt;h2 id="learn-how-im-wrong"&gt;Learn How I’m Wrong&lt;a class="anchor" href="#learn-how-im-wrong"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Publishing things to the internet has been a fantastic way to quickly learn what
I am mistaken about or haven’t considered. Here are a few examples.&lt;/p&gt;
&lt;p&gt;I wrote a post about &lt;a href="https://www.dannyguo.com/blog/automating-my-air-conditioner"&gt;automating my air
conditioner&lt;/a&gt;, and I
learned that my air conditioner &lt;a href="https://news.ycombinator.com/item?id=28813747"&gt;does in fact have a
thermostat&lt;/a&gt;. While I would have
done my project anyway, it was unnecessary in theory.&lt;/p&gt;
&lt;p&gt;I also wrote a post encouraging &lt;a href="https://www.dannyguo.com/blog/serve-videos-instead-of-gifs"&gt;serving videos instead of
GIFs&lt;/a&gt;. But I hadn’t
thought of the
&lt;a href="https://lobste.rs/s/x44a92/serve_videos_instead_gifs#c_bhd8oc"&gt;differences&lt;/a&gt; in
&lt;a href="https://news.ycombinator.com/item?id=23208031"&gt;behavior&lt;/a&gt; when saving/sharing a
&lt;a href="https://news.ycombinator.com/item?id=23208432"&gt;video instead of a GIF&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For the same post on GIFs, I also got a &lt;a href="https://www.reddit.com/r/programming/comments/gl7ttl/comment/fqw7lap/"&gt;comment that called me
out&lt;/a&gt; for
posting about a performance-related topic on a website that served a gigantic
favicon.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;And yet that webpage has a 170kb favicon - a 256x256 image with essentially 3
colors but stored in an uncompressed 24 bit format.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I appreciated the criticism! I added the favicon on a whim when I first set up
my website, and the favicon definitely didn’t need to be that big.  I eventually
&lt;a href="https://www.dannyguo.com/blog/updating-my-favicon-courtesy-of-randall-munroe/"&gt;fixed
it&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="be-able-to-provide-a-link"&gt;Be Able to Provide a Link&lt;a class="anchor" href="#be-able-to-provide-a-link"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When a topic or question comes up that I have written about, I love being able
to just provide a link to my post instead of trying to recreate my past thoughts
in a way that will inevitably be less coherent than my post. For example, a
co-worker mentioned running low on hard drive space, and I shared my post on
&lt;a href="https://www.dannyguo.com/blog/clearing-mac-storage-space/"&gt;clearing Mac storage
space&lt;/a&gt;. Another
co-worker asked about apps for
&lt;a href="https://en.wikipedia.org/wiki/Time-based_one-time_password"&gt;TOTP&lt;/a&gt; codes, and I
linked to my post on &lt;a href="https://www.dannyguo.com/blog/migrating-from-authy-to-bitwarden-for-2fa-codes"&gt;migrating from Authy to
Bitwarden&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This has happened more often than I would have expected, considering I don’t
have that many posts. And now if another person asks me why I blog, I have this
post to link to!&lt;/p&gt;
&lt;h2 id="vanity"&gt;Vanity&lt;a class="anchor" href="#vanity"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I admit it feels good when one of my posts gets many hits (the analytics for my
personal website are &lt;a href="https://plausible.io/dannyguo.com"&gt;public&lt;/a&gt;), reaches the
front page of &lt;a href="https://news.ycombinator.com/"&gt;Hacker News&lt;/a&gt; or
&lt;a href="https://lobste.rs/"&gt;Lobsters&lt;/a&gt;, gets tweeted about, or ends up on random
newsletters.&lt;/p&gt;
&lt;p&gt;Those posts tend to drive large but unsustainable spikes in traffic. For
example, my post on &lt;a href="https://www.dannyguo.com/blog/what-i-learned-by-relearning-html"&gt;What I Learned by Relearning
HTML&lt;/a&gt; was on
the front pages of
&lt;a href="https://hackernoon.com/how-relearning-html-gave-me-new-insights-as-a-web-developer-6j3634ik"&gt;HackerNoon&lt;/a&gt;
and &lt;a href="https://dzone.com/articles/what-i-learned-by-relearning-html"&gt;DZone&lt;/a&gt;. And
my post on &lt;a href="https://www.dannyguo.com/blog/my-seatbelt-rule-for-judgment"&gt;My Seatbelt Rule for
Judgment&lt;/a&gt; was on
&lt;a href="https://kottke.org/quick-links/2022-02"&gt;Kottke&lt;/a&gt; and the front page of Hacker
News. Each post got tens of thousands of hits over a few days.&lt;/p&gt;
&lt;p&gt;But some of my “how to” posts are the ones that get sustained traffic through
search engines, providing most of the hits in a typical month. Both categories
of posts give me dopamine.&lt;/p&gt;
&lt;p&gt;I’ve also had plenty of posts that aren’t in either category and have not been
read much at all. And that’s fine! The vanity factor is real, but I try not to
let it affect me too much. For now, I want to write simply about what I am
interested in writing about, rather than trying to work backwards and write
posts that I think will be popular.&lt;/p&gt;
&lt;h2 id="unexpected-opportunities"&gt;Unexpected Opportunities&lt;a class="anchor" href="#unexpected-opportunities"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My writing provided an unexpected opportunity. Someone from
&lt;a href="https://logrocket.com"&gt;LogRocket&lt;/a&gt; read one of my posts and invited me to write
paid posts for &lt;a href="https://blog.logrocket.com/"&gt;their technical blog&lt;/a&gt;. I’ve written
&lt;a href="https://blog.logrocket.com/author/dannyguo"&gt;some posts&lt;/a&gt; for them, and I used
them as chances to get paid to write and learn new things.&lt;/p&gt;
&lt;h2 id="monetization"&gt;Monetization&lt;a class="anchor" href="#monetization"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I could monetize my website by adding lightweight,
developer-focused ads to some of my posts using
&lt;a href="https://www.ethicalads.io"&gt;EthicalAds&lt;/a&gt; (which I do use for &lt;a href="https://www.makeareadme.com/"&gt;Make a
README&lt;/a&gt;) or &lt;a href="https://www.carbonads.net"&gt;Carbon&lt;/a&gt;.
Though &lt;a href="https://danluu.com/"&gt;Dan Luu&lt;/a&gt; has a good &lt;a href="https://danluu.com/blog-ads/"&gt;post on this
topic&lt;/a&gt;, and I agree that it may not be worth the
influence it could have on my writing behavior or on how readers perceive my
posts. I’m also hesitant to clutter my own blog with ads. On the other hand,
they are only single images and should be relevant to most visitors. I’ve never
minded ads from these networks on other websites.&lt;/p&gt;
&lt;p&gt;I do add Amazon &lt;a href="https://en.wikipedia.org/wiki/Affiliate_marketing"&gt;affiliate&lt;/a&gt;
links when I would have linked to a product anyway.  For example, I linked to
&lt;em&gt;The Design of Everyday Things&lt;/em&gt; in &lt;a href="https://www.dannyguo.com/blog/my-seatbelt-rule-for-judgment/"&gt;this
post&lt;/a&gt;, and I would
have done so even without an affiliate option. I’ve made over $200 from that
link, which was a nice, unexpected benefit. And according to Amazon, people have
bought dozens of copies of the book through my link. That makes me happy,
considering I think it’s a fantastic book.&lt;/p&gt;
&lt;p&gt;But I may remove affiliate links eventually. &lt;a href="https://www.pragmaticengineer.com/"&gt;Gergely
Orosz&lt;/a&gt; explained why he &lt;a href="https://blog.pragmaticengineer.com/affiliates/"&gt;removed affiliate
links&lt;/a&gt; (in addition to &lt;a href="https://blog.pragmaticengineer.com/ads/"&gt;removing
ads&lt;/a&gt;), and I find his reasons
compelling.&lt;/p&gt;
&lt;h2 id="how-to-start-a-blog"&gt;How to Start a Blog&lt;a class="anchor" href="#how-to-start-a-blog"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I hope this post encourages someone to blog or share what they know in whatever
medium they prefer. When someone tells me about something interesting, I tend to
say “you should blog about this!” Few people have taken me up on that (my friend
&lt;a href="https://azeemba.com/"&gt;Azeem&lt;/a&gt; is a great exception), and the world misses out.&lt;/p&gt;
&lt;p&gt;My advice is to focus on thinking about what you’d be interested in writing
about. Setting up a blog can be fun in itself, and I understand the appeal of
treating it as a side project. Instead of using a blogging platform, I &lt;a href="https://github.com/dguo/dannyguo.com"&gt;build my
site&lt;/a&gt; with &lt;a href="https://astro.build/"&gt;Astro&lt;/a&gt;
and serve it with &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt;. But it’s the content that
really matters.  I’d rather watch &lt;a href="https://en.wikipedia.org/wiki/Breaking_Bad"&gt;Breaking
Bad&lt;/a&gt; on a tiny, 480p screen than
watch an average show on a big, 4K TV.&lt;/p&gt;
&lt;p&gt;One of my favorite blog posts is &lt;a href="https://en.wikipedia.org/wiki/Rob_Pike"&gt;Rob
Pike&lt;/a&gt;’s &lt;a href="https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html"&gt;post on his biggest surprise
when rolling out
Go&lt;/a&gt;.
Sure, the page has what I regard as a dated design, and the font size is a
little too small. But the content is &lt;em&gt;so fascinating&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;You don’t want to get hung up on hosting details, which you can always change
later. &lt;a href="https://wordpress.com/"&gt;WordPress&lt;/a&gt;, &lt;a href="https://www.blogger.com/"&gt;Blogger&lt;/a&gt;,
&lt;a href="https://medium.com/"&gt;Medium&lt;/a&gt;, &lt;a href="https://dev.to/"&gt;Dev&lt;/a&gt;,
&lt;a href="https://svbtle.com/"&gt;Svbtle&lt;/a&gt;, &lt;a href="https://bearblog.dev/"&gt;Bear&lt;/a&gt;,
&lt;a href="https://mataroa.blog/"&gt;Mataroa&lt;/a&gt;, &lt;a href="https://hashnode.com/"&gt;Hashnode&lt;/a&gt;, and
&lt;a href="https://substack.com/"&gt;Substack&lt;/a&gt; all do the job. I do think it’s worth
considering upfront if you want to have a custom domain so that you truly own
your content. But otherwise, I recommend just picking a platform and writing
about whatever you find interesting. Follow your genuine curiosity to avoid the
trend of a blog that has a first post about setting up the blog but then little
after that.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;a class="anchor" href="#conclusion"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Blogging is hard! At least it is for me. For all the reasons I’ve detailed,
blogging has been worthwhile for me, but it can take me a long time and
considerable mental energy to research, write, and edit a post. Even then, I’ve
published posts that I knew could be better with more effort.&lt;/p&gt;
&lt;p&gt;I
&lt;a href="https://github.com/dguo/dannyguo.com/commit/668d67066f0e9b8d96ea19c2526e9101914aeacd"&gt;started&lt;/a&gt;
the post you’re reading now almost a full year ago, and I have a backlog of
other drafts and ideas to finish up and actually publish. Or to just abandon
them. Having that choice is a luxury that comes with doing this purely on my own
terms.&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/why-i-blog</guid><pubDate>Thu, 06 Apr 2023 00:00:00 GMT</pubDate></item><item><title>Updating My Favicon, Courtesy of Randall Munroe</title><link>https://www.dannyguo.com/blog/updating-my-favicon-courtesy-of-randall-munroe</link><description>&lt;article&gt;
        &lt;h1&gt;Updating My Favicon, Courtesy of Randall Munroe&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2022-06-22"&gt;
                June 22, 2022
            &lt;/time&gt;
             · 
            350 words  ·  ~2 minutes to read
            
                        &lt;br&gt;I may earn commissions from purchases made through
                        affiliate links in this post.
                    
        &lt;/div&gt;

        &lt;p&gt;Since 2017, my personal website’s
&lt;a href="https://en.wikipedia.org/wiki/Favicon"&gt;favicon&lt;/a&gt; was a &lt;a href="https://en.wikipedia.org/wiki/Yin_and_yang"&gt;yin-yang
symbol&lt;/a&gt; that I added on a whim.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/sSvnSCK.jpg" alt="Old favicon"&gt;&lt;/p&gt;
&lt;p&gt;I didn’t think about it again for a long time. Until I published a post on
&lt;a href="https://www.dannyguo.com/blog/serve-videos-instead-of-gifs/"&gt;serving videos instead of
GIFs&lt;/a&gt;, and one
Reddit comment &lt;a href="https://www.reddit.com/r/programming/comments/gl7ttl/serve_videos_instead_of_gifs/fqw7lap/"&gt;helpfully pointed
out&lt;/a&gt;
how absurdly large my favicon was:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;And yet that webpage has a 170kb favicon - a 256x256 image with essentially 3
colors but stored in an uncompressed 24 bit format.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I appreciated the callout! I thought about changing my favicon to my initials or
something like that, but then I remembered a sketch that I got from &lt;a href="https://en.wikipedia.org/wiki/Randall_Munroe"&gt;Randall
Munroe&lt;/a&gt;, the author of
&lt;a href="https://xkcd.com/"&gt;&lt;em&gt;xkcd&lt;/em&gt;&lt;/a&gt; and &lt;a href="https://www.amazon.com/What-If-Scientific-Hypothetical-Questions/dp/0544272994?crid=FJWL4J94JJN5&amp;amp;keywords=randall+munroe&amp;amp;qid=1654983209&amp;amp;sprefix=randall+munroe%2Caps%2C75&amp;amp;sr=8-3&amp;amp;linkCode=ll1&amp;amp;tag=thdalo00-20&amp;amp;linkId=be65676d693ee4c0c09c8f09c58096fc&amp;amp;language=en_US&amp;amp;ref_=as_li_ss_tl"&gt;&lt;em&gt;What If?: Serious Scientific Answers to Absurd
Hypothetical
Questions&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When I was in college, he visited to give a
&lt;a href="https://lectures.princeton.edu/lectures/2011/larry-gonick-randall-munroe"&gt;talk&lt;/a&gt;.
Afterwards, I asked him to autograph a printout of
&lt;a href="https://xkcd.com/876/"&gt;#876&lt;/a&gt;, which references &lt;a href="https://en.wikipedia.org/wiki/Allegory_of_the_cave"&gt;Plato’s
Cave&lt;/a&gt; from &lt;a href="https://www.amazon.com/Republic-Plato-Allan-Bloom/dp/0465094082?crid=316HZB89FGE9H&amp;amp;keywords=republic+plato&amp;amp;qid=1654984868&amp;amp;sprefix=republic+plato%2Caps%2C76&amp;amp;sr=8-4&amp;amp;linkCode=ll1&amp;amp;tag=thdalo00-20&amp;amp;linkId=49c528f777b799c5c446689d491c84f4&amp;amp;language=en_US&amp;amp;ref_=as_li_ss_tl"&gt;&lt;em&gt;The
Republic&lt;/em&gt;&lt;/a&gt;
(I was a philosophy major). I also asked if he could draw
&lt;a href="https://en.wikipedia.org/wiki/Auguste_Rodin"&gt;Rodin&lt;/a&gt;’s &lt;a href="https://en.wikipedia.org/wiki/The_Thinker"&gt;&lt;em&gt;The
Thinker&lt;/em&gt;&lt;/a&gt;, and he graciously did it.
Here’s a scan:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/uavmB98.jpg" alt="signed xckd 876"&gt;&lt;/p&gt;
&lt;p&gt;I cropped out the sketch and used
&lt;a href="https://realfavicongenerator.net/"&gt;RealFaviconGenerator&lt;/a&gt; to generate images
from it. There are multiple ones for &lt;a href="https://css-tricks.com/favicon-quiz/"&gt;different
scenarios&lt;/a&gt;, and they range from 479 bytes
to 15 KB. Much better than the original 170 KB.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/oQgvAuL.jpg" alt="New favicon"&gt;&lt;/p&gt;
&lt;p&gt;The sketch is maybe a &lt;em&gt;bit&lt;/em&gt; too detailed for a favicon, but I love it anyway.&lt;/p&gt;
&lt;h2 id="interesting-favicons"&gt;Interesting Favicons&lt;a class="anchor" href="#interesting-favicons"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Updating my favicon made me think about the interesting things I’ve seen
regarding favicons.&lt;/p&gt;
&lt;p&gt;Gmail and Whatsapp show unread counts, and Google Calendar shows the current
date.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/M8U0Iyz.jpg" alt="Dynamic favicons"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/tommoor/tinycon"&gt;Tinycon&lt;/a&gt; is a library for showing alert
bubbles. Which inspired &lt;a href="https://github.com/lipka/piecon"&gt;Piecon&lt;/a&gt; for showing
progress pie charts.&lt;/p&gt;
&lt;p&gt;There’s also &lt;a href="https://twitter.com/davywtf/status/1119783380734836737"&gt;Tiny
Mirror&lt;/a&gt;, which turns the
favicon into a webcam video!&lt;/p&gt;
&lt;p&gt;Many browsers have added support for SVG favicons, which &lt;a href="https://css-tricks.com/svg-favicons-and-all-the-fun-things-we-can-do-with-them/"&gt;allows for things
like&lt;/a&gt;
dark mode support through the
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme"&gt;prefers-color-scheme&lt;/a&gt;
media query.&lt;/p&gt;
&lt;p&gt;Even the &lt;a href="https://thehistoryoftheweb.com/how-we-got-the-favicon/"&gt;favicon origin
story&lt;/a&gt; is interesting. A
Microsoft engineer named Bharat Shyam snuck the feature into Internet Explorer.
He waited until a junior program manager was in charge before requesting
permission to add it, knowing that a junior person would be less likely to block
it. Thanks to that bit of mischief, the internet became a little more fun.&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/updating-my-favicon-courtesy-of-randall-munroe</guid><pubDate>Wed, 22 Jun 2022 00:00:00 GMT</pubDate></item><item><title>How to Use Tasker to Block Spam Phone Calls From a Certain Area Code on Android</title><link>https://www.dannyguo.com/blog/how-to-use-tasker-to-block-spam-phone-calls-from-a-certain-area-code-on-android</link><description>&lt;article&gt;
        &lt;h1&gt;How to Use Tasker to Block Spam Phone Calls From a Certain Area Code on Android&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2022-06-04"&gt;
                June 4, 2022
            &lt;/time&gt;
             · 
            552 words  ·  ~3 minutes to read
            
        &lt;/div&gt;

        &lt;p&gt;&lt;a href="https://www.usatoday.com/story/tech/2021/02/12/robocalls-scammers-fraud-phone-calls-increase-fcc-ftc-efforts/6706727002/"&gt;Like
everyone&lt;/a&gt;,
I’ve been getting a lot of spam calls. One solution is to &lt;a href="https://www.nytimes.com/wirecutter/guides/how-to-stop-spam-calls/"&gt;block every call from
someone that isn’t in your contacts
list&lt;/a&gt;, but I
didn’t want to go that far and risk missing legitimate and important calls.&lt;/p&gt;
&lt;p&gt;I found another way to cut down on the spam. Especially in the last year, I’ve
noticed that most of the calls come from numbers with the same area code as my
phone number. I don’t live in that area code anymore, and it isn’t for a large
city that might have businesses and organizations that I want to hear from, so
the only calls that I want from that area code are from people in my contacts
list.&lt;/p&gt;
&lt;p&gt;Android and iOS don’t natively support blocking unknown callers from a certain
area code, but I’m on Android, and I use an app called
&lt;a href="https://tasker.joaoapps.com/"&gt;Tasker&lt;/a&gt; to automate things on my phone. I saw
that Tasker
&lt;a href="https://joaoapps.com/tasker-5-11-call-screening-easy-imports-pick-inputs-and-more/"&gt;added&lt;/a&gt;
a &lt;a href="https://tasker.joaoapps.com/userguide/en/help/eh_call_screened.html"&gt;call screening
feature&lt;/a&gt; in
version 5.11. &lt;a href="https://www.youtube.com/watch?v=JxwfwkeffMk"&gt;Here&lt;/a&gt; is a video
demo of the feature. Tasker can have a high learning curve, especially for
non-programmers. But it allows for fine-grained control, so I knew it’d be
possible to configure what I wanted.&lt;/p&gt;
&lt;h2 id="setting-up-tasker"&gt;Setting up Tasker&lt;a class="anchor" href="#setting-up-tasker"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I set Tasker as my default “Caller ID &amp;amp; spam app” and made a Tasker profile for
the “Call Screened” event.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/yz9682d.jpg" alt="Tasker profile"&gt;&lt;/p&gt;
&lt;p&gt;For the caller, the &lt;code&gt;C:ANY&lt;/code&gt;
&lt;a href="https://tasker.joaoapps.com/userguide/en/matching.html#caller"&gt;means&lt;/a&gt; “match
the phone number of any contact.” The &lt;code&gt;!&lt;/code&gt; in front of it means “not.” So
&lt;code&gt;!C:ANY&lt;/code&gt; matches any phone number that isn’t in my contacts list.&lt;/p&gt;
&lt;p&gt;I have two more conditions. The first is that the &lt;code&gt;%cs_incoming&lt;/code&gt; variable has to
be &lt;code&gt;true&lt;/code&gt; because I don’t need to screen outgoing calls. The second is that the
&lt;code&gt;%cs_number&lt;/code&gt; variable, which has the caller’s phone number as the value, has to
start with my own number’s area code. So the pattern to match is like &lt;code&gt;999*&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If a call meets all of these requirements, then the profile runs the task that I
set up. The task has two actions.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/wIZVgrD.jpg" alt="Tasker task"&gt;&lt;/p&gt;
&lt;p&gt;The first action is a notification that shows the phone number. Tasker lets me
set custom categories for notifications, so I gave this one a “Blocked number”
category. Then I used Android settings to &lt;a href="https://www.androidpolice.com/how-to-set-an-android-apps-notifications-to-come-in-silent/"&gt;make the category a silent
notification&lt;/a&gt;
(no sound or vibration) so that it doesn’t actually distract me. I originally
wanted a notification just to help confirm that things were working as
expected, but I realized later that I also get a great feeling of satisfaction
every time I see the notification.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/xMBRDrF.jpg" alt="Tasker notification"&gt;&lt;/p&gt;
&lt;p&gt;The second action is the actual call blocking. The action “disallows” the call,
which means that my phone won’t ring or vibrate. From the caller’s perspective,
it’ll seem like an unanswered call. For now, I’m still allowing the caller to
leave a voicemail, but in the future, I may prevent that as well by turning on
the “reject” option, which will make it seem like I manually rejected the call.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/TpSKONz.jpg" alt="Tasker screening"&gt;&lt;/p&gt;
&lt;h2 id="results"&gt;Results&lt;a class="anchor" href="#results"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This setup has worked well for me. I don’t have to bother manually rejecting
nearly as many unknown calls, and the rate of spam attempts (based on my silent
notifications) has gone down. I used to get about one or two calls a day. Now I
go several days before even getting the silent notification. Thank you, &lt;a href="https://twitter.com/joaomgcd"&gt;João
Dias&lt;/a&gt;, for continuing to develop Tasker and make
it more powerful!&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/how-to-use-tasker-to-block-spam-phone-calls-from-a-certain-area-code-on-android</guid><pubDate>Sat, 04 Jun 2022 00:00:00 GMT</pubDate></item><item><title>How to Disable 5G for a Samsung Galaxy S21 FE Phone</title><link>https://www.dannyguo.com/blog/how-to-disable-5g-for-a-samsung-galaxy-s21-fe-phone</link><description>&lt;article&gt;
        &lt;h1&gt;How to Disable 5G for a Samsung Galaxy S21 FE Phone&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
                        Updated on &lt;time datetime="2024-04-13"&gt;
                            April 13, 2024
                        &lt;/time&gt;
                         · 
                    
            Published on 
            &lt;time datetime="2022-05-23"&gt;
                May 23, 2022
            &lt;/time&gt;
            &lt;br&gt;
            433 words  ·  ~3 minutes to read
            
                        &lt;br&gt;I may earn commissions from purchases made through
                        affiliate links in this post.
                    
        &lt;/div&gt;

        &lt;p&gt;I switched to a &lt;a href="https://www.amazon.com/Samsung-Unlocked-Smartphone-Intelligent-Graphite/dp/B09BFTMQH9?crid=3GTO7RQL8WJZH&amp;amp;keywords=galaxy+s21+fe&amp;amp;qid=1653143909&amp;amp;sprefix=galaxy+s21+f%2Caps%2C150&amp;amp;sr=8-2&amp;amp;linkCode=ll1&amp;amp;tag=thdalo00-20&amp;amp;linkId=d6efde9cebf6aafabe69c73450ee7468&amp;amp;language=en_US&amp;amp;ref_=as_li_ss_tl"&gt;Samsung Galaxy S21
FE&lt;/a&gt;
phone, and one of the first things I did was to disable
&lt;a href="https://en.wikipedia.org/wiki/5G"&gt;5G&lt;/a&gt; because my understanding is that it can
cause a noticeable decrease in battery life, and I’ve never felt a need for
speeds faster than what &lt;a href="https://en.wikipedia.org/wiki/LTE_(telecommunication)"&gt;4G
LTE&lt;/a&gt; provides anyway. I
use an app called
&lt;a href="https://play.google.com/store/apps/details?id=com.parizene.netmonitor"&gt;Netmonitor&lt;/a&gt;
to disable 5G. Previously, I used &lt;a href="https://play.google.com/store/apps/details?id=com.ray.samsungbandselection"&gt;Samsung Band
Selection&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Samsung’s own website has a &lt;a href="https://www.samsung.com/us/support/troubleshooting/TSG01201462/"&gt;page on the battery drain
issue&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;At this time, the 5G networks are only used for data connections and are not
yet capable of carrying phone calls and messages. Your phone will need to
maintain a connection to the 3G or LTE network in addition to the 5G network
so that phone calls, text messages, and data will be delivered consistently.&lt;/p&gt;
&lt;p&gt;Because your phone is connected to multiple networks simultaneously, the
battery will drain faster than one would typically expect, and the phone may
get warmer than when solely on 3G or LTE.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There is
&lt;a href="https://www.wsj.com/articles/5g-drains-your-iphones-battery-heres-what-you-can-do-about-it-11647716969"&gt;evidence&lt;/a&gt;
of this issue for iPhones as well.&lt;/p&gt;
&lt;p&gt;I originally expected to turn 5G off through the phone’s settings, but I wasn’t
able to because the “Network mode”
&lt;a href="https://www.digitaltrends.com/mobile/how-to-turn-off-5g-on-a-samsung-phone/"&gt;setting&lt;/a&gt;
that I’ve seen on my older devices wasn’t there. It seems like Samsung doesn’t
want people to be able to easily change the network mode anymore.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/6MjOaPc.jpg" alt="Mobile network settings"&gt;&lt;/p&gt;
&lt;h2 id="netmonitor"&gt;Netmonitor&lt;a class="anchor" href="#netmonitor"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So now I use
&lt;a href="https://play.google.com/store/apps/details?id=com.parizene.netmonitor"&gt;Netmonitor&lt;/a&gt;
to disable 5G. The service menu does give this warning about using only LTE.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/qGPNalm.jpg" alt="Netmonitor warning about using only LTE mode"&gt;&lt;/p&gt;
&lt;p&gt;But I went ahead into phone info.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/kPdP0Yp.jpg" alt="Netmonitor phone info"&gt;&lt;/p&gt;
&lt;p&gt;The NR in “Set Preferred Network Type” stands for &lt;a href="https://en.wikipedia.org/wiki/5G_NR"&gt;New
Radio&lt;/a&gt; and refers to 5G. I changed the
setting to “LTE/WCDMA”, and that has kept my phone on 4G.&lt;/p&gt;
&lt;h2 id="samsung-band-selection"&gt;Samsung Band Selection&lt;a class="anchor" href="#samsung-band-selection"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before Netmonitor, I used the &lt;a href="https://play.google.com/store/apps/details?id=com.ray.samsungbandselection"&gt;Samsung Band
Selection&lt;/a&gt;
app. But I eventually got a message saying:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Workaround Needed&lt;/p&gt;
&lt;p&gt;In June of 2022, Samsung released a firmware update which blocks public access
to the Band Selection screen - unfortunately, your phone is affected, which
prevents this app from launching the Band Selection screen directly. However,
there are some workarounds available. Like the original solution though, the
workarounds aren’t guaranteed to last forever sincer Samsung can revoke them
at any point in time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The message then links to &lt;a href="https://www.reddit.com/r/samsung/comments/vc4yqr/psa_samsung_has_removed_the_band_selection_screen/"&gt;this Reddit
post&lt;/a&gt;
for workarounds. I didn’t try any of them because &lt;a href="https://www.reddit.com/r/samsung/comments/vc4yqr/comment/jpypxr6/"&gt;one of the
comments&lt;/a&gt;
suggested Netmonitor instead. But for posterity, here is how I used Samsung Band
Selection:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/h16FP4w.jpg" alt="Samsung Band Selection app"&gt;&lt;/p&gt;
&lt;p&gt;Instead of selecting individual bands, I went into “More Network Settings” and
saw the “Preferred network type” setting.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/bzwvawz.jpg" alt="Extra mobile network settings"&gt;&lt;/p&gt;
&lt;p&gt;I changed it from 5G to LTE.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/j3caepW.jpg" alt="Disabling 5G"&gt;&lt;/p&gt;
&lt;p&gt;And from then on, I only ever saw 4G in the network status.&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/how-to-disable-5g-for-a-samsung-galaxy-s21-fe-phone</guid><pubDate>Sat, 13 Apr 2024 00:00:00 GMT</pubDate></item><item><title>How to Use Newlines in an Environment Variable File for Docker</title><link>https://www.dannyguo.com/blog/how-to-use-newlines-in-an-environment-variable-file-for-docker</link><description>&lt;article&gt;
        &lt;h1&gt;How to Use Newlines in an Environment Variable File for Docker&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2022-04-19"&gt;
                April 19, 2022
            &lt;/time&gt;
             · 
            171 words  ·  ~1 minute to read
            
        &lt;/div&gt;

        &lt;p&gt;When you run a Docker container, you can &lt;a href="https://docs.docker.com/engine/reference/commandline/run/#set-environment-variables--e---env---env-file"&gt;pass environment
variables&lt;/a&gt;
to the &lt;a href="https://docs.docker.com/engine/reference/commandline/run/"&gt;run command&lt;/a&gt;.
However, the &lt;code&gt;--env-file&lt;/code&gt; option has a limitation in that it doesn’t handle
&lt;a href="https://en.wikipedia.org/wiki/Newline"&gt;newline characters&lt;/a&gt;. See this &lt;a href="https://github.com/moby/moby/issues/32140"&gt;GitHub
issue&lt;/a&gt; and this &lt;a href="https://github.com/moby/moby/issues/28617#issuecomment-671906320"&gt;comment on a
separate
issue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This can be problematic if you need newlines for something like a public or
private key for &lt;a href="https://en.wikipedia.org/wiki/Public-key_cryptography"&gt;public-key
cryptography&lt;/a&gt;. I tried
adding double quotes around the value and using &lt;code&gt;\n&lt;/code&gt; for the newlines:&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;FOO&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;bar&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;PRIVATE_KEY&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"-----BEGIN PRIVATE KEY-----\nFOO\nBAR\nBAZ\n-----END PRIVATE KEY-----"&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But that didn’t work, using single quotes didn’t work, and actually breaking the
value across multiple lines in my &lt;code&gt;.env&lt;/code&gt; file didn’t work either. As a
workaround, I found that I could detect the situation and modify the value in
code. For a &lt;a href="https://nodejs.org"&gt;Node.js&lt;/a&gt; server, I did this:&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; PRIVATE_KEY &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; process.env.PRIVATE_KEY;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (PRIVATE_KEY?.&lt;/span&gt;&lt;span&gt;startsWith&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;`"`&lt;/span&gt;&lt;span&gt;)) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    PRIVATE_KEY &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        PRIVATE_KEY.&lt;/span&gt;&lt;span&gt;replaceAll&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;`"`&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;``&lt;/span&gt;&lt;span&gt;).&lt;/span&gt;&lt;span&gt;replaceAll&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;\\&lt;/span&gt;&lt;span&gt;n`&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So I removed the double quotes and replaced every occurrence of a literal
backslash (the &lt;code&gt;\\&lt;/code&gt; is necesssary for
&lt;a href="https://en.wikipedia.org/wiki/Escape_character"&gt;escaping&lt;/a&gt; the backslash)
followed by a &lt;code&gt;n&lt;/code&gt; with a newline character. This worked for my use case.&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/how-to-use-newlines-in-an-environment-variable-file-for-docker</guid><pubDate>Tue, 19 Apr 2022 00:00:00 GMT</pubDate></item><item><title>How to Break and Continue in Nested Loops in JavaScript</title><link>https://www.dannyguo.com/blog/how-to-break-and-continue-in-nested-loops-in-javascript</link><description>&lt;article&gt;
        &lt;h1&gt;How to Break and Continue in Nested Loops in JavaScript&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2022-04-17"&gt;
                April 17, 2022
            &lt;/time&gt;
             · 
            224 words  ·  ~2 minutes to read
            
        &lt;/div&gt;

        &lt;p&gt;The easiest way to &lt;code&gt;break&lt;/code&gt; out of nested loops in JavaScript is to use
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label"&gt;labels&lt;/a&gt;.
By labeling a loop, you can use it in a &lt;code&gt;break&lt;/code&gt; statement to break out of not
only the loop you’re in but also all the way out of the specified loop.&lt;/p&gt;
&lt;p&gt;You can try out the examples in this post for yourself with &lt;a href="https://replit.com/@dyguo/how-to-break-and-continue-in-nested-loops-in-javascript"&gt;this
Replit&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; chunks &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    [&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;],&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    [&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;],&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    [&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;];&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;chunkLoop: &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; chunk &lt;/span&gt;&lt;span&gt;of&lt;/span&gt;&lt;span&gt; chunks) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; number &lt;/span&gt;&lt;span&gt;of&lt;/span&gt;&lt;span&gt; chunk) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (number &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt; chunkLoop;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        console.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(number);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;/*&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;Output:&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;3&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;4&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output stops at 4 because when the code reaches 5, the code breaks all the
way out of the outer loop (&lt;code&gt;chunkLoop&lt;/code&gt;).&lt;/p&gt;
&lt;h2 id="continue"&gt;Continue&lt;a class="anchor" href="#continue"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can also use &lt;code&gt;continue&lt;/code&gt; with a label if you want to skip to the next
iteration of an outer loop.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; chunks &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    [&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;],&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    [&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;],&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    [&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;];&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;chunkLoop: &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; chunk &lt;/span&gt;&lt;span&gt;of&lt;/span&gt;&lt;span&gt; chunks) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; number &lt;/span&gt;&lt;span&gt;of&lt;/span&gt;&lt;span&gt; chunk) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (number &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt; chunkLoop;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        console.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(number);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;/*&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;Output:&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;3&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;4&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;7&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;8&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;9&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;5 and 6 aren’t in the output because when the code reaches 5, the code continues
on to the next iteration of the chunk loop, which is the &lt;code&gt;[7, 8, 9]&lt;/code&gt; chunk.&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/how-to-break-and-continue-in-nested-loops-in-javascript</guid><pubDate>Sun, 17 Apr 2022 00:00:00 GMT</pubDate></item><item><title>How to Check if a JavaScript String Begins or Ends With a String</title><link>https://www.dannyguo.com/blog/how-to-check-if-a-javascript-string-begins-or-ends-with-a-string</link><description>&lt;article&gt;
        &lt;h1&gt;How to Check if a JavaScript String Begins or Ends With a String&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2022-04-07"&gt;
                April 7, 2022
            &lt;/time&gt;
             · 
            275 words  ·  ~2 minutes to read
            
        &lt;/div&gt;

        &lt;p&gt;To check if a JavaScript string begins with a particular string, use the
&lt;code&gt;startsWith&lt;/code&gt; method.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; testString &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"Foobar"&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;// evaluates to true&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;testString.&lt;/span&gt;&lt;span&gt;startsWith&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"Foo"&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;// evaluates to false&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;testString.&lt;/span&gt;&lt;span&gt;startsWith&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"bar"&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;// evaluates to false&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;testString.&lt;/span&gt;&lt;span&gt;startsWith&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"Foobarbaz"&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;// evaluates to false (the check is case-sensitive)&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;testString.&lt;/span&gt;&lt;span&gt;startsWith&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"foo"&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similarly, to check if a JavaScript string ends with a particular string, use
the &lt;code&gt;endsWith&lt;/code&gt; method.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; testString &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"Foobar"&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;// evaluates to true&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;testString.&lt;/span&gt;&lt;span&gt;endsWith&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"bar"&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;// evaluates to false&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;testString.&lt;/span&gt;&lt;span&gt;endsWith&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"baz"&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;// evaluates to false (the check is case-sensitive)&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;testString.&lt;/span&gt;&lt;span&gt;startsWith&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"BAR"&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="advanced-usage"&gt;Advanced Usage&lt;a class="anchor" href="#advanced-usage"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;startsWith&lt;/code&gt; method takes an optional starting index as a second parameter.
The index is &lt;a href="https://en.wikipedia.org/wiki/Zero-based_numbering"&gt;zero-based&lt;/a&gt;,
so if you want to start the check at the fourth character in the string, you
would pass in a value of 3.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; testString &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"foobar"&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;// evaluates to false&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;testString.&lt;/span&gt;&lt;span&gt;startsWith&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"bar"&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;// this is equivalent&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;testString.&lt;/span&gt;&lt;span&gt;startsWith&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"bar"&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;// evaluates to true&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;testString.&lt;/span&gt;&lt;span&gt;startsWith&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"bar"&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;endsWith&lt;/code&gt; method takes an optional length as a second parameter. This
limits the length of the string that you are searching.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; testString &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"foobar"&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;// evaluates to false&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;testString.&lt;/span&gt;&lt;span&gt;endsWith&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"oo"&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;// evaluates to true because it's equivalent to "foo".endsWith("oo")&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;testString.&lt;/span&gt;&lt;span&gt;endsWith&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"oo"&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="alternatives"&gt;Alternatives&lt;a class="anchor" href="#alternatives"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;startsWith&lt;/code&gt; and &lt;code&gt;endsWith&lt;/code&gt; were part of the &lt;a href="https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_%E2%80%93_ECMAScript_2015"&gt;ECMAScript
2015&lt;/a&gt;
specification, so all modern browsers &lt;a href="https://caniuse.com/mdn-javascript_builtins_string_startswith"&gt;support the
methods&lt;/a&gt;. If you
can’t use them for whatever reason, such as needing to support Internet
Explorer, one option is to use a
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions"&gt;regex&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To replicate &lt;code&gt;startsWith&lt;/code&gt;, you can use the &lt;code&gt;^&lt;/code&gt; character to match the beginning
of the input.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; testString &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"foobar"&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;// evaluates to true&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;^&lt;/span&gt;&lt;span&gt;foo/&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;(testString);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To replicate &lt;code&gt;endsWith&lt;/code&gt;, you can use the &lt;code&gt;$&lt;/code&gt; character to match the end
of the input.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; testString &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"foobar"&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;// evaluates to true&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;/bar&lt;/span&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;test&lt;/span&gt;&lt;span&gt;(testString);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternatively, you can use &lt;code&gt;lastIndexOf&lt;/code&gt; and &lt;code&gt;indexOf&lt;/code&gt; to replicate the methods,
as &lt;a href="https://stackoverflow.com/a/36876507/1481479"&gt;detailed here&lt;/a&gt;.&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/how-to-check-if-a-javascript-string-begins-or-ends-with-a-string</guid><pubDate>Thu, 07 Apr 2022 00:00:00 GMT</pubDate></item><item><title>My Seatbelt Rule for Judgment</title><link>https://www.dannyguo.com/blog/my-seatbelt-rule-for-judgment</link><description>&lt;article&gt;
        &lt;h1&gt;My Seatbelt Rule for Judgment&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2022-02-06"&gt;
                February 6, 2022
            &lt;/time&gt;
             · 
            423 words  ·  ~3 minutes to read
            
                        &lt;br&gt;I may earn commissions from purchases made through
                        affiliate links in this post.
                    
        &lt;/div&gt;

        &lt;p&gt;One of my formative childhood lessons came when I was playing in the garage one
day. I went into my mom’s car and put the seatbelt on (probably to pretend I was
flying a plane). I realized at one point that I could still lean pretty far
forward. Far enough that my head could touch the dashboard. How ridiculous!
What’s the point of the seatbelt if it doesn’t actually stop me from going too
far? I reveled in my discovery that seatbelts were useless.&lt;/p&gt;
&lt;p&gt;A while later, I pulled on the seatbelt quickly (a lot happens in imaginary
aerial &lt;a href="https://en.wikipedia.org/wiki/Dogfight"&gt;dogfights&lt;/a&gt;), and the seatbelt
immediately stopped. An overwhelming feeling of stupidity hit me almost as fast.
Nine-year-old me was not in fact smarter than Toyota engineers.&lt;/p&gt;
&lt;p&gt;For anyone who doesn’t know what I’m talking about, seatbelts have dynamic
behavior. If you pull on them slowly, they’ll extend to the full distance,
allowing you to still have some range of motion. If you pull on them quickly,
which is what would happen in a car crash, they’ll stop quickly. If you’re
curious how seatbelts work, I recommend watching &lt;a href="https://www.youtube.com/watch?v=uRaU1HMJyCo"&gt;this YouTube
video&lt;/a&gt; and reading &lt;a href="https://howcarpartswork.blogspot.com/2016/05/seat-belt-working.html"&gt;this
article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now whenever I’m tempted to judge something as stupidly designed, I try to check
myself and remember my seatbelt experience. My rule of thumb is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;My willingness to judge something should be proportional to how much I know
about it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sometimes things really are poorly designed (check out &lt;a href="https://www.amazon.com/Design-Everyday-Things-Revised-Expanded/dp/0465050654?&amp;amp;linkCode=ll1&amp;amp;tag=thdalo00-20&amp;amp;linkId=073e8798f7afc5fba508aa95f8813219&amp;amp;language=en_US&amp;amp;ref_=as_li_ss_tl"&gt;The Design of Everyday
Things&lt;/a&gt;),
but I should give more benefit of the doubt when I don’t know much about the
subject. There can be so many competing and nonobvious trade-offs when it comes
to designing something. And an aspect of something’s design can be a positive in
one context and a negative in another.&lt;/p&gt;
&lt;p&gt;In the seatbelt case, the ingenuity of engineers has managed to account for
multiple situations. I just didn’t realize it at first! And even now that I am
aware of it, it makes me think of what else I don’t know about seatbelts. How
much complexity do these mechanisms add for manufacturing? How much more
expensive do they make a car? Which aspects are legally required? And so on.&lt;/p&gt;
&lt;p&gt;My rule of thumb also extends beyond product design. It reminds me to be
hesitant to judge someone that I don’t know personally, a person’s actions when
I don’t know the context (see the &lt;a href="https://en.wikipedia.org/wiki/Fundamental_attribution_error"&gt;fundamental attribution
error&lt;/a&gt;), or a
system that seems pointless at first glance (see &lt;a href="https://fs.blog/chestertons-fence/"&gt;Chesterton’s
Fence&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;There’s &lt;em&gt;so much&lt;/em&gt; &lt;a href="https://www.dannyguo.com/blog/what-i-learned-by-relearning-html/"&gt;I don’t
know&lt;/a&gt;. Which
means there’s so much I shouldn’t judge without learning more.&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/my-seatbelt-rule-for-judgment</guid><pubDate>Sun, 06 Feb 2022 00:00:00 GMT</pubDate></item><item><title>How to Use a Samsung Galaxy Watch4 as a Heart Rate Monitor for a Peloton Bike</title><link>https://www.dannyguo.com/blog/how-to-use-a-samsung-galaxy-watch4-as-a-heart-rate-monitor-for-a-peloton-bike</link><description>&lt;article&gt;
        &lt;h1&gt;How to Use a Samsung Galaxy Watch4 as a Heart Rate Monitor for a Peloton Bike&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
                        Updated on &lt;time datetime="2024-04-04"&gt;
                            April 4, 2024
                        &lt;/time&gt;
                         · 
                    
            Published on 
            &lt;time datetime="2022-01-26"&gt;
                January 26, 2022
            &lt;/time&gt;
            &lt;br&gt;
            519 words  ·  ~3 minutes to read
            
                        &lt;br&gt;I may earn commissions from purchases made through
                        affiliate links in this post.
                    
        &lt;/div&gt;

        &lt;p&gt;To use a &lt;a href="https://www.amazon.com/Samsung-Electronics-Smartwatch-Detection-Bluetooth/dp/B096BJLZZM?&amp;amp;linkCode=ll1&amp;amp;tag=thdalo00-20&amp;amp;linkId=edd3ac30f2add8f2a278045edc1c8a84&amp;amp;language=en_US&amp;amp;ref_=as_li_ss_tl"&gt;Samsung Galaxy
Watch4&lt;/a&gt;
as a heart rate monitor for a &lt;a href="https://www.onepeloton.com/bikes"&gt;Peloton bike&lt;/a&gt;,
install the &lt;a href="https://play.google.com/store/apps/details?id=com.onepeloton.callisto"&gt;Peloton app for
WearOS&lt;/a&gt;.
Another option is to install the free &lt;a href="https://play.google.com/store/apps/details?id=lukas.the.coder.heartforbluetooth"&gt;Heart for
Bluetooth&lt;/a&gt;
app. Beyond seeing your heart rate in real time, syncing your heart rate also
allows you to use Peloton’s &lt;a href="https://blog.onepeloton.com/strive-score/"&gt;Strive
Score&lt;/a&gt; feature.&lt;/p&gt;
&lt;h2 id="peloton"&gt;Peloton&lt;a class="anchor" href="#peloton"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Peloton &lt;a href="https://www.onepeloton.com/blog/android-watch-app/"&gt;released an app for
WearOS&lt;/a&gt; on April 4, 2023.
The app lets you &lt;a href="https://support.onepeloton.com/s/article/11060651868692-WearOS-App-Tracking"&gt;use your watch as a heart rate
monitor&lt;/a&gt;.
But if you have any problems with the Peloton app or if you  want to send your
heart rate to a non-Peloton device, you can try Heart for Bluetooth instead.&lt;/p&gt;
&lt;h2 id="heart-for-bluetooth"&gt;Heart for Bluetooth&lt;a class="anchor" href="#heart-for-bluetooth"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First &lt;a href="https://support.onepeloton.com/hc/en-us/articles/203418965-Pairing-Bluetooth-Headphones"&gt;pair your
watch&lt;/a&gt;
to your bike using Bluetooth.&lt;/p&gt;
&lt;p&gt;Then open the Heart for Bluetooth app, and your bike should connect and pick up
your heart rate. In my experience, it can be finicky to get this to work in
subsequent sessions. After some trial and error, the most reliable method that
I’ve found is to do the following.&lt;/p&gt;
&lt;p&gt;Turn on the Peloton, but &lt;em&gt;don’t go into a class yet.&lt;/em&gt; Now open the app on your
watch.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://imgur.com/eE0iGYV.png" alt="Screenshot of the app waiting for the heart rate"&gt;&lt;/p&gt;
&lt;p&gt;It takes a few seconds to pick up your heart rate. Wait for it to finish.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://imgur.com/BK4e6ni.png" alt="Screenshot of the app with the heart rate"&gt;&lt;/p&gt;
&lt;p&gt;In the meantime, you should see a “connecting” message on your bike.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://imgur.com/K713rap.jpg" alt="Screenshot of the Peloton connecting message"&gt;&lt;/p&gt;
&lt;p&gt;Next, you might see a “couldn’t connect” message.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://imgur.com/BxVgnye.jpg" alt="Screenshot of the Peloton couldn't connect message"&gt;&lt;/p&gt;
&lt;p&gt;If this happens, press the refresh button in the bottom right of the app to
restart Bluetooth advertising. In a few seconds, the bike should try to connect
again, and then you should see a “connected” message.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://imgur.com/HXxHTRd.jpg" alt="Screenshot of the Peloton connected message"&gt;&lt;/p&gt;
&lt;p&gt;There should be a heart symbol in the top right.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://imgur.com/PBQG721.jpg" alt="Screenshot of the Peloton heart symbol"&gt;&lt;/p&gt;
&lt;p&gt;Now you can start a class, and you should see your heart rate!&lt;/p&gt;
&lt;p&gt;If you frequently get connection failures, try updating your watch to the latest
version. The connection failures largely went away for me after an &lt;a href="https://www.xda-developers.com/galaxy-watch-4-update-samsung-health-improvements-march-patch/"&gt;April 2022
update&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have also experienced an issue where the heart rate updates would stop in the
middle of the ride, so the heart rate on the bike would freeze at a particular
number. At first, I was able to avoid the issue by turning on my watch’s always
on display while I ride. I later noticed that the Heart for Bluetooth
description has a fix for this issue. You need to go into the Galaxy Wearable
app, go to the watch settings, go to the list of apps, go to Heart for
Bluetooth, and turn on “Allow background activity.”&lt;/p&gt;
&lt;p&gt;A final tip is that when you’re done with your ride, you can manually stop the
Heart for Bluetooth app by pressing the flag button in the middle left. This
lets you avoid draining your battery unnecessarily. You can also rely on the
app’s timeout feature, which will end the session automatically after the set
amount of time ends.&lt;/p&gt;
&lt;h2 id="apple-watch"&gt;Apple Watch&lt;a class="anchor" href="#apple-watch"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you have an Apple Watch and a Bike+, syncing your heart rate is easy because
Bike+ &lt;a href="https://support.onepeloton.com/s/article/360048773312-Apple-GymKit-On-The-Peloton-BikePlus"&gt;supports
GymKit&lt;/a&gt;.
If you have a regular Bike, you can try using the
&lt;a href="https://www.heartcast.app/"&gt;HeartCast&lt;/a&gt; app.&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/how-to-use-a-samsung-galaxy-watch4-as-a-heart-rate-monitor-for-a-peloton-bike</guid><pubDate>Thu, 04 Apr 2024 00:00:00 GMT</pubDate></item><item><title>How to Get a Free S/MIME Certificate</title><link>https://www.dannyguo.com/blog/how-to-get-a-free-s-mime-certificate</link><description>&lt;article&gt;
        &lt;h1&gt;How to Get a Free S/MIME Certificate&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2022-01-20"&gt;
                January 20, 2022
            &lt;/time&gt;
             · 
            397 words  ·  ~2 minutes to read
            
        &lt;/div&gt;

        &lt;p&gt;I recently needed a &lt;a href="https://en.wikipedia.org/wiki/S/MIME"&gt;S/MIME&lt;/a&gt; certificate
to fulfill someone’s security requirement. If you’re willing to pay,
&lt;a href="https://sectigo.com/ssl-certificates-tls/email-smime-certificate"&gt;Sectigo&lt;/a&gt;
seems like a good, affordable option. I didn’t actually need to use mine for
email, so I looked for a free option.&lt;/p&gt;
&lt;p&gt;I first checked out &lt;a href="https://letsencrypt.org/"&gt;Let’s Encrypt&lt;/a&gt;, but they &lt;a href="https://community.letsencrypt.org/t/s-mime-certificates/153"&gt;don’t
issue S/MIME
certificates&lt;/a&gt;. I
also found &lt;a href="https://www.dalesandro.net/create-self-signed-smime-certificates/"&gt;instructions for generating self-signed
certificates&lt;/a&gt;,
but I needed mine to come from an external &lt;a href="https://en.wikipedia.org/wiki/Certificate_authority"&gt;certificate
authority&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.actalis.com/s-mime-certificates.aspx"&gt;Actalis&lt;/a&gt; was the only free
provider that I could find. You can request a certificate from them using &lt;a href="https://extrassl.actalis.it/portal/uapub/freemail?lang=en"&gt;this
form&lt;/a&gt;, and the
certificate lasts for one year. Actalis does generate the private key, so that
may be unacceptable depending on your situation.&lt;/p&gt;
&lt;p&gt;I had never heard of Actalis before, so I did some due diligence and found them
on the &lt;a href="https://helpx.adobe.com/acrobat/kb/approved-trust-list1.html"&gt;Adobe Approved Trust
List&lt;/a&gt; and on
Google’s &lt;a href="https://support.google.com/a/answer/7448393"&gt;list of CA certificates&lt;/a&gt;
that are trusted by Gmail for S/MIME.&lt;/p&gt;
&lt;h2 id="how-it-works"&gt;How It Works&lt;a class="anchor" href="#how-it-works"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First you submit your email address to get a verification code. You’ll get an
email like:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dear customer, in order to proceed with the issuance of the certificate you
have to confirm the validity of the specified e-mail address.&lt;/p&gt;
&lt;p&gt;Please enter the following verification code in the ”&lt;strong&gt;Verification Code&lt;/strong&gt;”
field:&lt;/p&gt;
&lt;p&gt;&amp;lt;code&amp;gt;&lt;/p&gt;
&lt;p&gt;and than continue with the other steps in the request page.&lt;/p&gt;
&lt;p&gt;The certificate will not be issued in the absence of this operation.&lt;/p&gt;
&lt;p&gt;Thank you for choosing our services.&lt;/p&gt;
&lt;p&gt;Best regards.&lt;/p&gt;
&lt;p&gt;Actalis S.p.A.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After you submit the code, Actalis will display a password that you should save.
They’ll also send you a second email like:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dear Customer,&lt;/p&gt;
&lt;p&gt;attached to this email you will find the S/MIME certificate you have
requested.&lt;/p&gt;
&lt;p&gt;Please note that to install and use the certificate, you must provide the
password that was shown at the end of the procedure.&lt;/p&gt;
&lt;p&gt;To manage the certificate status (suspend / reactivate or revoke) you can
login to the following website:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://extrassl.actalis.it/portal/"&gt;https://extrassl.actalis.it/portal/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Using the following credentials:&lt;/p&gt;
&lt;p&gt;User Code:     &amp;lt;email address&amp;gt; (to be included in the Tax Code field)&lt;/p&gt;
&lt;p&gt;Private Personal Code (CRP):     &amp;lt;code&amp;gt;&lt;/p&gt;
&lt;p&gt;Thank you for choosing our services.&lt;/p&gt;
&lt;p&gt;Best regards.&lt;/p&gt;
&lt;p&gt;Actalis S.p.A.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The email will have an attached ZIP file containing a &lt;a href="https://en.wikipedia.org/wiki/PKCS_12"&gt;PKCS
#12&lt;/a&gt; file with a name like
&lt;code&gt;PKCS12_Credential_&amp;lt;email address&amp;gt;.pfx&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can
&lt;a href="https://tecadmin.net/extract-private-key-and-certificate-files-from-pfx-file/"&gt;extract&lt;/a&gt;
the public certificate using &lt;a href="https://www.openssl.org/"&gt;OpenSSL&lt;/a&gt;. This command
should prompt you for the password that the Actalis website provided.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;openssl&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;pkcs12&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;-in&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;PKCS12_Credential_&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;email&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;addres&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;.pfx&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;-nokeys&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;-out&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;certificate.pem&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;certificate.pem&lt;/code&gt; will contain the &lt;a href="https://en.wikipedia.org/wiki/Chain_of_trust"&gt;certificate
chain&lt;/a&gt;: your public certificate,
an intermediate certificate, and the Actalis root certificate.&lt;/p&gt;
&lt;p&gt;Run this command to extract the private key as &lt;code&gt;private-key.pem&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;openssl&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;pkcs12&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;-in&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;PKCS12_Credential_&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;email&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;addres&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;.pfx&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;-nocerts&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;-nodes&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;-out&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;private-key.pem&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/how-to-get-a-free-s-mime-certificate</guid><pubDate>Thu, 20 Jan 2022 00:00:00 GMT</pubDate></item><item><title>Automating My Air Conditioner</title><link>https://www.dannyguo.com/blog/automating-my-air-conditioner</link><description>&lt;article&gt;
        &lt;h1&gt;Automating My Air Conditioner&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2021-10-09"&gt;
                October 9, 2021
            &lt;/time&gt;
             · 
            488 words  ·  ~3 minutes to read
            
                        &lt;br&gt;I may earn commissions from purchases made through
                        affiliate links in this post.
                    
        &lt;/div&gt;

        &lt;p&gt;I have a &lt;a href="https://www.amazon.com/FRIGIDAIRE-Window-Mounted-Mini-Compact-Conditioner-Mechanical/dp/B07RGM11L5?dchild=1&amp;amp;keywords=FFRA051WAE&amp;amp;qid=1624627381&amp;amp;sr=8-1&amp;amp;linkCode=ll1&amp;amp;tag=thdalo00-20&amp;amp;linkId=d0fafe5ee30721cc59f340ab0f51e65c&amp;amp;language=en_US&amp;amp;ref_=as_li_ss_tl"&gt;dumb window air
conditioner&lt;/a&gt;
in my bedroom. It’s dumb in the sense that it doesn’t have a built-in
thermometer, so it’s unable to maintain a constant temperature.&lt;/p&gt;
&lt;p&gt;Edit: Someone helpfully &lt;a href="https://news.ycombinator.com/item?id=28813747"&gt;pointed
out&lt;/a&gt; that my unit &lt;em&gt;does&lt;/em&gt; have the
ability to self-regulate. Looking at some customer reviews, I do see some
complaints that it doesn’t work very well on this model. But still, I should
have read the manual instead of assuming that the top knob is just a static
control. My bad!&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/HFMgHWV.jpg" alt="Frigidiare air conditioner controls"&gt;&lt;/p&gt;
&lt;p&gt;If I leave it on overnight, it eventually makes the room too cold. I decided to
automate it using an air quality monitor and a smart plug.&lt;/p&gt;
&lt;h2 id="air-quality-monitor"&gt;Air Quality Monitor&lt;a class="anchor" href="#air-quality-monitor"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Last year, I watched David Heinemeier Hansson’s &lt;a href="https://www.youtube.com/watch?v=MRqh8oLY7Ik"&gt;talk on indoor air
quality&lt;/a&gt; and bought an &lt;a href="https://www.amazon.com/Awair-Element-Indoor-Quality-Monitor/dp/B082ZF4H37?dchild=1&amp;amp;keywords=awair&amp;amp;qid=1624626960&amp;amp;sr=8-2&amp;amp;linkCode=ll1&amp;amp;tag=thdalo00-20&amp;amp;linkId=34fc6a3e4ccbe8f3e5beb50b77c2c7a6&amp;amp;language=en_US&amp;amp;ref_=as_li_ss_tl"&gt;Awair
Element&lt;/a&gt;
air quality monitor on &lt;a href="https://twitter.com/search?q=%40dhh%20awair&amp;amp;src=typed_query"&gt;his
recommendation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/PxHsZbh.jpg" alt="Awair Element"&gt;&lt;/p&gt;
&lt;p&gt;The Element
&lt;a href="https://support.getawair.com/hc/en-us/articles/360039242373-Air-Quality-Factors-Measured-By-Awair-Element"&gt;monitors&lt;/a&gt;
temperature, humidity, carbon dioxide, volatile organic compounds (VOC), and
fine dust levels (PM2.5). Awair &lt;a href="https://docs.developer.getawair.com/"&gt;provides an official
API&lt;/a&gt;, which makes it easy to pull the
data. I did some &lt;a href="https://americanexpress.io/yak-shaving/"&gt;yak shaving&lt;/a&gt; and
wrote a &lt;a href="https://github.com/dguo/awair-js"&gt;JavaScript client&lt;/a&gt; for the API.&lt;/p&gt;
&lt;p&gt;I run some personal software on a &lt;a href="https://www.vultr.com/?ref=8946830-8H"&gt;Vultr
VPS&lt;/a&gt;, so I added a
&lt;a href="https://en.wikipedia.org/wiki/Cron"&gt;cron&lt;/a&gt; job to query the API for the current
air quality metrics every 10 minutes.&lt;/p&gt;
&lt;h2 id="smart-plug"&gt;Smart Plug&lt;a class="anchor" href="#smart-plug"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Next, I had to figure out how to turn the air conditioner on and off. I
investigated smart plugs but didn’t find any with APIs that are intended for
public use.&lt;/p&gt;
&lt;p&gt;Most of the plugs integrated with voice assistants like Alexa and Google Home.
However, I couldn’t find APIs for the voice assistants either. Voice control and
the respective mobile apps seemed like the only ways to interact with them.&lt;/p&gt;
&lt;p&gt;I ended up buying a &lt;a href="https://www.amazon.com/gp/product/B07B8W2KHZ?ie=UTF8&amp;amp;psc=1&amp;amp;linkCode=ll1&amp;amp;tag=thdalo00-20&amp;amp;linkId=4efab939c1bf19091d95a7bc89c0f0db&amp;amp;language=en_US&amp;amp;ref_=as_li_ss_tl"&gt;Kasa smart
plug&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/tCBQH0u.jpg" alt="Kasa smart plug"&gt;&lt;/p&gt;
&lt;p&gt;Kasa doesn’t provide a documented API, but other people have reverse engineered
how Kasa’s mobile apps work, so I can use &lt;a href="https://github.com/konsumer/kasa_control"&gt;this Node.js
package&lt;/a&gt; to control my plug remotely.
Thanks to this package, it was easy to get things working.&lt;/p&gt;
&lt;h2 id="results"&gt;Results&lt;a class="anchor" href="#results"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before going to sleep, I turn my air conditioner on to the low setting. Through
the night, my VPS cron job checks the current temperature every 10 minutes. If
the temperature is above 75°F, the job turns the smart plug on. If the
temperature is under 73°F, the job turns the smart plug off.&lt;/p&gt;
&lt;p&gt;This setup has worked well for me for the past summer. After the first night, it
was very satisfying to check the Awair app and see that the temperature bounced
between the two thresholds.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/jmXDqdv.jpg" alt="Awair app screenshot"&gt;&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;a class="anchor" href="#conclusion"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It would have been much easier to spend a little more money in the first place
to buy an air conditioner that has a built-in thermometer.&lt;/p&gt;
&lt;p&gt;I learned later that I also could have used &lt;a href="https://ifttt.com/"&gt;IFTTT&lt;/a&gt;, which
has &lt;a href="https://ifttt.com/awair/triggers/temp_is_high"&gt;an Awair integration&lt;/a&gt;, with
a high temperature trigger and a low temperature trigger. I could have linked
these triggers to &lt;a href="https://ifttt.com/kasa/details"&gt;the Kasa integration&lt;/a&gt; to turn
the smart plug on and off.&lt;/p&gt;
&lt;p&gt;But doing it through the APIs myself was much more fun!&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/automating-my-air-conditioner</guid><pubDate>Sat, 09 Oct 2021 00:00:00 GMT</pubDate></item><item><title>How to Replace All Instances of a Substring in JavaScript</title><link>https://www.dannyguo.com/blog/how-to-replace-all-instances-of-a-substring-in-javascript</link><description>&lt;article&gt;
        &lt;h1&gt;How to Replace All Instances of a Substring in JavaScript&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2021-07-12"&gt;
                July 12, 2021
            &lt;/time&gt;
             · 
            717 words  ·  ~4 minutes to read
            
        &lt;/div&gt;

        &lt;p&gt;The modern way to replace all instances of a
&lt;a href="https://en.wikipedia.org/wiki/Substring"&gt;substring&lt;/a&gt; in JavaScript is to use the
built-in &lt;code&gt;replaceAll&lt;/code&gt; function on the string. It returns a new string, leaving
the original string unchanged.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; text &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"Blake likes Demi, but Demi prefers Dylan."&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; newText &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; text.&lt;/span&gt;&lt;span&gt;replaceAll&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"Demi"&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;"Hannah"&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;// text === "Blake likes Demi, but Demi prefers Dylan."&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;// newText === "Blake likes Hannah, but Hannah prefers Dylan."&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can try out the examples in this post for yourself with &lt;a href="https://replit.com/@dyguo/replace-all-substrings-in-javascript"&gt;this
Replit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;replaceAll&lt;/code&gt; &lt;a href="https://github.com/tc39/proposal-string-replaceall"&gt;is a part&lt;/a&gt; of
the &lt;a href="https://en.wikipedia.org/wiki/ECMAScript#ES2021"&gt;ES2021 specification&lt;/a&gt;. All
the major browsers &lt;a href="https://caniuse.com/mdn-javascript_builtins_string_replaceall"&gt;have implemented
it&lt;/a&gt;, and it’s
available in &lt;a href="https://nodejs.org/"&gt;Node.js&lt;/a&gt; as of
&lt;a href="https://nodejs.medium.com/node-js-v15-0-0-is-here-deb00750f278"&gt;v15&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you can’t use it, you can &lt;a href="#using-replace-with-a-regular-expression"&gt;use the replace
function&lt;/a&gt; instead.&lt;/p&gt;
&lt;h2 id="using-a-regular-expression"&gt;Using a Regular Expression&lt;a class="anchor" href="#using-a-regular-expression"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can also provide a &lt;a href="https://en.wikipedia.org/wiki/Regular_expression"&gt;regular
expression&lt;/a&gt; (regex) as the
target, instead of a string. Here’s an example that uses a regex to replace all
numerical digits using the &lt;code&gt;\d&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Character_Classes"&gt;character
class&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; text &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"The bank account numbers are 143838 and 23299."&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; newText &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; text.&lt;/span&gt;&lt;span&gt;replaceAll&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;\d&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;g&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;"*"&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;// newText === "The bank account numbers are ****** and *****."&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;g&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#advanced_searching_with_flags"&gt;regex
flag&lt;/a&gt;
is required. Without it, you’ll get a
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError"&gt;TypeError&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;TypeError: String.prototype.replaceAll called with a non-global RegExp argument&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="special-replacement-patterns"&gt;Special Replacement Patterns&lt;a class="anchor" href="#special-replacement-patterns"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are special patterns that you can use in the replacement string. The first
one is &lt;code&gt;$&amp;amp;&lt;/code&gt;, which lets you insert the matched substring. Here’s an example that
surrounds each word with asterisks, using &lt;a href="https://regex101.com/r/DUInpP/1"&gt;this
regex&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; text &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"life goes on"&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; newText &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; text.&lt;/span&gt;&lt;span&gt;replaceAll&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;\w&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;g&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;"*$&amp;amp;*"&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;// newText === "*life* *goes* *on*"&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next pattern is &lt;code&gt;$`&lt;/code&gt;, which lets you insert the part of the string
before the matched substring.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; text &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"CatDogBird"&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; newText &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; text.&lt;/span&gt;&lt;span&gt;replaceAll&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"Dog"&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;"$`"&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;// newText === "CatCatBird"&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next pattern is &lt;code&gt;$'&lt;/code&gt;, which lets you insert the part of the string after the
matched substring.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; text &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"CatDogBird"&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; newText &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; text.&lt;/span&gt;&lt;span&gt;replaceAll&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"Dog"&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;"$'"&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;// newText === "CatBirdBird"&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next pattern is &lt;code&gt;$n&lt;/code&gt;, which is available when you use a regex that contains
&lt;a href="https://javascript.info/regexp-groups"&gt;capturing groups&lt;/a&gt;. The &lt;code&gt;n&lt;/code&gt; refers to the
n&lt;sup&gt;th&lt;/sup&gt; match (starting at an index of 1). Here’s an example that changes
the positions of words.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; text &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"foo bar baz"&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; newText &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; text.&lt;/span&gt;&lt;span&gt;replaceAll&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;/(&lt;/span&gt;&lt;span&gt;\w&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;) (&lt;/span&gt;&lt;span&gt;\w&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;) (&lt;/span&gt;&lt;span&gt;\w&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;)/&lt;/span&gt;&lt;span&gt;g&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;"$3 $1 $2"&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;// newText === "baz foo bar"&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The last pattern is &lt;code&gt;$$&lt;/code&gt;, which lets you insert a raw &lt;code&gt;$&lt;/code&gt;. This gives you an
escape hatch if you want to avoid the special pattern logic and use the
characters literally.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; text &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"$` is cool, but $` is rarer than $&amp;amp;."&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; newText &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; text.&lt;/span&gt;&lt;span&gt;replaceAll&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"$`"&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;"$$'"&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;// newText === "$' is cool, but $' is rarer than $&amp;amp;."&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, these patterns are also a potential source of bugs! Someone could use
them accidentally and get unexpected results.  For example, to put &lt;code&gt;$$&lt;/code&gt; in the
result string, you need to escape twice using &lt;code&gt;$$$$&lt;/code&gt; because &lt;code&gt;$$&lt;/code&gt; in the
replacement string will only insert a single &lt;code&gt;$&lt;/code&gt; in the result.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; text &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"PostgreSQL has dollar quoting: !!Mary's Room!!"&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; newText &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; text.&lt;/span&gt;&lt;span&gt;replaceAll&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"!!"&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;"$$$$"&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;// newText === "PostgreSQL has dollar quoting: $$Mary's Room$$"&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="using-a-function-for-replacement-logic"&gt;Using a Function for Replacement Logic&lt;a class="anchor" href="#using-a-function-for-replacement-logic"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For even more advanced cases, you can provide a function instead of a
replacement string.  The function will receive these arguments (in order): the
matched substring, its offset in the original string, and the entire original
string.  &lt;code&gt;replaceAll&lt;/code&gt; will use the return value as the string to insert.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; text &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"foo bar foo baz foo"&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; newText &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; text.&lt;/span&gt;&lt;span&gt;replaceAll&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"foo"&lt;/span&gt;&lt;span&gt;, (&lt;/span&gt;&lt;span&gt;substring&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;offset&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; prefix &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; offset &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"first"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"more"&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;${&lt;/span&gt;&lt;span&gt;prefix&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;${&lt;/span&gt;&lt;span&gt;substring&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;});&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;// newText === "first-foo bar more-foo baz more-foo"&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If there are regex capture groups, the function will receive the n&lt;sup&gt;th&lt;/sup&gt;
values as additional arguments in between the matched substring and offset
arguments.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; text &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"foo bar baz"&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; newText &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; text.&lt;/span&gt;&lt;span&gt;replaceAll&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;/(&lt;/span&gt;&lt;span&gt;\w&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;) (&lt;/span&gt;&lt;span&gt;\w&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;) (&lt;/span&gt;&lt;span&gt;\w&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;)/&lt;/span&gt;&lt;span&gt;g&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    (&lt;/span&gt;&lt;span&gt;substring&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;n1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;n2&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;n3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;offset&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;`1-&lt;/span&gt;&lt;span&gt;${&lt;/span&gt;&lt;span&gt;n1&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt; 2-&lt;/span&gt;&lt;span&gt;${&lt;/span&gt;&lt;span&gt;n2&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt; 3-&lt;/span&gt;&lt;span&gt;${&lt;/span&gt;&lt;span&gt;n3&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;// newText === "1-foo 2-bar 3-baz"&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="using-replace-with-a-regular-expression"&gt;Using .replace with a Regular Expression&lt;a class="anchor" href="#using-replace-with-a-regular-expression"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you can’t use &lt;code&gt;replaceAll&lt;/code&gt; for whatever reason, the older method is to use
the &lt;code&gt;replace&lt;/code&gt; function with a regex.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; text &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"Blake likes Demi, but Demi prefers Dylan."&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; newText &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; text.&lt;/span&gt;&lt;span&gt;replace&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;/Demi/&lt;/span&gt;&lt;span&gt;g&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;"Hannah"&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s important to use the &lt;code&gt;g&lt;/code&gt; regex flag. If you omit it, you won’t get a
runtime error like with &lt;code&gt;replaceAll&lt;/code&gt;, but &lt;code&gt;replace&lt;/code&gt; will only replace the
&lt;em&gt;first&lt;/em&gt; occurrence of the substring.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;replace&lt;/code&gt; also supports the special replacement patterns and using a replacement
function instead of a string.&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/how-to-replace-all-instances-of-a-substring-in-javascript</guid><pubDate>Mon, 12 Jul 2021 00:00:00 GMT</pubDate></item><item><title>How to Swap Column Values in SQL</title><link>https://www.dannyguo.com/blog/how-to-swap-column-values-in-sql</link><description>&lt;article&gt;
        &lt;h1&gt;How to Swap Column Values in SQL&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2021-06-25"&gt;
                June 25, 2021
            &lt;/time&gt;
             · 
            202 words  ·  ~2 minutes to read
            
        &lt;/div&gt;

        &lt;p&gt;If you need to swap column values in SQL, it’s easy to do in most databases. The
big exception is &lt;a href="#mysql"&gt;MySQL&lt;/a&gt;. For Postgres, Oracle, SQL Server, and SQLite,
you can simply set the columns equal to each other in an &lt;code&gt;update&lt;/code&gt;. Here’s an
example that you can try with SQLite.  You can also try it online with &lt;a href="https://www.db-fiddle.com/f/gRoFnCbEhWq9gxqhUUHHc4/2"&gt;this DB
Fiddle for SQLite&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;create&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;coordinates&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    x &lt;/span&gt;&lt;span&gt;integer&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    y &lt;/span&gt;&lt;span&gt;integer&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;insert into&lt;/span&gt;&lt;span&gt; coordinates (x, y)&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;values&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;12&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; coordinates;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should see this output (after &lt;a href="https://database.guide/format-sqlite-query-results-as-columns-with-column-headers/"&gt;turning headers
on&lt;/a&gt;):&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;sqlite&amp;gt; .headers on&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;sqlite&amp;gt; select * from coordinates;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;x|y&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;5|12&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then if you run:&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;update&lt;/span&gt;&lt;span&gt; coordinates&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt; x &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; y, y &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; x;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; coordinates;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The values should be swapped:&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;x|y&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;12|5&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="mysql"&gt;MySQL&lt;a class="anchor" href="#mysql"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Unfortunately, this approach doesn’t work for MySQL. You’ll end up with both
columns having the same value. The output of the update will be:&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;x|y&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;12|12&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can try it for yourself with &lt;a href="https://www.db-fiddle.com/f/dF6FFWfjKjt5HEKzEG5wRC/2"&gt;this DB Fiddle for
MySQL&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://beerpla.net/"&gt;Artem Russakovskii&lt;/a&gt; gives us a few workarounds in &lt;a href="https://beerpla.net/2009/02/17/swapping-column-values-in-mysql/"&gt;this
post&lt;/a&gt;.  See
&lt;a href="https://stackoverflow.com/a/559291/1481479"&gt;this Stack Overflow answer&lt;/a&gt; for
more discussion.&lt;/p&gt;
&lt;p&gt;The cleanest workaround is to use a temporary variable:&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;update&lt;/span&gt;&lt;span&gt; coordinates&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;set&lt;/span&gt;&lt;span&gt; x &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; (@temp :&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; x), x &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; y, y &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; @temp;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can try it for yourself with &lt;a href="https://www.db-fiddle.com/f/xxwUotZ1YBSQXvBnM9JomY/2"&gt;this DB
Fiddle&lt;/a&gt;.&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/how-to-swap-column-values-in-sql</guid><pubDate>Fri, 25 Jun 2021 00:00:00 GMT</pubDate></item><item><title>How to Use Git Bisect for Debugging</title><link>https://daily.dev/blog/how-to-use-git-bisect-for-debugging</link><description>&lt;article&gt;
        &lt;h1&gt;How to Use Git Bisect for Debugging&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2021-05-27"&gt;
                May 27, 2021
            &lt;/time&gt;
             · 
            1,857 words  ·  ~10 minutes to read
            
        &lt;/div&gt;

        &lt;p&gt;&lt;em&gt;This post was originally written for
&lt;a href="https://daily.dev/blog/how-to-use-git-bisect-for-debugging"&gt;daily.dev&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;While many programmers use &lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt; on a daily basis, some
might not use much more than the basic commands like add, commit, push, and
pull. Yet Git has dozens of high-level
&lt;a href="https://git-scm.com/docs/git#_git_commands"&gt;commands&lt;/a&gt;. A particularly
interesting one is bisect. It allows you to efficiently search through your
commit history to identify when a change occurred. The most obvious use case for
this is to find out when a bug was introduced.&lt;/p&gt;
&lt;p&gt;At a high level, the way bisect works is that it lets you mark commits as “good”
or “bad” until it can figure out the specific commit that caused the repository
to flip from good to bad. To minimize the number of commits you have to inspect,
it tries to stick to a &lt;a href="https://en.wikipedia.org/wiki/Binary_search_algorithm"&gt;binary
search&lt;/a&gt; as much as
possible. For an in-depth look at how bisect works under the hood, I recommend
reading &lt;a href="https://git-scm.com/docs/git-bisect-lk2009"&gt;this paper&lt;/a&gt;, which
discusses &lt;a href="https://git-scm.com/docs/git-bisect-lk2009#_git_bisect_details"&gt;how the bisection algorithm
works&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let’s think about when bisect can be useful. Then we’ll go through a tutorial.
Lastly, I’ll cover some advanced features and go over some caveats.&lt;/p&gt;
&lt;h2 id="when-to-use-bisect"&gt;When to Use Bisect&lt;a class="anchor" href="#when-to-use-bisect"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I don’t use bisect very often, but when I do, it’s usually when I’m trying to
figure out a particularly tricky problem involving a bug with an unclear origin.
Some bugs can be attributed to a very recent commit, and it’s obvious from a
quick look which one caused the issue. If a commit from this morning changed a
part of your system, and you start getting error alerts for that part, there’s a
good chance the commit from this morning is the culprit.&lt;/p&gt;
&lt;p&gt;But other bugs are subtle, and you might not discover them until long after
their introduction to the codebase. In these cases, it can be challenging to go
through the commit history and suss out the bad commit, especially if you don’t
have a good idea of when exactly the issue started. The task can be even harder
if you don’t have a descriptive, clean commit log to read because the commit
messages are not &lt;a href="https://chris.beams.io/posts/git-commit/"&gt;written well&lt;/a&gt;.
Imagine trying to pinpoint a problematic commit when the commit log is full of
generic messages like “Fix issue” or “Clean up.”&lt;/p&gt;
&lt;p&gt;Even when you have a decent commit log, many bugs have non-obvious causes.
Bisect provides a way to avoid wasting time and get straight to figuring out the
source of the problem. Whenever you find yourself asking when a change happened,
bisect should be one of the techniques you consider using.&lt;/p&gt;
&lt;h2 id="tutorial"&gt;Tutorial&lt;a class="anchor" href="#tutorial"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let’s go through an example. You can clone &lt;a href="https://github.com/dguo/git-bisect-demo"&gt;this
repo&lt;/a&gt; if you want to try it out for
yourself. It contains an &lt;code&gt;index.html&lt;/code&gt; file with the following content:&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"esperanto"&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;&lt;/span&gt;&lt;span&gt;meta&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"utf-8"&lt;/span&gt;&lt;span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;&lt;/span&gt;&lt;span&gt;meta&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"viewport"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;content&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;Git bisect is awesome!&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;&lt;/span&gt;&lt;span&gt;meta&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"description"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;content&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"Git bisect can be a great debugging tool"&lt;/span&gt;&lt;span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;How to Use Git Bisect for Debugging&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            &amp;lt;&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;href&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"https://git-scm.com/"&lt;/span&gt;&lt;span&gt;&amp;gt;Git&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt; bisect can be a great way to&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            determine when a change was introduced into a codebase.&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            It's efficient because it uses binary search.&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You might notice that the language is incorrectly set to
&lt;a href="https://en.wikipedia.org/wiki/Esperanto"&gt;Esperanto&lt;/a&gt; instead of English. Let’s
use bisect to find the commit where that happened. You can start a bisect
session with &lt;code&gt;git bisect start&lt;/code&gt;. Note that you have to be at the top-level
directory of the repository or else bisect will refuse to start. If you run &lt;code&gt;git status&lt;/code&gt;, you should see this message:&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;You are currently bisecting, started from branch 'main'.&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  (use "git bisect reset" to get back to the original branch)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To end the bisect session at any point, run &lt;code&gt;git bisect reset&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Mark the current commit (HEAD) as bad with &lt;code&gt;git bisect bad&lt;/code&gt;. Next, you need to
determine a commit that doesn’t have the problem. For a real world bug, maybe
you think the problem started occurring about a month ago. You can &lt;code&gt;git checkout&lt;/code&gt; a commit from two months before and hopefully confirm the problem
doesn’t occur with that commit. If it still does, you’ll need to go back even
further. Once you find a good commit, you mark it with &lt;code&gt;git bisect good &amp;lt;commit&amp;gt;&lt;/code&gt;. You can also run just &lt;code&gt;git bisect good&lt;/code&gt; to mark the current commit.&lt;/p&gt;
&lt;p&gt;For this repo, let’s go all the way back to the first commit and mark it as good
with &lt;code&gt;git bisect good b35894eec380a1039f07f47c1d0b63fa0d015190&lt;/code&gt;. Now that Git
has a start (the good commit) and an end (the bad commit) to work with, it can
proceed with the bisection. You should see this message:&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;Bisecting: 5 revisions left to test after this (roughly 3 steps)&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;[d44fbe511a46fa78e7428077d74b0f18897ebe65] Add a meta description&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’re now on a commit in the middle of the range, and you can confirm if the
problem still exists or not. Open &lt;code&gt;index.html&lt;/code&gt; and check if the language is
still set to “esperanto” or if it’s set to the correct value of “en.” Mark the
commit with &lt;code&gt;git bisect bad&lt;/code&gt; or &lt;code&gt;git bisect good&lt;/code&gt;, and Git will put you on a new
commit in the middle of the new search range. Repeat the process until Git
determines the point at which one commit is good, and the following one is bad:&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;e4203915d6639fdc7028d69a9cc773c2fc2b584b is the first bad commit&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;commit e4203915d6639fdc7028d69a9cc773c2fc2b584b&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;Author: Danny Guo&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;Date:   Fri Apr 30 23:52:49 2021 -0400&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        Make the page responsive&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;index.html | 3 ++-&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;1 file changed, 2 insertions(+), 1 deletion(-)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that’s it! This commit changed the value from “en” to “esperanto.” Run &lt;code&gt;git bisect reset&lt;/code&gt; to end the session. In a real world situation, the changes in the
identified commit will hopefully make it easy to determine the cause of the bug.&lt;/p&gt;
&lt;h2 id="advanced-features"&gt;Advanced Features&lt;a class="anchor" href="#advanced-features"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A typical bisect session doesn’t require more than the &lt;code&gt;start&lt;/code&gt;, &lt;code&gt;bad&lt;/code&gt;, and
&lt;code&gt;good&lt;/code&gt; subcommands, but there are some advanced features that even programmers
who are familiar with bisect might not know about.&lt;/p&gt;
&lt;h3 id="skip-commits"&gt;Skip Commits&lt;a class="anchor" href="#skip-commits"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git bisect skip&lt;/code&gt; lets you skip a commit or range of commits if you know they
aren’t relevant to what you’re trying to pinpoint. &lt;code&gt;git bisect skip&lt;/code&gt; will skip
whatever commit you are currently on, while &lt;code&gt;git bisect skip &amp;lt;start-commit&amp;gt;..&amp;lt;end-commit&amp;gt;&lt;/code&gt; will skip every commit after &lt;code&gt;&amp;lt;start-commit&amp;gt;&lt;/code&gt;, up
to and including &lt;code&gt;&amp;lt;end-commit&amp;gt;&lt;/code&gt;. If you want to also skip &lt;code&gt;&amp;lt;start-commit&amp;gt;&lt;/code&gt;, you
can use &lt;code&gt;git bisect skip &amp;lt;start-commit&amp;gt; &amp;lt;start-commit&amp;gt;..&amp;lt;end-commit&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Skipping commits can make your session go faster, but be wary that it can also
cause bisect to fail to identify a specific commit and issue a message like
this:&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;There are only 'skip'ped commits left to test.&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;The first bad commit could be any of:&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;87699539acfe49ff1307cd0fa794d8422ec830c5&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;9f3b97749781017b59f949f62042552fdb44c950&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;9fdb8c5dabcd8577f358986a27b80a9ffee6be62&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;We cannot bisect more!&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="redo-a-session"&gt;Redo a Session&lt;a class="anchor" href="#redo-a-session"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can use &lt;code&gt;git bisect log&lt;/code&gt; to produce a log of the current session. Here’s an
example:&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;git bisect start&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;# bad: [73ab00c89f17ea5fa19478a9ce4a4488a2bb57fd] Add a README&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;git bisect bad 73ab00c89f17ea5fa19478a9ce4a4488a2bb57fd&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;# good: [b35894eec380a1039f07f47c1d0b63fa0d015190] Initial commit&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;git bisect good b35894eec380a1039f07f47c1d0b63fa0d015190&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;# good: [d44fbe511a46fa78e7428077d74b0f18897ebe65] Add a meta description&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;git bisect good d44fbe511a46fa78e7428077d74b0f18897ebe65&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;# bad: [e4203915d6639fdc7028d69a9cc773c2fc2b584b] Make the page responsive&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;git bisect bad e4203915d6639fdc7028d69a9cc773c2fc2b584b&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you save this output to a file with &lt;code&gt;git bisect log &amp;gt; bisect.txt&lt;/code&gt;, you can
edit the text file manually, reset the session, and then redo the session with
&lt;code&gt;git bisect replay bisect.txt&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is also a way to fix mistakes. You can edit &lt;code&gt;bisect.text&lt;/code&gt; before running
the replay command.&lt;/p&gt;
&lt;h3 id="run-a-script-or-command"&gt;Run a Script or Command&lt;a class="anchor" href="#run-a-script-or-command"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Bisect can automatically complete the session for you if you give it a command
or script to run, so you don’t have to do it manually for each commit. You can
try this with the example repo. Start a session and set the initial bad and good
commits as before. Then run &lt;code&gt;git bisect run grep -q 'lang="en"' index.html&lt;/code&gt;.
The &lt;code&gt;-q&lt;/code&gt; flag suppresses the &lt;a href="https://en.wikipedia.org/wiki/Grep"&gt;grep&lt;/a&gt; output.&lt;/p&gt;
&lt;p&gt;Git will run the given command for each commit. If the command returns an exit
code of 0, Git will mark the commit as good. If the command returns an exit code
of 125, Git will mark the commit as skipped. And if the command returns any
other exit code between 1 and 127 (inclusive), Git will mark the commit as bad.
So in this case, the grep command will return 0 if it finds the correct
language. When bisect is done, you should see this output:&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;running grep -q lang="en" index.html&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;Bisecting: 2 revisions left to test after this (roughly 2 steps)&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;[e4203915d6639fdc7028d69a9cc773c2fc2b584b] Make the page responsive&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;running grep -q lang="en" index.html&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;Bisecting: 0 revisions left to test after this (roughly 1 step)&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;[2003e4a84618a340616df6d214d10d7fe421871c] Add a paragraph&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;running grep -q lang="en" index.html&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;e4203915d6639fdc7028d69a9cc773c2fc2b584b is the first bad commit&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;commit e4203915d6639fdc7028d69a9cc773c2fc2b584b&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;Author: Danny Guo&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;Date:   Fri Apr 30 23:52:49 2021 -0400&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        Make the page responsive&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt; index.html | 3 ++-&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt; 1 file changed, 2 insertions(+), 1 deletion(-)&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;bisect run success&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So you get the same result without having to check commits one by one. You can
imagine how useful this can be if you need to run bisect on a range of dozens,
hundreds, or even thousands of commits.&lt;/p&gt;
&lt;h3 id="change-terms"&gt;Change Terms&lt;a class="anchor" href="#change-terms"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If the “bad” and “good” subcommand names don’t make sense for your use case, you
can change the terms that bisect uses. Not every session involves bugs. Maybe
you just want to know when you last updated a section of documentation. For
these situations, Git also allows you to use “old” and “new” instead of “bad”
and “good,” respectively. If even these don’t work, you can set custom terms
using &lt;code&gt;git bisect start --term-old &amp;lt;old-substitute&amp;gt; --term-new &amp;lt;new-substitute&amp;gt;&lt;/code&gt;
and then mark commits with &lt;code&gt;git bisect &amp;lt;old-substitute&amp;gt;&lt;/code&gt; and &lt;code&gt;git bisect &amp;lt;new-substitute&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="caveats"&gt;Caveats&lt;a class="anchor" href="#caveats"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While bisect can be a powerful tool, it’s important to be aware of situations
where it doesn’t work so well. The first is when you have bugs that aren’t
reliably reproducible, making it difficult for bisect to pinpoint the start of
the problem. Bisect only works if your determination of good and bad commits is
accurate. If your bug is due to a &lt;a href="https://en.wikipedia.org/wiki/Race_condition"&gt;race
condition&lt;/a&gt;, for example, you might
incorrectly mark a commit as good or bad, depending on whether or not the race
condition worked out in your favor. Bisect might fail to tell you the offending
commit, but at least the failure indicates that a race condition or something
like that is a possibility.&lt;/p&gt;
&lt;p&gt;Another problem could be that the bug depends on something that is external to
the codebase, such as an issue with a third party vendor or particular data in
your production database that doesn’t come up in your local environment. Like a
race condition, these circumstances can also make it hard to confidently mark
commits as good or bad.&lt;/p&gt;
&lt;p&gt;Lastly, it’s possible that the bug started occurring far enough in the past that
for older commits, you can’t easily run the project in the necessary way to
determine if the problem exists. Development environments evolve over time, and
complex ones can make it difficult for you to work with old versions, slowing
down your bisect session.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;a class="anchor" href="#conclusion"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I didn’t learn about bisect until a few years into my first programming job. I
wish I had learned it earlier! I appreciate it because it can be so useful for
bugs that are hard to debug. Many bugs are fairly simple to figure out by just
examining an error message, a stack trace, the current code, etc. But the
trickier bugs can take hours if not days of investigation. Git bisect can cut
that time down with satisfying efficiency.&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/how-to-use-git-bisect-for-debugging</guid><pubDate>Thu, 27 May 2021 00:00:00 GMT</pubDate></item><item><title>How to Prevent a Website Page From Showing Up in Search Results</title><link>https://www.dannyguo.com/blog/how-to-prevent-a-website-page-from-showing-up-in-search-results</link><description>&lt;article&gt;
        &lt;h1&gt;How to Prevent a Website Page From Showing Up in Search Results&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2021-05-11"&gt;
                May 11, 2021
            &lt;/time&gt;
             · 
            344 words  ·  ~2 minutes to read
            
        &lt;/div&gt;

        &lt;p&gt;To prevent a website page from showing up in search results, either set a
&lt;code&gt;robots&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta"&gt;meta&lt;/a&gt;
tag or send a &lt;code&gt;X-Robots-Tag&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers"&gt;HTTP
header&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So you can add this tag to the page:&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"robots"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;content&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"noindex"&lt;/span&gt;&lt;span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or send this header for the page:&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;X-Robots-Tag: noindex&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One benefit of the header approach is that you can use it for non-HTML content,
like a PDF or JSON file.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;noindex&lt;/code&gt; value tells crawlers, such as Google and Bing, not to index the
page, so it won’t show up in search results.&lt;/p&gt;
&lt;h2 id="dont-use-robotstxt"&gt;Don’t Use &lt;code&gt;robots.txt&lt;/code&gt;&lt;a class="anchor" href="#dont-use-robotstxt"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You might think to use the &lt;a href="https://en.wikipedia.org/wiki/Robots_exclusion_standard"&gt;robots exclusion
standard&lt;/a&gt; (i.e.
&lt;code&gt;robots.txt&lt;/code&gt;) to disallow crawling, but that &lt;a href="https://developers.google.com/search/docs/advanced/robots/intro?rd=1#understand-the-limitations-of-a-robots.txt-file"&gt;doesn’t
work&lt;/a&gt;
because then the crawlers can’t see your directive to not index the page. You’ve
instructed them not to look at the page at all! So if other websites link to
your page, a crawler can still pick up and index the page.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;robots.txt&lt;/code&gt; file is for controlling &lt;em&gt;crawling&lt;/em&gt;, not &lt;em&gt;indexing&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id="directives"&gt;Directives&lt;a class="anchor" href="#directives"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are many possible directive values, and you can specify more than one by
separating them with commas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;all&lt;/code&gt;: no restrictions (the default behavior)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noindex&lt;/code&gt;: exclude the page from search results&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nofollow&lt;/code&gt;: don’t follow the links in the page&lt;/li&gt;
&lt;li&gt;&lt;code&gt;none&lt;/code&gt;: the same as &lt;code&gt;noindex, nofollow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noarchive&lt;/code&gt; or &lt;code&gt;nocache&lt;/code&gt;: don’t link to a cached version of the page&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nosnippet&lt;/code&gt;: don’t show a description, snippet, thumbnail, or video preview of
the page in search results&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max-snippet:[length]&lt;/code&gt;: limit a snippet to &lt;code&gt;[length]&lt;/code&gt; number of characters&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max-image-preview:[setting]&lt;/code&gt;: set an image preview’s maximum size, where
&lt;code&gt;[setting]&lt;/code&gt; can be &lt;code&gt;none&lt;/code&gt;, &lt;code&gt;standard&lt;/code&gt;, or &lt;code&gt;large&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max-video-preview:[length]&lt;/code&gt;: limit a video preview to &lt;code&gt;[length]&lt;/code&gt; number of
seconds&lt;/li&gt;
&lt;li&gt;&lt;code&gt;notranslate&lt;/code&gt;: don’t link to a translation of the page&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noimageindex&lt;/code&gt;: don’t index images on the page&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unavailable_after:[datetime]&lt;/code&gt;: exclude the page from search results after
&lt;code&gt;[datetime]&lt;/code&gt;, which should be in a standard format, such as &lt;a href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO
8601&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, not all crawlers support all values. For example, check out &lt;a href="https://developers.google.com/search/docs/advanced/robots/robots_meta_tag#directives"&gt;this
documentation for
Google&lt;/a&gt;,
&lt;a href="https://www.bing.com/webmasters/help/which-robots-metatags-does-bing-support-5198d240"&gt;this documentation for
Bing&lt;/a&gt;,
and &lt;a href="https://yandex.com/support/webmaster/controlling-robot/meta-robots.html"&gt;this documentation for
Yandex&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="specifying-crawlers"&gt;Specifying Crawlers&lt;a class="anchor" href="#specifying-crawlers"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you want to use different directives based on the specific crawler, you can
specify the &lt;a href="https://en.wikipedia.org/wiki/User_agent"&gt;user agent&lt;/a&gt; in the meta
tag’s name:&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"googlebot"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;content&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"noindex"&lt;/span&gt;&lt;span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"bingbot"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;content&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"nofollow"&lt;/span&gt;&lt;span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or in the header value:&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;X-Robots-Tag: googlebot: noindex&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;X-Robots-Tag: bingbot: nofollow&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/how-to-prevent-a-website-page-from-showing-up-in-search-results</guid><pubDate>Tue, 11 May 2021 00:00:00 GMT</pubDate></item><item><title>What I Learned by Relearning HTML</title><link>https://www.dannyguo.com/blog/what-i-learned-by-relearning-html</link><description>&lt;article&gt;
        &lt;h1&gt;What I Learned by Relearning HTML&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2021-05-07"&gt;
                May 7, 2021
            &lt;/time&gt;
             · 
            1,644 words  ·  ~9 minutes to read
            
        &lt;/div&gt;

        &lt;p&gt;I’ve worked on websites for several years, both professionally and for side
projects. One day, I reflected on the fact that all of my web development
education had come from actually making websites. In most cases, I’d have a
specific problem, Google how to solve it, and learn something new in the
process.&lt;/p&gt;
&lt;p&gt;I wondered what I was missing by never learning HTML in a comprehensive way.
Forget CSS and JavaScript. I’m just talking about raw HTML. It might seem
silly to go back to such a basic aspect of web development after a decent
amount of experience, but it’s easy to become overconfident with a skill just
because you know enough to do a few useful things.&lt;/p&gt;
&lt;p&gt;So I decided to relearn HTML and discover my &lt;a href="https://en.wikipedia.org/wiki/There_are_known_knowns"&gt;unknown
unknowns&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="experience"&gt;Experience&lt;a class="anchor" href="#experience"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For context, I made my first website in middle school for a class project. We
learned basic HTML, and embedding a MP3 song felt like magic. But I didn’t touch
web development again until college. I made a lightweight news aggregator called
&lt;a href="https://www.dailylore.com/"&gt;The Daily Lore&lt;/a&gt; that’s still running (I preserved
the &lt;a href="https://www.dailylore.com/legacy"&gt;original version&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Since then, I’ve worked on two websites professionally, one website for a
&lt;a href="https://sublimefund.org/"&gt;nonprofit&lt;/a&gt;, this personal website, and a few small
websites for side projects, such as &lt;a href="https://www.makeareadme.com/"&gt;Make a
README&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="introduction-to-html5"&gt;Introduction to HTML5&lt;a class="anchor" href="#introduction-to-html5"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I don’t consider myself to be a web development expert based on just that
experience, but I surely had far more knowledge than the typical student for
&lt;a href="https://www.coursera.org/"&gt;Coursera&lt;/a&gt;’s &lt;a href="https://www.coursera.org/learn/html"&gt;Introduction to
HTML5&lt;/a&gt; course. I started the course
expecting to know a lot of the content already, since it was designed for
complete beginners with no programming backgrounds.&lt;/p&gt;
&lt;p&gt;As I went through the material, I did in fact know a lot of it already, but it
was still a good refresher for two points in particular: the importance of using
semantic elements and what to think about in terms of accessibility.&lt;/p&gt;
&lt;p&gt;I’ve always had a bad habit of using generic &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; elements to make what I
need, rather than semantic elements that represent specific content, like the
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header"&gt;header&lt;/a&gt; and
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer"&gt;footer&lt;/a&gt;
elements.&lt;/p&gt;
&lt;p&gt;Accessibility was also something I had never considered in depth. I knew that
images should have &lt;code&gt;alt&lt;/code&gt; descriptions, and that was about it. One of the
course’s key points is that using the appropriate semantic elements is important
to making a site more accessible.&lt;/p&gt;
&lt;p&gt;For example, people who use screen readers can jump around using
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements"&gt;heading&lt;/a&gt;
elements (&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; through &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt;), so it’s important to use them and make sure
they’re in the correct order. It’s wrong to use them only to make text bigger
because their real purpose is to define the structure of the content. They’re
like a table of contents.&lt;/p&gt;
&lt;p&gt;Instead of headings, we could use &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; elements and alter their font sizes with
CSS to create a website that looks identical, but it’d be less semantic and less
accessible. There is more to web development than making websites look the way
we want. It’s important to make the content &lt;em&gt;mean&lt;/em&gt; what we want as well.&lt;/p&gt;
&lt;p&gt;Accessibility isn’t just about improving how websites work with screen readers.
We should think about font size, font style, and color contrast for people who
have visual impairments or color blindness. We should consider that people who
have hearing loss may have a harder time recognizing that audio or video is
playing. We should make tab navigation work well for people who rely primarily
on the keyboard, perhaps because they have a difficult time using a mouse. When
we add animations, we should take care to avoid ones that make it more difficult
for someone to actually use the website, such as animations that change the page
layout in the middle of interactions. And we should consider when a page is
overloaded with too much information or too many elements, making it hard for
people to understand things or how to actually use the website.&lt;/p&gt;
&lt;p&gt;It’s easy to forget about accessibility, but we should strive to make websites
work well for as many people as possible. Accessibility also goes hand in hand
with usability and search engine optimization. The course points out that
improving one frequently means improving all the others.&lt;/p&gt;
&lt;h2 id="reading-the-documentation"&gt;Reading the Documentation&lt;a class="anchor" href="#reading-the-documentation"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have a &lt;a href="https://azeemba.com/"&gt;friend&lt;/a&gt; who is probably the only person I know
who has read the entire &lt;a href="https://operations.nfl.com/the-rules"&gt;NFL rulebook&lt;/a&gt;
(the 2020 version is 87 pages long). Watching football with him was fun because
he was so good at understanding nuances to the game and weird situations. I
figured there was a similar opportunity for me with HTML.&lt;/p&gt;
&lt;p&gt;The strict equivalent would have been to read the &lt;a href="https://html.spec.whatwg.org/"&gt;HTML
standard&lt;/a&gt; for every HTML element, but I decided
to read the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element"&gt;MDN
documentation&lt;/a&gt; for
every element instead since MDN has a lot of information about browser
compatibility and using elements in practice. I read the entire page for each
element, took notes, and made &lt;a href="https://apps.ankiweb.net/"&gt;Anki&lt;/a&gt; cards for the
bits that I wanted to commit to memory.&lt;/p&gt;
&lt;p&gt;There were many deprecated elements that I only skimmed through, and I didn’t
bother to take notes for those, but dozens of standardized elements and
attributes were totally new to me.&lt;/p&gt;
&lt;p&gt;I didn’t intend to come out of this experience as a master of HTML, and I still
have to apply what I’ve learned (including to this website), but I find it
useful just to be aware of what is available. Even though I can’t recall all the
details about using a
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture"&gt;picture&lt;/a&gt;
element, I know it exists now, and I can always look up the details later during
implementation. It’s a categorical difference from not being aware of it at all
and using a plain &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; for all cases because I don’t know any better.&lt;/p&gt;
&lt;h2 id="observations"&gt;Observations&lt;a class="anchor" href="#observations"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As I read the documentation, some things were particularly interesting to me,
and I had some observations.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/address"&gt;address&lt;/a&gt;
element is for contact information in general, not just physical mailing
addresses.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dfn"&gt;definition&lt;/a&gt;
element represents the term that is being defined, rather than the definition
itself.&lt;/p&gt;
&lt;p&gt;There is a whole set of
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby"&gt;ruby&lt;/a&gt; elements
that are primarily used to show the pronunciations of East Asian characters.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track"&gt;track&lt;/a&gt;
element provides a standard way to embed timed text tracks for video and audio.
I had never heard of the
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WebVTT_API"&gt;WebVTT&lt;/a&gt; (Web Video
Text Tracks) format before.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/map"&gt;map&lt;/a&gt; element
seems like an anachronism, especially considering that it isn’t responsive.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/data"&gt;data&lt;/a&gt;
element provides a machine-readable translation for content. This seems likes it
could help screen scraping, which some websites like &lt;a href="https://www.theverge.com/2019/9/10/20859399/linkedin-hiq-data-scraping-cfaa-lawsuit-ninth-circuit-ruling"&gt;LinkedIn have been
actively trying to
prevent&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There’s subtlety when it comes to correctly choosing to use
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong"&gt;strong&lt;/a&gt;
versus &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/em"&gt;em&lt;/a&gt; versus
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i"&gt;i&lt;/a&gt; versus
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/u"&gt;u&lt;/a&gt; versus
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b"&gt;b&lt;/a&gt; versus
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/mark"&gt;mark&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are a few elements that seem redundant. The
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/legend"&gt;legend&lt;/a&gt;
element represents a caption for a
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset"&gt;fieldset&lt;/a&gt;
element, the
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption"&gt;caption&lt;/a&gt;
element represents a caption for a
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table"&gt;table&lt;/a&gt;
element, and the
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figcaption"&gt;figcaption&lt;/a&gt;
element represents a caption for a
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figure"&gt;figure&lt;/a&gt;
element. I don’t know why one element couldn’t do the job for all three, since
the meaning could be derived from the parent element.&lt;/p&gt;
&lt;h3 id="the-future-of-html"&gt;The Future of HTML&lt;a class="anchor" href="#the-future-of-html"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As I read through the documentation, it kept making me consider the question of
how HTML should evolve. Browsers keep gaining more and more functionality, to
the point that they are becoming more like operating systems.  There’s even an
experimental &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Bluetooth_API"&gt;API for connecting to Bluetooth
devices&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Wikipedia is the perfect website for what HTML was originally designed for:
mostly static documents that are connected through hyperlinks. But now we use
the browser to deliver full on applications, like
&lt;a href="https://www.figma.com/"&gt;Figma&lt;/a&gt;, which is a design tool that &lt;a href="https://www.figma.com/blog/webassembly-cut-figmas-load-time-by-3x/"&gt;effectively runs
C++ code in the browser by compiling it to
WebAssembly&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;HTML has added a few elements and attributes that make interactivity possible
without JavaScript. For example, the
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details"&gt;details&lt;/a&gt;
element creates a widget that can be toggled between open and closed states.&lt;/p&gt;
&lt;p&gt;But as your use case become more advanced, it quickly becomes difficult to rely
solely on what HTML provides. For example,
&lt;a href="https://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt;’s progress bar &lt;a href="https://getbootstrap.com/docs/5.0/components/progress/"&gt;doesn’t
use&lt;/a&gt; the HTML
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress"&gt;progress&lt;/a&gt;
element.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We don’t use the HTML5 &amp;lt;progress&amp;gt; element, ensuring you can stack progress
bars, animate them, and place text labels over them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Another example is the
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table"&gt;table&lt;/a&gt;
element. Pure HTML tables &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr#advanced_styling"&gt;can be pretty
sophisticated&lt;/a&gt;
in terms of displaying data, but there’s no built-in support for interactive
functionality like sorting, filtering, and pagination.&lt;/p&gt;
&lt;p&gt;Browser support also becomes an issue when an element does become more advanced.
The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input"&gt;input&lt;/a&gt;
element is one of the most complex elements because it supports so many
combinations of input types and attributes. In theory, you could use it to
easily collect a date and a time, using the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/datetime-local"&gt;datetime-local
type&lt;/a&gt;.
But not all browsers support it, and there is variation in how it works even
among those that do.&lt;/p&gt;
&lt;p&gt;Some elements are also difficult to style, such as the
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select"&gt;select&lt;/a&gt;
element. So website developers may want to rely on standard functionality
instead of using a library or implementing a feature themselves, but then they
have to worry about it not working well in certain browsers or stylistic
inconsistency with the rest of the website.&lt;/p&gt;
&lt;p&gt;I’m eager to see if &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components"&gt;Web
Components&lt;/a&gt; become
more popular and provide a good solution to these problems. If they do, the
situation could become similar to programming languages, where different
languages take difference stances on the question of how much functionality
should be included in the standard library (HTML) so that the community has a
lesser or greater tendency to rely on third party libraries (Web Components).&lt;/p&gt;
&lt;p&gt;Web Components do seem to be picking up some momentum.
&lt;a href="https://github.com"&gt;GitHub&lt;/a&gt; has &lt;a href="https://github.blog/2021-05-04-how-we-use-web-components-at-github/"&gt;started to use
them&lt;/a&gt;, and
they publish their components to
&lt;a href="https://www.webcomponents.org/"&gt;WebComponents.org&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;a class="anchor" href="#conclusion"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It was easy to feel confident with HTML after doing web development for several
years. Yet I found plenty of value in going back to learn it in a more rigorous
manner. I learned about many improvements I can make to the websites I work on,
and I have a better big picture view of HTML and how it might develop. While I
still think learning by doing is highly effective, this experience has made me
want to go back and relearn other things with a bottom up approach.&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/what-i-learned-by-relearning-html</guid><pubDate>Fri, 07 May 2021 00:00:00 GMT</pubDate></item><item><title>Using Fuse.js to Add Dynamic Search to a React App</title><link>https://blog.logrocket.com/fuse-js-dynamic-search-react-app/</link><description>&lt;article&gt;
        &lt;h1&gt;Using Fuse.js to Add Dynamic Search to a React App&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2021-04-18"&gt;
                April 18, 2021
            &lt;/time&gt;
             · 
            1,188 words  ·  ~6 minutes to read
            
        &lt;/div&gt;

        &lt;p&gt;&lt;em&gt;This post was originally written for the &lt;a href="https://blog.logrocket.com/fuse-js-dynamic-search-react-app/"&gt;LogRocket
blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://fusejs.io/"&gt;Fuse.js&lt;/a&gt; is a lightweight search engine that can run on the
client side in a user’s browser. Let’s see how we can use it to easily add
search functionality to a &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; application.&lt;/p&gt;
&lt;h2 id="when-to-use-fusejs"&gt;When to Use Fuse.js&lt;a class="anchor" href="#when-to-use-fusejs"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Search functionality is useful for many types of websites, allowing users to
efficiently find what they are looking for. But why would we choose to use
Fuse.js specifically?&lt;/p&gt;
&lt;p&gt;There are many options for powering search, and perhaps the simplest is to use
the existing database. Postgres has a &lt;a href="https://www.postgresql.org/docs/current/textsearch.html"&gt;full text search
feature&lt;/a&gt;, for example.
MySQL &lt;a href="https://dev.mysql.com/doc/refman/8.0/en/fulltext-search.html"&gt;does as
well&lt;/a&gt;, and Redis
has a &lt;a href="https://oss.redislabs.com/redisearch/"&gt;RediSearch module&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are also dedicated search engines, with
&lt;a href="https://www.elastic.co/elasticsearch/"&gt;Elasticsearch&lt;/a&gt; and
&lt;a href="https://solr.apache.org/"&gt;Solr&lt;/a&gt; being the most popular. These require a more
involved setup, but they have advanced functionality that you might need for
your use case.&lt;/p&gt;
&lt;p&gt;Lastly, you could use a search-as-a-service platform like
&lt;a href="https://www.algolia.com/"&gt;Algolia&lt;/a&gt; or &lt;a href="https://swiftype.com/"&gt;Swiftype&lt;/a&gt;. These
services run their own search infrastructures. You just provide the data,
configuration, and queries over an API.&lt;/p&gt;
&lt;p&gt;You might not need the power exposed by these solutions, however, which can
require a fair amount of work to implement, not to mention the cost. If you
don’t have too much data to search through, Fuse.js requires minimal setup and
can provide a search experience that is still much better than what you might be
able to come up with yourself.&lt;/p&gt;
&lt;p&gt;As far as how much data is too much for Fuse.js, consider that Fuse.js needs
access to the entire dataset, so you’ll need to load it all on the client side.
If the dataset is 100MB in size, that’s beyond what is reasonable to send to the
client. But if it’s only a few kilobytes, it could be a great candidate for
Fuse.js.&lt;/p&gt;
&lt;h2 id="building-a-fusejs--react-demo-application"&gt;Building a Fuse.js + React Demo Application&lt;a class="anchor" href="#building-a-fusejs--react-demo-application"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let’s make a basic React application that uses Fuse.js to allow the user to
search for dog breeds. You can view the final result
&lt;a href="https://dannyguo.com/react-with-fuse-demo/"&gt;here&lt;/a&gt;, and the source code is
available on &lt;a href="https://github.com/dguo/react-with-fuse-demo"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We’ll begin by setting up some scaffolding. Starting from a new Node.js project,
we’ll install React and Fuse.js:&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;npm&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;install&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;--save&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;react&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;react-dom&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;fuse.js&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;# or&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;yarn&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;react&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;react-dom&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;fuse.js&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’ll also install &lt;a href="https://github.com/parcel-bundler/parcel"&gt;Parcel&lt;/a&gt; as a
development dependency:&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;npm&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;install&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;--save-dev&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;parcel@2.0.0-beta.1&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;# or&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;yarn&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;--dev&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;parcel@2.0.0-beta.1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’ll use it in a &lt;code&gt;package.json&lt;/code&gt; start script to compile the application:&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;"scripts"&lt;/span&gt;&lt;span&gt;: {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;"start"&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;"parcel serve ./index.html --open"&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we’ll create a barebones &lt;code&gt;index.html&lt;/code&gt; that contains an empty &lt;code&gt;div&lt;/code&gt; for
React to render into and a &lt;code&gt;noscript&lt;/code&gt; message to avoid a blank page in case the
user has JavaScript disabled.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"en"&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"app"&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &amp;lt;&lt;/span&gt;&lt;span&gt;noscript&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      &amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;Please enable JavaScript to view this page.&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &amp;lt;/&lt;/span&gt;&lt;span&gt;noscript&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"./index.js"&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’ll make our &lt;code&gt;index.js&lt;/code&gt; simple to start. We’ll render a form that has an input
for the search query, though we won’t actually handle the search just yet.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; React, { useState } &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"react"&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; ReactDom &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"react-dom"&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Search&lt;/span&gt;&lt;span&gt;() {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &amp;lt;&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      &amp;lt;&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;htmlFor&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"query"&lt;/span&gt;&lt;span&gt;&amp;gt;Search for a dog breed:&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      &amp;lt;&lt;/span&gt;&lt;span&gt;input&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"search"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"query"&lt;/span&gt;&lt;span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      &amp;lt;&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;Search&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  );&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;ReactDom.&lt;/span&gt;&lt;span&gt;render&lt;/span&gt;&lt;span&gt;(&amp;lt;&lt;/span&gt;&lt;span&gt;Search&lt;/span&gt;&lt;span&gt; /&amp;gt;, document.&lt;/span&gt;&lt;span&gt;getElementById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"app"&lt;/span&gt;&lt;span&gt;));&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point, if you run &lt;code&gt;npm run start&lt;/code&gt; or &lt;code&gt;yarn run start&lt;/code&gt;, Parcel should
open the website in your browser, and you should see the form.&lt;/p&gt;
&lt;h3 id="implementing-search"&gt;Implementing Search&lt;a class="anchor" href="#implementing-search"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Let’s implement the search now. We’ll start with a component that shows the
search results. We need to handle three cases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When the user hasn’t performed a search yet&lt;/li&gt;
&lt;li&gt;When there are no results for the query (because we don’t want the user to
think something is broken)&lt;/li&gt;
&lt;li&gt;When there are results to show&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We’ll display any results in an &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol"&gt;ordered
list&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;SearchResults&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;props.results) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;props.results.length) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;There are no results for your query.&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &amp;lt;&lt;/span&gt;&lt;span&gt;ol&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;props.results.&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;((&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;={&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;li&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      ))&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &amp;lt;/&lt;/span&gt;&lt;span&gt;ol&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  );&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s also write our own search function. Later, we’ll be able to compare the
results from our naive approach with the results from Fuse.js.&lt;/p&gt;
&lt;p&gt;Our approach is simple. We’ll go through the array of dog breeds (from &lt;a href="https://github.com/dariusk/corpora/blob/master/data/animals/dogs.json"&gt;this
JSON
list&lt;/a&gt;)
and return any breeds that include the entire search query. We’ll also make
everything lowercase to make it a case-insensitive search.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; dogs &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;"Affenpinscher"&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;"Afghan Hound"&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;"Aidi"&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;"Airedale Terrier"&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;"Akbash Dog"&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;"Akita"&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;// More breeds..&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;];&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;searchWithBasicApproach&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;query) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; [];&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; dogs.&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;((&lt;/span&gt;&lt;span&gt;dog&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; dog.&lt;/span&gt;&lt;span&gt;toLowerCase&lt;/span&gt;&lt;span&gt;().&lt;/span&gt;&lt;span&gt;includes&lt;/span&gt;&lt;span&gt;(query.&lt;/span&gt;&lt;span&gt;toLowerCase&lt;/span&gt;&lt;span&gt;()));&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, let’s link it all together by getting the search query from the form
submission, performing the search, and displaying the results.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Search&lt;/span&gt;&lt;span&gt;() {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; [searchResults, setSearchResults] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;useState&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &amp;lt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      &amp;lt;&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;onSubmit&lt;/span&gt;&lt;span&gt;={&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;event&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;          event.&lt;/span&gt;&lt;span&gt;preventDefault&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; query &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; event.target.elements.query.value;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; results &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;searchWithBasicApproach&lt;/span&gt;&lt;span&gt;(query);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;          &lt;/span&gt;&lt;span&gt;setSearchResults&lt;/span&gt;&lt;span&gt;(results);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        }&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      &amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;htmlFor&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"query"&lt;/span&gt;&lt;span&gt;&amp;gt;Search for a dog breed:&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;&lt;/span&gt;&lt;span&gt;input&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"search"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"query"&lt;/span&gt;&lt;span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;Search&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      &amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      &amp;lt;&lt;/span&gt;&lt;span&gt;SearchResults&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;results&lt;/span&gt;&lt;span&gt;={&lt;/span&gt;&lt;span&gt;searchResults&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &amp;lt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  );&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="adding-fusejs"&gt;Adding Fuse.js&lt;a class="anchor" href="#adding-fusejs"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Adding Fuse.js is straightforward. We need to import it, let it index the data
using &lt;code&gt;new Fuse()&lt;/code&gt;, and then use the index’s search function. The search returns
some metadata, so we’ll pull out just the actual items for display.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; Fuse &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"fuse.js"&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; fuse &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Fuse&lt;/span&gt;&lt;span&gt;(dogs);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;searchWithFuse&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;query&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;query) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; [];&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; fuse.&lt;/span&gt;&lt;span&gt;search&lt;/span&gt;&lt;span&gt;(query).&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;((&lt;/span&gt;&lt;span&gt;result&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; result.item);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The metadata includes a &lt;code&gt;refIndex&lt;/code&gt; integer that lets us refer back to the
corresponding item in the original dataset. If we initialize the index with &lt;code&gt;new Fuse(dogs, {includeScore: true})&lt;/code&gt;, we’ll also get the match score: a value
between 0 and 1, where 0 is a perfect match. A search result for “husky” would
then look something like this:&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;[&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    item: &lt;/span&gt;&lt;span&gt;"Siberian Husky"&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    refIndex: &lt;/span&gt;&lt;span&gt;386&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    score: &lt;/span&gt;&lt;span&gt;0.18224241177399383&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’ll add a checkbox to the &lt;code&gt;Search&lt;/code&gt; component’s form to let the user choose
whether to use Fuse.js instead of the basic search function.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;onSubmit&lt;/span&gt;&lt;span&gt;={&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;event&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    event.&lt;/span&gt;&lt;span&gt;preventDefault&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; query &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; event.target.elements.query.value;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; useFuse &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; event.target.elements.fuse.checked;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;setSearchResults&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      useFuse &lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;searchWithFuse&lt;/span&gt;&lt;span&gt;(query) &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;searchWithBasicApproach&lt;/span&gt;&lt;span&gt;(query)&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    );&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  }&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &amp;lt;&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;htmlFor&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"query"&lt;/span&gt;&lt;span&gt;&amp;gt;Search for a dog breed: &amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &amp;lt;&lt;/span&gt;&lt;span&gt;input&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"search"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"query"&lt;/span&gt;&lt;span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &amp;lt;&lt;/span&gt;&lt;span&gt;input&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"checkbox"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"fuse"&lt;/span&gt;&lt;span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &amp;lt;&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;htmlFor&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"fuse"&lt;/span&gt;&lt;span&gt;&amp;gt; Use Fuse.js&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &amp;lt;&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;Search&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can search with Fuse.js! We can use the checkbox to compare using it
versus not using it. The biggest difference is that Fuse.js is tolerant of typos
(through &lt;a href="https://en.wikipedia.org/wiki/Approximate_string_matching"&gt;approximate string
matching&lt;/a&gt;), whereas
our basic search requires exact matches. Check out the basic search results if
we misspell “retriever” as “retreiver”:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://imgur.com/UYHn98y.jpg" alt="no search results"&gt;&lt;/p&gt;
&lt;p&gt;And here are the much more useful Fuse.js results for the same query:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://imgur.com/sfXrkxe.jpg" alt="Fuse.js search results"&gt;&lt;/p&gt;
&lt;h3 id="searching-multiple-fields"&gt;Searching Multiple Fields&lt;a class="anchor" href="#searching-multiple-fields"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Our search may be more complicated if we care about multiple fields. For
example, imagine that we want to search by both breed and country of origin.
Fuse.js supports this use case. When we create the index, we can specify the
object keys to index.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; dogs &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  {breed: &lt;/span&gt;&lt;span&gt;"Affenpinscher"&lt;/span&gt;&lt;span&gt;, origin: &lt;/span&gt;&lt;span&gt;"Germany"&lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  {breed: &lt;/span&gt;&lt;span&gt;"Afghan Hound"&lt;/span&gt;&lt;span&gt;, origin: &lt;/span&gt;&lt;span&gt;"Afghanistan"&lt;/span&gt;&lt;span&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;// More breeds..&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;];&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; fuse &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Fuse&lt;/span&gt;&lt;span&gt;(dogs, {keys: [&lt;/span&gt;&lt;span&gt;"breed"&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;"origin"&lt;/span&gt;&lt;span&gt;]});&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, Fuse.js will search both the &lt;code&gt;breed&lt;/code&gt; and &lt;code&gt;origin&lt;/code&gt; fields.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;a class="anchor" href="#conclusion"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes we don’t want to spend the resources to set up a full-fledged
Elasticsearch instance. When we have simple needs, Fuse.js can provide a
correspondingly simple solution. And as we’ve seen, using it with React is also
straightforward.&lt;/p&gt;
&lt;p&gt;Even if we need more advanced functionality, Fuse.js allows for giving
&lt;a href="https://fusejs.io/examples.html#weighted-search"&gt;different fields different
weights&lt;/a&gt;, adding &lt;code&gt;AND&lt;/code&gt; and &lt;code&gt;OR&lt;/code&gt;
&lt;a href="https://fusejs.io/api/query.html"&gt;logic&lt;/a&gt;, &lt;a href="https://fusejs.io/api/options.html#fuzzy-matching-options"&gt;tuning the fuzzy match
logic&lt;/a&gt;, and so on.
Consider it the next time you need to add search to an application.&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/using-fuse.js-to-add-dynamic-search-to-a-react-app</guid><pubDate>Sun, 18 Apr 2021 00:00:00 GMT</pubDate></item><item><title>How to Fix instanceof Not Working For Custom Errors in TypeScript</title><link>https://www.dannyguo.com/blog/how-to-fix-instanceof-not-working-for-custom-errors-in-typescript</link><description>&lt;article&gt;
        &lt;h1&gt;How to Fix instanceof Not Working For Custom Errors in TypeScript&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2021-04-17"&gt;
                April 17, 2021
            &lt;/time&gt;
             · 
            277 words  ·  ~2 minutes to read
            
        &lt;/div&gt;

        &lt;p&gt;In JavaScript, you can create custom errors by extending the built-in &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error"&gt;Error
object&lt;/a&gt;
(ever since &lt;a href="https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_%E2%80%93_ECMAScript_2015"&gt;ES
2015&lt;/a&gt;).&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;DatabaseError&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;extends&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Error&lt;/span&gt;&lt;span&gt; {}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can do the same thing in &lt;a href="https://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt;, but
there is an important caveat if your &lt;code&gt;tsconfig.json&lt;/code&gt; has a compilation
&lt;a href="https://www.typescriptlang.org/tsconfig#target"&gt;target&lt;/a&gt; of ES3 or ES5. In that
case, &lt;code&gt;instanceof&lt;/code&gt; doesn’t work, which breaks any logic that is based on whether
or not an error is a case of the custom error.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;DatabaseError&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;extends&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Error&lt;/span&gt;&lt;span&gt; {}&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; error &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;DatabaseError&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"Unique constraint violation"&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;// prints "true"&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;console.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(error &lt;/span&gt;&lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Error&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;// incorrectly prints "false"&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;console.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(error &lt;/span&gt;&lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;DatabaseError&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can try &lt;a href="https://www.typescriptlang.org/play?target=1&amp;amp;ts=4.2.3#code/MYGwhgzhAEAiYBcwCNIFMCiAnLB7L0aAHgmgHYAmM2eBA3gL4BQTwuZEChO+0AvNDJoA7nEQp0NfAAoARAFUyASwCOAVzTQ2HBFjBKyXAG5Lc4BKbKyAlAG4WAegfQADlgMIYs3Rtmt2EGZoAHQguADm0mg8BAacYGTAaLgAZtBSWHZMTtAGbDhowAggAJ6u7oZeKWAgEGh+2oEgIWGR0bS5OglJqWJIqHUZdkA"&gt;this out
yourself&lt;/a&gt;
in the TypeScript playground. This is a &lt;a href="https://github.com/microsoft/TypeScript/issues/13965"&gt;known
issue&lt;/a&gt; that started with
&lt;a href="https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work"&gt;TypeScript version
2.1&lt;/a&gt;.
The recommended fix is to manually set the prototype in the constructor.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;DatabaseError&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;extends&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Error&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;constructor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;(message);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        Object.&lt;/span&gt;&lt;span&gt;setPrototypeOf&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;DatabaseError&lt;/span&gt;&lt;span&gt;.prototype);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; error &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;DatabaseError&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"Unique constraint violation"&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;// both print "true" now&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;console.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(error &lt;/span&gt;&lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Error&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;console.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(error &lt;/span&gt;&lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;DatabaseError&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Any custom errors which further extend &lt;code&gt;DatabaseError&lt;/code&gt; still need the same
adjustment.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;DatabaseError&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;extends&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Error&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;constructor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;(message);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        Object.&lt;/span&gt;&lt;span&gt;setPrototypeOf&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;DatabaseError&lt;/span&gt;&lt;span&gt;.prototype);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;DatabaseConnectionError&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;extends&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;DatabaseError&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;constructor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;string&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;super&lt;/span&gt;&lt;span&gt;(message);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        Object.&lt;/span&gt;&lt;span&gt;setPrototypeOf&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;DatabaseConnectionError&lt;/span&gt;&lt;span&gt;.prototype);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; error &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;DatabaseConnectionError&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"Invalid credentials"&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;// all print "true"&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;console.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(error &lt;/span&gt;&lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Error&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;console.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(error &lt;/span&gt;&lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;DatabaseError&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;console.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(error &lt;/span&gt;&lt;span&gt;instanceof&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;DatabaseConnectionError&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="upgrade-the-compilation-target"&gt;Upgrade the Compilation Target&lt;a class="anchor" href="#upgrade-the-compilation-target"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Remember that this is only an issue if your compilation target is ES3 or ES5.
Instead of having to remember to set the prototype, you could consider upgrading
your target to ES 2015 or even later. ES 2015 has &lt;a href="https://caniuse.com/es6"&gt;over 97% browser
support&lt;/a&gt;, so it may be a reasonable choice for you,
especially if you are okay with dropping support for Internet Explorer.&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/how-to-fix-instanceof-not-working-for-custom-errors-in-typescript</guid><pubDate>Sat, 17 Apr 2021 00:00:00 GMT</pubDate></item><item><title>Is Safari the Next Internet Explorer?</title><link>https://blog.logrocket.com/safari-next-internet-explorer/</link><description>&lt;article&gt;
        &lt;h1&gt;Is Safari the Next Internet Explorer?&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2021-01-08"&gt;
                January 8, 2021
            &lt;/time&gt;
             · 
            1,175 words  ·  ~6 minutes to read
            
        &lt;/div&gt;

        &lt;p&gt;&lt;em&gt;This post was originally written for the &lt;a href="https://blog.logrocket.com/safari-next-internet-explorer/"&gt;LogRocket
blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;At its peak in 2004, Microsoft’s Internet Explorer (IE) accounted for an
&lt;a href="https://www.visualcapitalist.com/internet-browser-market-share/"&gt;estimated 95&lt;/a&gt;
&lt;a href="https://www.visualcapitalist.com/internet-browser-market-share/"&gt;percent&lt;/a&gt; &lt;a href="https://www.visualcapitalist.com/internet-browser-market-share/"&gt;of
the browser
market&lt;/a&gt;. As
Firefox and Chrome grew more popular, it became increasingly important for web
developers to build websites with cross-browser compatibility in mind.&lt;/p&gt;
&lt;p&gt;IE caused web developers a lot of pain, however, because many bugs applied
exclusively to IE and because it sometimes &lt;a href="https://www.wired.com/2016/01/the-sorry-legacy-of-microsoft-internet-explorer/"&gt;lagged
behind&lt;/a&gt;
in implementing new features after the World Wide Web Consortium (W3C)
standardized them.&lt;/p&gt;
&lt;p&gt;IE was so popular that it maintained a persistent market share, even after
Microsoft themselves moved on from it with Edge. In 2016, the company ended
support for &lt;a href="https://venturebeat.com/2016/01/12/microsoft-ends-support-for-ie8-ie9-ie10-and-windows-8/"&gt;all versions under
11&lt;/a&gt;.
While Microsoft will update IE 11 for the entirety of Windows 10’s lifespan,
they are aggressively pushing to get people off of IE. Microsoft services &lt;a href="https://www.theverge.com/2020/8/17/21372487/microsoft-internet-explorer-11-support-end-365-legacy-edge"&gt;will
drop support in
2021&lt;/a&gt;,
and Windows will start to &lt;a href="https://www.theverge.com/2020/10/27/21537274/microsoft-internet-explorer-force-open-edge-website"&gt;automatically launch certain websites in
Edge&lt;/a&gt;
when users try to open them in IE.&lt;/p&gt;
&lt;p&gt;While IE is very close to becoming a relic of internet history, some people have
claimed that &lt;a href="https://nolanlawson.com/2015/06/30/safari-is-the-new-ie/"&gt;Safari is the new
IE&lt;/a&gt;. Let’s consider
the similarities and differences between the IE and Safari situations to see how
valid the comparison is as of the beginning of 2021.&lt;/p&gt;
&lt;h2 id="market-share"&gt;Market Share&lt;a class="anchor" href="#market-share"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Being the next IE implies having a market share that is large enough for many
developers to worry about. On
&lt;a href="https://gs.statcounter.com/browser-market-share/desktop/worldwide"&gt;desktop&lt;/a&gt;,
Chrome is the clear leader, with about 68 percent of the market. Safari is
second with about 10 percent. That’s a fairly large population on its own, but
the bigger reason developers have to pay attention to Safari is because of its
mobile version on iOS and iPadOS.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://www.zdnet.com/article/which-browser-is-most-popular-on-each-major-operating-system/"&gt;vast
majority&lt;/a&gt;
of iPhone users use Safari. But it’s also important to know that Safari’s
engine, WebKit, is &lt;a href="https://apple.stackexchange.com/a/350674/275342"&gt;the only browser engine allowed on
iOS&lt;/a&gt;. Even Chrome and Firefox
for iOS have to use WebKit under the hood to comply with Apple’s &lt;a href="https://developer.apple.com/app-store/review/guidelines/#software-requirements"&gt;App Store
review
guidelines&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Apps that browse the web must use the appropriate WebKit framework and WebKit
Javascript.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So any web developer who cares about iPhone and iPad users absolutely has to
care about Safari.&lt;/p&gt;
&lt;p&gt;Nevertheless, the overall situation is much better than the past one with IE.
Safari is still only about 19 percent of the &lt;a href="https://gs.statcounter.com/browser-market-share/"&gt;total browser
market&lt;/a&gt;. That’s nowhere near
IE’s former level of monopoly-like dominance.&lt;/p&gt;
&lt;p&gt;Unless a website has a disproportionately large iOS and iPadOS user base, any
issues with Safari are unlikely to be as severe in impact as issues that were
unique to IE in its heyday. “This bug affects 95 percent of our users” is simply
not as alarming as “this bug affects 19 percent of our users.”&lt;/p&gt;
&lt;h2 id="os-updates"&gt;OS Updates&lt;a class="anchor" href="#os-updates"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Another big issue with IE is its relationship to new Windows versions. Each
version of Windows only supports
&lt;a href="https://en.wikipedia.org/wiki/Internet_Explorer_version_history#OS_compatibility"&gt;up&lt;/a&gt;
&lt;a href="https://en.wikipedia.org/wiki/Internet_Explorer_version_history#OS_compatibility"&gt;to&lt;/a&gt;
&lt;a href="https://en.wikipedia.org/wiki/Internet_Explorer_version_history#OS_compatibility"&gt;a certain version of
IE&lt;/a&gt;.
For example, Windows XP only supports up to IE 8, and Windows Vista only
supports up to IE 9.&lt;/p&gt;
&lt;p&gt;So even if new IE versions fixed issues and implemented features, there was
still the problem of users being stuck on older versions of IE because they
hadn’t upgraded Windows. Safari is in a similar situation because its updates
are also tied to OS updates. However, this is mitigated by a couple factors.&lt;/p&gt;
&lt;p&gt;The first is that OS updates are free now. In the past, we had to pay for new
Windows and OS X versions. Now that they’re free, there is much less friction in
getting people to upgrade.&lt;/p&gt;
&lt;p&gt;Apple is also persistent in pushing updates, such as by issuing &lt;a href="https://www.macworld.com/article/3447396/how-to-stop-getting-a-reminder-to-update-to-catalina-in-macos.html"&gt;repeated
prompts to
update&lt;/a&gt;.
New iOS versions tend to reach &lt;a href="https://9to5mac.com/2020/06/19/apple-says-ios-13-is-now-running-on-81-of-all-devices-ipados-adoption-hits-73/"&gt;high adoption
rates&lt;/a&gt;
soon after launch, especially when compared to adoption rates for new Android
versions.&lt;/p&gt;
&lt;p&gt;It also helps that Apple supports devices going back several years. For example,
iOS 14 works on iPhones all the way back to the iPhone 6S, which is five years
old at this point. As a result, it’s not a big problem in practice for Safari
updates to coincide with OS updates.&lt;/p&gt;
&lt;h2 id="features-and-bugs"&gt;Features and Bugs&lt;a class="anchor" href="#features-and-bugs"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://caniuse.com/"&gt;Can I use&lt;/a&gt; provides a &lt;a href="https://caniuse.com/?compare=edge+87,firefox+85,chrome+90,safari+TP,ios_saf+14,and_chr+86&amp;amp;compareCats=all"&gt;comparison of supported
features&lt;/a&gt;
between the latest versions of the major browsers. There aren’t many features
that Safari is still missing. Developers have complained in the past about lack
of support for things like &lt;a href="https://caniuse.com/rtcpeerconnection"&gt;WebRTC&lt;/a&gt; and
&lt;a href="https://caniuse.com/webp"&gt;WebP&lt;/a&gt;, but Safari has those now.&lt;/p&gt;
&lt;p&gt;Safari does still have some holdouts, such as Web Bluetooth and Web USB. But
these are relatively advanced, nice-to-have features rather than features that
would be widely used by typical websites. Apple may not always adopt W3C
standards, but the impact should not be as severe as when IE was slow to do so
for more critical standards.&lt;/p&gt;
&lt;p&gt;Mozilla’s &lt;a href="https://mdn-web-dna.s3-us-west-2.amazonaws.com/MDN-Browser-Compatibility-Report-2020.pdf"&gt;2020 MDN Browser Compatibility
Report&lt;/a&gt;
gives us some insight into the community’s opinions. For the survey question of
“What browsers/platforms cause the most issues?”, mobile Safari and desktop
Safari come right after IE.&lt;/p&gt;
&lt;p&gt;We also have reason to believe that Safari tends to be buggier than other modern
browsers because of Bootstrap’s &lt;a href="https://getbootstrap.com/docs/4.5/browser-bugs/"&gt;wall of browser
bugs&lt;/a&gt;. Safari has the most
listed issues, and this is probably a good estimation of the overall situation
since Bootstrap has so many generally useful components.&lt;/p&gt;
&lt;p&gt;Relatively speaking, Safari does cause more pain than other modern browsers. But
as long as there is competition, there will always be one browser that tends to
be worse for development than others. The gap between Safari and the other
browsers is not nearly as bad as it was for IE, and the gap is so much smaller
that I don’t think it’s fair to call Safari the next IE at this point.&lt;/p&gt;
&lt;h2 id="extensions"&gt;Extensions&lt;a class="anchor" href="#extensions"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Safari also had its own framework for extensions. First, there was a proprietary
system for &lt;code&gt;.safariextz&lt;/code&gt; extensions. Apple &lt;a href="https://www.howtogeek.com/fyi/macos-mojave-will-break-a-bunch-of-safari-extensions/"&gt;finished deprecating those in
2018&lt;/a&gt;
in favor of Safari App Extensions. But starting with version 14, Safari supports
the &lt;a href="https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions"&gt;WebExtensions
API&lt;/a&gt;
that Chrome (and its derivatives like Edge and Opera) and Firefox use.&lt;/p&gt;
&lt;p&gt;While there are &lt;a href="https://developer.apple.com/documentation/safariservices/safari_web_extensions/assessing_your_safari_web_extension_s_browser_compatibility"&gt;certain
incompatibilities&lt;/a&gt;,
this is a big step forward for extension developers because at least the core
API is the same across all major browsers. Making a cross-browser extension will
be much easier going forward.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;a class="anchor" href="#conclusion"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;On the surface, the situation with Safari seems similar to our old situation
with IE, but there are crucial differences that make it hard to justify
referring to Safari as the next IE. Even if Safari is slower than the other
browsers at fixing bugs and implementing features, at least we can expect those
changes to make it to end users much faster than they did for IE users.&lt;/p&gt;
&lt;p&gt;The pain of dealing with Safari-specific issues is not in the same realm as what
web developers had to deal with in supporting IE users. There will inevitably be
some degree of difficulty in maintaining cross-browser compatibility, but the
challenge is much easier now, especially because resources like Can I use and
MDN make incompatibilities easy to know about ahead of time.&lt;/p&gt;
&lt;p&gt;Luckily for us, no browser is truly taking up IE’s mantle. I don’t blame any
developers who &lt;a href="https://news.ycombinator.com/item?id=24186243"&gt;complain about
Safari&lt;/a&gt;, but there’s a
categorical difference in developing for Safari now versus developing for IE in
the past. I, for one, am thankful for that.&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/is-safari-the-next-internet-explorer</guid><pubDate>Fri, 08 Jan 2021 00:00:00 GMT</pubDate></item><item><title>How to Concatenate Strings in Lua</title><link>https://www.dannyguo.com/blog/how-to-concatenate-strings-in-lua</link><description>&lt;article&gt;
        &lt;h1&gt;How to Concatenate Strings in Lua&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2020-12-28"&gt;
                December 28, 2020
            &lt;/time&gt;
             · 
            434 words  ·  ~3 minutes to read
            
        &lt;/div&gt;

        &lt;p&gt;The most straightforward way to concatenate (or combine) strings in
&lt;a href="https://www.lua.org/about.html"&gt;Lua&lt;/a&gt; is to use the dedicated &lt;a href="https://www.lua.org/pil/3.4.html"&gt;string
concatenation operator&lt;/a&gt;, which is two periods
(&lt;code&gt;..&lt;/code&gt;).&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;message &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"Hello, " &lt;/span&gt;&lt;span&gt;..&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"world!"&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;-- message equals "Hello, World!"&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Numbers are coerced to strings. For fine-grained control over number formatting,
use
&lt;a href="https://www.lua.org/manual/5.4/manual.html#pdf-string.format"&gt;string.format&lt;/a&gt;,
which behaves mostly like C’s
&lt;a href="https://www.cplusplus.com/reference/cstdio/printf/"&gt;printf&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;count &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;42&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;message &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"The count is: " &lt;/span&gt;&lt;span&gt;..&lt;/span&gt;&lt;span&gt; count&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;-- message equals "The count is: 42"&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Trying to concatenate other &lt;a href="https://www.lua.org/pil/2.html"&gt;types&lt;/a&gt;, like nil or
a table, will result in an error.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;count &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;nil&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;message &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"The count is: " &lt;/span&gt;&lt;span&gt;..&lt;/span&gt;&lt;span&gt; count&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;-- results in an "attempt to concatenate a nil value" error&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that Lua &lt;a href="https://stackoverflow.com/q/20091779/1481479"&gt;doesn’t have&lt;/a&gt;
syntactic sugar for &lt;a href="https://en.wikipedia.org/wiki/Augmented_assignment"&gt;augmented
assignment&lt;/a&gt;. The following
is invalid syntax.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;message &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"Hello, "&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;message &lt;/span&gt;&lt;span&gt;..=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"world!"&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;-- results in a "syntax error near '..'" error&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Strings in Lua are &lt;a href="https://www.lua.org/pil/2.4.html"&gt;immutable&lt;/a&gt;, so the
concatenation result (&lt;code&gt;message&lt;/code&gt; in this example) is a brand new string.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;start &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"Hello, "&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;message &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; start &lt;/span&gt;&lt;span&gt;..&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"world!"&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;start &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"Bye, "&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;-- message still equals "Hello, World!"&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="tableconcat"&gt;table.concat&lt;a class="anchor" href="#tableconcat"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you need to perform many concatenation operations, using the concatenation
operator can be slow because Lua has to keep reallocating memory to create new
strings.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;message &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;""&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; i&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;100000&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  message &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; message &lt;/span&gt;&lt;span&gt;..&lt;/span&gt;&lt;span&gt; i&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a result, it &lt;a href="https://www.reddit.com/r/lua/comments/1t6ois/tableconcat_is_fast/"&gt;can be much
faster&lt;/a&gt; to
use &lt;a href="https://www.lua.org/manual/5.4/manual.html#6.6"&gt;table.concat&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;numbers &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; {}&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; i&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;100000&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  numbers[i] &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; i&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;message &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;table.concat&lt;/span&gt;&lt;span&gt;(numbers)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s a benchmark comparsion (using
&lt;a href="https://github.com/sharkdp/hyperfine"&gt;hyperfine&lt;/a&gt;) from running the &lt;code&gt;..&lt;/code&gt; example
as &lt;code&gt;slow.lua&lt;/code&gt; and running the &lt;code&gt;table.concat&lt;/code&gt; example as &lt;code&gt;fast.lua&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;hyperfine&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;'lua slow.lua'&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;# Benchmark #1: lua slow.lua&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;#   Time (mean ± σ):      1.287 s ±  0.115 s    [User: 1.120 s, System: 0.078 s]&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;#   Range (min … max):    1.187 s …  1.528 s    10 runs&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;hyperfine&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;'lua fast.lua'&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;# Benchmark #1: lua fast.lua&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;#   Time (mean ± σ):      39.3 ms ±   3.8 ms    [User: 34.6 ms, System: 2.8 ms]&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;#   Range (min … max):    35.3 ms …  58.3 ms    48 runs&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The difference probably doesn’t matter in most cases, but it’s a good
optimization to be aware of.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;table.concat&lt;/code&gt; can also be easier to use because it can take a separator
argument to add between elements.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;message &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;table.concat&lt;/span&gt;&lt;span&gt;({&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;})&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;-- message equals "12345"&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;message &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;table.concat&lt;/span&gt;&lt;span&gt;({&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;}, &lt;/span&gt;&lt;span&gt;", "&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;-- message equals "1, 2, 3, 4, 5"&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It can also take start and end indexes. Keep in mind that Lua arrays &lt;a href="https://www.lua.org/pil/11.1.html"&gt;start with
index 1&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;message &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;table.concat&lt;/span&gt;&lt;span&gt;({&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;}, &lt;/span&gt;&lt;span&gt;", "&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;-- message equals "2, 3, 4"&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="direct-approach"&gt;Direct Approach&lt;a class="anchor" href="#direct-approach"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Depending on your use case, you might be able to save some memory usage over
&lt;code&gt;table.concat&lt;/code&gt; by generating the result directly.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; i&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;100000&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;io.stdout&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;write&lt;/span&gt;&lt;span&gt;(i)&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/how-to-concatenate-strings-in-lua</guid><pubDate>Mon, 28 Dec 2020 00:00:00 GMT</pubDate></item><item><title>How to Improve Interface Responsiveness With Web Workers</title><link>https://blog.logrocket.com/how-to-improve-interface-responsiveness-with-web-workers/</link><description>&lt;article&gt;
        &lt;h1&gt;How to Improve Interface Responsiveness With Web Workers&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2020-10-21"&gt;
                October 21, 2020
            &lt;/time&gt;
             · 
            1,497 words  ·  ~8 minutes to read
            
        &lt;/div&gt;

        &lt;p&gt;&lt;em&gt;This post was originally written for the &lt;a href="https://blog.logrocket.com/how-to-improve-interface-responsiveness-with-web-workers/"&gt;LogRocket
blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;JavaScript is &lt;a href="https://en.wikipedia.org/wiki/Thread_(computing)#Single_threading"&gt;single
threaded&lt;/a&gt;, so
any JavaScript that runs also stops web pages from being responsive. This isn’t
a problem in many cases because the code runs quickly enough that any UI stutter
is effectively imperceptible by the user. However, it can become a significant
problem if the code is computationally expensive or if the user’s hardware is
underpowered.&lt;/p&gt;
&lt;h2 id="web-workers"&gt;Web Workers&lt;a class="anchor" href="#web-workers"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One way to mitigate the problem is to avoid putting so much work on the main
thread by offloading work onto background threads. Other platforms, like
&lt;a href="https://developer.android.com/guide/components/processes-and-threads"&gt;Android&lt;/a&gt;
and
&lt;a href="https://developer.apple.com/documentation/xcode/improving_your_app_s_performance/improving_app_responsiveness"&gt;iOS&lt;/a&gt;,
stress making the main thread deal with as little non-UI work as possible.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API"&gt;Web Workers
API&lt;/a&gt; is the
web equivalent of Android and iOS background threads. &lt;a href="https://caniuse.com/#feat=webworkers"&gt;Over
97%&lt;/a&gt; of browsers support workers.&lt;/p&gt;
&lt;h2 id="demo"&gt;Demo&lt;a class="anchor" href="#demo"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let’s create a demo to demonstrate the problem and solution. You can also view
the final result &lt;a href="https://www.dannyguo.com/web-worker-demo"&gt;here&lt;/a&gt; and the source
code on &lt;a href="https://github.com/dguo/web-worker-demo"&gt;GitHub&lt;/a&gt;. We’ll start with a
bare bones &lt;code&gt;index.html&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"en"&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &amp;lt;&lt;/span&gt;&lt;span&gt;meta&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"utf-8"&lt;/span&gt;&lt;span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &amp;lt;&lt;/span&gt;&lt;span&gt;meta&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"viewport"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;content&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;Web Worker Demo&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"./index.js"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;async&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;The current time is: &amp;lt;&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"time"&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we’ll add &lt;code&gt;index.js&lt;/code&gt; to continuously update the time and display it like
&lt;code&gt;21:45:08.345&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;// So that the hour, minute, and second are always two digits each&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;padTime&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;number&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; number &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"0"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; number &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; number;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;getTime&lt;/span&gt;&lt;span&gt;() {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; now &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Date&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;padTime&lt;/span&gt;&lt;span&gt;(now.&lt;/span&gt;&lt;span&gt;getHours&lt;/span&gt;&lt;span&gt;()) &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;":"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;padTime&lt;/span&gt;&lt;span&gt;(now.&lt;/span&gt;&lt;span&gt;getMinutes&lt;/span&gt;&lt;span&gt;()) &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;":"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;padTime&lt;/span&gt;&lt;span&gt;(now.&lt;/span&gt;&lt;span&gt;getSeconds&lt;/span&gt;&lt;span&gt;()) &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;"."&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    now.&lt;/span&gt;&lt;span&gt;getMilliseconds&lt;/span&gt;&lt;span&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  );&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;setInterval&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  document.&lt;/span&gt;&lt;span&gt;getElementById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"time"&lt;/span&gt;&lt;span&gt;).innerText &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;getTime&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}, &lt;/span&gt;&lt;span&gt;50&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By setting the interval to the value of 50 milliseconds, we’ll see the time
update very quickly.&lt;/p&gt;
&lt;video&gt;
    &lt;source src="https://i.imgur.com/WbgtgYL.mp4" type="video/mp4"&gt;
    &lt;p&gt;Your browser doesn't support this embedded video.&lt;/p&gt;
&lt;/source&gt;&lt;/video&gt;
&lt;h3 id="setting-up-a-server"&gt;Setting up a Server&lt;a class="anchor" href="#setting-up-a-server"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Next, we’ll start a Node.js project with either &lt;code&gt;npm init&lt;/code&gt; or &lt;code&gt;yarn init&lt;/code&gt; and
install &lt;a href="https://parceljs.org/"&gt;Parcel&lt;/a&gt;. The first reason we want to use Parcel
is that &lt;a href="https://parceljs.org/"&gt;in Chrome, workers need to be served&lt;/a&gt; rather
than loaded from a local file. So when we add a worker later, we wouldn’t be
able to just open &lt;code&gt;index.html&lt;/code&gt; if we’re using Chrome. The second reason is that
Parcel has built-in web worker support that requires no configuration for our
demo. Other bundlers like &lt;a href="https://webpack.js.org/"&gt;Webpack&lt;/a&gt; would require &lt;a href="https://webpack.js.org/loaders/worker-loader/"&gt;more
setup&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I suggest adding a start command to &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;"scripts"&lt;/span&gt;&lt;span&gt;: {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;"start"&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;"parcel serve index.html --open"&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will let you run &lt;code&gt;npm start&lt;/code&gt; or &lt;code&gt;yarn start&lt;/code&gt; to build the files, start a
server, open the page in your browser, and automatically update the page when
you change the source files.&lt;/p&gt;
&lt;h3 id="image-q"&gt;Image-q&lt;a class="anchor" href="#image-q"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now let’s add something that’s computationally expensive. We’ll install
&lt;a href="https://github.com/ibezkrovnyi/image-quantization"&gt;image-q&lt;/a&gt;, an image
&lt;a href="https://en.wikipedia.org/wiki/Color_quantization"&gt;quantization&lt;/a&gt; library that
we’ll use to calculate the main colors of a given image, creating a color
palette from the image. Here’s an example.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/wnE6IsO.jpg" alt="color palette example"&gt;&lt;/p&gt;
&lt;p&gt;Let’s update the &lt;code&gt;body&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"center"&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;The current time is: &amp;lt;&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"time"&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;span&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &amp;lt;&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"image-url-form"&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      &amp;lt;&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"image-url"&lt;/span&gt;&lt;span&gt;&amp;gt;Direct image URL&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      &amp;lt;&lt;/span&gt;&lt;span&gt;input&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"url"&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"url"&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"https://upload.wikimedia.org/wikipedia/commons/1/1f/Grapsus_grapsus_Galapagos_Islands.jpg"&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      /&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      &amp;lt;&lt;/span&gt;&lt;span&gt;input&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"submit"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;value&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"Generate Color Palette"&lt;/span&gt;&lt;span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      &amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"error-message"&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"loader-wrapper"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"center"&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"loader"&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"colors-wrapper"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"center"&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"color-0"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"color"&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"color-1"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"color"&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"color-2"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"color"&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"color-3"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"color"&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &amp;lt;&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"center"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"image-link"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;target&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"_blank"&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &amp;lt;&lt;/span&gt;&lt;span&gt;img&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"image"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;crossorigin&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"anonymous"&lt;/span&gt;&lt;span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So we’re adding a form that takes a direct link to an image. Then we have a
loader to display a spinning animation during processing. We’ll adapt &lt;a href="https://codepen.io/mandelid/pen/vwKoe"&gt;this
CodePen&lt;/a&gt; to implement it. We also have
four divs that we’ll use to display the color palette. Finally, we’ll display
the image itself.&lt;/p&gt;
&lt;p&gt;Add some inline styles to the &lt;code&gt;head&lt;/code&gt;. This includes a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations"&gt;CSS
animation&lt;/a&gt;
for the spinning loader.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;style&lt;/span&gt;&lt;span&gt; type="text/css"&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;.center&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;display&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;block&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;margin&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;max-width&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;max-content&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;margin-top&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;25&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;margin-bottom&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;25&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;input&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"url"&lt;/span&gt;&lt;span&gt;] {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;display&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;block&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;padding&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;320&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;margin-top&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;#error-message&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;display&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;none&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;background-color&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;#f5e4e4&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;color&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;#b22222&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;border-radius&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;margin-top&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;padding&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;.color&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;80&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;display&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;inline-block&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;img&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;max-width&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;90&lt;/span&gt;&lt;span&gt;vw&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;max-height&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;500&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;margin-top&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;25&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;#image-link&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;display&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;none&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;#loader-wrapper&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;display&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;none&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;#loader&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;width&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;50&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;height&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;50&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;border&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;solid&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;#d3d3d3&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;border-radius&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;50&lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;border-top-color&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;green&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;animation&lt;/span&gt;&lt;span&gt;: spin &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;ease-in-out&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;infinite&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;-webkit-animation&lt;/span&gt;&lt;span&gt;: spin &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;s&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;ease-in-out&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;infinite&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;@keyframes&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;spin&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    to {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;-webkit-transform&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;rotate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;360&lt;/span&gt;&lt;span&gt;deg&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;@-webkit-keyframes&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;spin&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    to {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;-webkit-transform&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;rotate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;360&lt;/span&gt;&lt;span&gt;deg&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;#error-message&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;display&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;none&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;background-color&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;#f5e4e4&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;color&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;#b22222&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;border-radius&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;margin-top&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;padding&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;style&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Update &lt;code&gt;index.js&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; iq &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"image-q"&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;// Previous code for updating the time&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;setPalette&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;points&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  points.&lt;/span&gt;&lt;span&gt;forEach&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;point&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;index&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    document.&lt;/span&gt;&lt;span&gt;getElementById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"color-"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; index).style.backgroundColor &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;"rgb("&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; point.r &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;","&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; point.g &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;","&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; point.b &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;")"&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  });&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  document.&lt;/span&gt;&lt;span&gt;getElementById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"loader-wrapper"&lt;/span&gt;&lt;span&gt;).style.display &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"none"&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  document.&lt;/span&gt;&lt;span&gt;getElementById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"colors-wrapper"&lt;/span&gt;&lt;span&gt;).style.display &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"block"&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  document.&lt;/span&gt;&lt;span&gt;getElementById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"image-link"&lt;/span&gt;&lt;span&gt;).style.display &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"block"&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;handleError&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; errorMessage &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.&lt;/span&gt;&lt;span&gt;getElementById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"error-message"&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  errorMessage.innerText &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; message;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  errorMessage.style.display &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"block"&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  document.&lt;/span&gt;&lt;span&gt;getElementById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"loader-wrapper"&lt;/span&gt;&lt;span&gt;).style.display &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"none"&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  document.&lt;/span&gt;&lt;span&gt;getElementById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"image-link"&lt;/span&gt;&lt;span&gt;).style.display &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"none"&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;document&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  .&lt;/span&gt;&lt;span&gt;getElementById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"image-url-form"&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  .&lt;/span&gt;&lt;span&gt;addEventListener&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"submit"&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;event&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    event.&lt;/span&gt;&lt;span&gt;preventDefault&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; url &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; event.target.elements.url.value;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; image &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.&lt;/span&gt;&lt;span&gt;getElementById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"image"&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    image.&lt;/span&gt;&lt;span&gt;onload&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      document.&lt;/span&gt;&lt;span&gt;getElementById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"image-link"&lt;/span&gt;&lt;span&gt;).href &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; url;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; canvas &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.&lt;/span&gt;&lt;span&gt;createElement&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"canvas"&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      canvas.width &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; image.naturalWidth;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      canvas.height &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; image.naturalHeight;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; context &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; canvas.&lt;/span&gt;&lt;span&gt;getContext&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"2d"&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      context.&lt;/span&gt;&lt;span&gt;drawImage&lt;/span&gt;&lt;span&gt;(image, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; imageData &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; context.&lt;/span&gt;&lt;span&gt;getImageData&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        image.naturalWidth,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        image.naturalHeight&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      );&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; pointContainer &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; iq.utils.PointContainer.&lt;/span&gt;&lt;span&gt;fromImageData&lt;/span&gt;&lt;span&gt;(imageData);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; palette &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; iq.&lt;/span&gt;&lt;span&gt;buildPaletteSync&lt;/span&gt;&lt;span&gt;([pointContainer], { colors: &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt; });&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; points &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; palette._pointArray;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;setPalette&lt;/span&gt;&lt;span&gt;(points);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    };&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    image.&lt;/span&gt;&lt;span&gt;onerror&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;handleError&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"The image failed to load. Please double check the URL."&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    };&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    document.&lt;/span&gt;&lt;span&gt;getElementById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"error-message"&lt;/span&gt;&lt;span&gt;).style.display &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"none"&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    document.&lt;/span&gt;&lt;span&gt;getElementById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"loader-wrapper"&lt;/span&gt;&lt;span&gt;).style.display &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"block"&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    document.&lt;/span&gt;&lt;span&gt;getElementById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"colors-wrapper"&lt;/span&gt;&lt;span&gt;).style.display &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"none"&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    document.&lt;/span&gt;&lt;span&gt;getElementById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"image-link"&lt;/span&gt;&lt;span&gt;).style.display &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"none"&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    image.src &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; url;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  });&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;setPalette&lt;/code&gt; function sets the background colors of the color divs in order
to display the palette. We also have a &lt;code&gt;handleError&lt;/code&gt; function in case the image
fails to load.&lt;/p&gt;
&lt;p&gt;Then we listen for form submissions. Whenever we get a new submission, we set
the image element’s &lt;code&gt;onload&lt;/code&gt; function to extract the image data in a format that
is suitable for &lt;code&gt;image-q&lt;/code&gt;. So we &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API"&gt;draw the image in a
canvas&lt;/a&gt; so that we
can retrieve an
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/ImageData"&gt;ImageData&lt;/a&gt; object.&lt;/p&gt;
&lt;p&gt;We pass that object to &lt;code&gt;image-q&lt;/code&gt;, and we call &lt;code&gt;iq.buildPaletteSync&lt;/code&gt;, which is
the computationally expensive part. It returns four colors, which we pass to
&lt;code&gt;setPalette&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We also hide and unhide elements as appropriate.&lt;/p&gt;
&lt;h3 id="the-problem"&gt;The Problem&lt;a class="anchor" href="#the-problem"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Try generating a color palette. Notice that while &lt;code&gt;image-q&lt;/code&gt; is processing, the
time stops updating. If you try to click into the URL input, the UI also won’t
respond. However, the spinning animation might still work. The explanation is
that it’s possible for CSS animations to be handled by a &lt;a href="https://www.viget.com/articles/animation-performance-101-browser-under-the-hood/"&gt;separate compositor
thread
instead&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here’s what it looks like.&lt;/p&gt;
&lt;video&gt;
    &lt;source src="https://i.imgur.com/HmJ95LY.mp4" type="video/mp4"&gt;
    &lt;p&gt;Your browser doesn't support this embedded video.&lt;/p&gt;
&lt;/source&gt;&lt;/video&gt;
&lt;p&gt;On Firefox, the browser eventually displays a warning that a web page is slowing
down your browser.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/ac5EAOu.png" alt="Firefox warning"&gt;&lt;/p&gt;
&lt;p&gt;If you have a fast computer, the problem may not be as obvious because your CPU
can churn through the work quickly. To simulate a slower device, you can use
Chrome, which has a developer tools setting to throttle the CPU. Open the
performance tab and then its settings to reveal the option.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/qZuJmYw.png" alt="Chrome CPU throttling option"&gt;&lt;/p&gt;
&lt;h3 id="adding-a-worker"&gt;Adding a Worker&lt;a class="anchor" href="#adding-a-worker"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To fix the unresponsive UI, let’s use a worker. First we’ll add a checkbox to
the form to indicate if the site should use the worker or not. Add this HTML
before the submission input.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"checkbox"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"worker"&lt;/span&gt;&lt;span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"worker"&lt;/span&gt;&lt;span&gt;&amp;gt; Use worker&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;br&lt;/span&gt;&lt;span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we’ll set up the worker in &lt;code&gt;index.js&lt;/code&gt;. Even though there is widespread
browser support for workers, let’s add a feature detection check with &lt;code&gt;if (window.Worker)&lt;/code&gt; just in case.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; worker;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (window.Worker) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  worker &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Worker&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"worker.js"&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  worker.&lt;/span&gt;&lt;span&gt;onmessage&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;message&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;setPalette&lt;/span&gt;&lt;span&gt;(message.data.points);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  };&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessage"&gt;onmessage&lt;/a&gt;
method is how we’ll receive data from the worker.&lt;/p&gt;
&lt;p&gt;Then we’ll change the image &lt;code&gt;onload&lt;/code&gt; handler to use the worker when the checkbox
is checked.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;// From before&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; imageData &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; context.&lt;/span&gt;&lt;span&gt;getImageData&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    image.naturalWidth,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    image.naturalHeight&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (event.target.elements.worker.checked) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (worker) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        worker.&lt;/span&gt;&lt;span&gt;postMessage&lt;/span&gt;&lt;span&gt;({ imageData });&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;handleError&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"Your browser doesn't support Web Workers."&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;// From before&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; pointContainer &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; iq.utils.PointContainer.&lt;/span&gt;&lt;span&gt;fromImageData&lt;/span&gt;&lt;span&gt;(imageData);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The worker’s
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage"&gt;postMessage&lt;/a&gt;
method is how we send data to the worker.&lt;/p&gt;
&lt;p&gt;Lastly, we need to create the worker itself in &lt;code&gt;worker.js&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; iq &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"image-q"&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;onmessage&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;e&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; pointContainer &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; iq.utils.PointContainer.&lt;/span&gt;&lt;span&gt;fromImageData&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    e.data.imageData&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  );&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; palette &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; iq.&lt;/span&gt;&lt;span&gt;buildPaletteSync&lt;/span&gt;&lt;span&gt;([pointContainer], { colors: &lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt; });&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;postMessage&lt;/span&gt;&lt;span&gt;({ points: palette._pointArray });&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;};&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that we’re still using &lt;code&gt;onmessage&lt;/code&gt; and &lt;code&gt;postMessage&lt;/code&gt;, but now &lt;code&gt;onmessage&lt;/code&gt;
receives a message from &lt;code&gt;index.js&lt;/code&gt;, and &lt;code&gt;postMessage&lt;/code&gt; sends a message to
&lt;code&gt;index.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Try generating a palette with the worker, and you should see that the time keeps
updating during the processing. The form also remains interactive instead of
freezing. Here’s what it should look like.&lt;/p&gt;
&lt;video&gt;
    &lt;source src="https://i.imgur.com/EER1Snx.mp4" type="video/mp4"&gt;
    &lt;p&gt;Your browser doesn't support this embedded video.&lt;/p&gt;
&lt;/source&gt;&lt;/video&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;a class="anchor" href="#conclusion"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Web workers are an effective way to make websites feel more responsive,
especially when the website is more like an application rather than a display of
mostly static data. As we’ve seen, setting up a worker can also be fairly
straightforward, so identifying CPU-intensive code and moving it to a worker can
be an easy win.&lt;/p&gt;
&lt;p&gt;Workers do have restrictions, the main one being that they don’t have access to
the
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model"&gt;DOM&lt;/a&gt;.
The general mindset should be to try to let the main thread focus on the UI as
much as possible, including updating the DOM, while moving expensive work to
workers. By doing this when it makes sense, you can give your users an interface
that doesn’t freeze and is consistently enjoyable to use.&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/how-to-improve-interface-responsiveness-with-web-workers</guid><pubDate>Wed, 21 Oct 2020 00:00:00 GMT</pubDate></item><item><title>BEBEN X8 Review</title><link>https://www.dannyguo.com/blog/beben-x8-review</link><description>&lt;article&gt;
        &lt;h1&gt;BEBEN X8 Review&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2020-10-18"&gt;
                October 18, 2020
            &lt;/time&gt;
             · 
            786 words  ·  ~4 minutes to read
            
                        &lt;br&gt;I may earn commissions from purchases made through
                        affiliate links in this post.
                    
        &lt;/div&gt;

        &lt;p&gt;The &lt;a href="https://www.amazon.com/gp/product/B07PN2FK2W/ref=as_li_ss_tl?ie=UTF8&amp;amp;psc=1&amp;amp;linkCode=ll1&amp;amp;tag=thdalo00-20&amp;amp;linkId=c7e6ea9cd21015aa5bb8bae9d67481db&amp;amp;language=en_US"&gt;BEBEN X8
headphones&lt;/a&gt;
are a set of true wireless headphones, like the &lt;a href="https://www.amazon.com/Apple-AirPods-Charging-Latest-Model/dp/B07PXGQC1Q/ref=as_li_ss_tl?dchild=1&amp;amp;keywords=airpods&amp;amp;qid=1597609643&amp;amp;s=electronics&amp;amp;sr=1-3&amp;amp;linkCode=ll1&amp;amp;tag=thdalo00-20&amp;amp;linkId=f74c368f5b3a2c83060da85acc1b2394&amp;amp;language=en_US"&gt;Apple
Airpods&lt;/a&gt;,
which are probably the &lt;a href="https://fortune.com/2019/08/06/apple-airpods-business/"&gt;market
leader&lt;/a&gt; in this
category.&lt;/p&gt;
&lt;p&gt;Many of the big electronics companies have made their own versions. Samsung has
&lt;a href="https://www.amazon.com/Samsung-Wireless-Earbuds-Cancelling-Warranty/dp/B089B658NP/ref=as_li_ss_tl?dchild=1&amp;amp;keywords=galaxy+buds&amp;amp;qid=1597609784&amp;amp;s=electronics&amp;amp;sr=1-6&amp;amp;th=1&amp;amp;linkCode=ll1&amp;amp;tag=thdalo00-20&amp;amp;linkId=db5cafcb0e4ebeeae94ba2966657ebbd&amp;amp;language=en_US"&gt;Galaxy
Buds&lt;/a&gt;,
Sony has
&lt;a href="https://www.amazon.com/Sony-WF-1000XM3-Industry-Canceling-Wireless/dp/B07T81554H/ref=as_li_ss_tl?dchild=1&amp;amp;keywords=sony+wf-1000xm3&amp;amp;qid=1597611240&amp;amp;s=electronics&amp;amp;sr=1-3&amp;amp;linkCode=ll1&amp;amp;tag=thdalo00-20&amp;amp;linkId=50eb905f27c0da50abc99f7c348f0e91&amp;amp;language=en_US"&gt;WF-1000XM3&lt;/a&gt;s,
and Google has &lt;a href="https://store.google.com/us/product/pixel_buds"&gt;Pixel Buds&lt;/a&gt;.
But when I looked into buying a pair of true wireless headphones, I realized
that it has become a commoditized technology. Amazon has plenty of more
affordable (less than $100) options from relatively unknown brands.&lt;/p&gt;
&lt;p&gt;I planned to use my headphones mainly while exercising, and I knew exactly what
features I was looking for and which I didn’t really care about. Your needs may
be very different from mine.&lt;/p&gt;
&lt;p&gt;The two key things I wanted were:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Explicit waterproofing so that I can use them while running in the rain&lt;/li&gt;
&lt;li&gt;Physical buttons instead of touch or voice controls&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Audio quality was not that important to me, and I cared even less about
microphone quality. I also wasn’t concerned about battery life, since I didn’t
plan to use them much while traveling.&lt;/p&gt;
&lt;p&gt;While many options on Amazon have waterproofing, the X8s were one of the few
with physical buttons. I also liked that the case supports wireless charging.&lt;/p&gt;
&lt;p&gt;I also came across two interesting features that I haven’t seen with the
well-known options. The first is an LED display to show exactly how much charge
is left. The second is that the charging case can have a USB port to charge your
phone, allowing the case to double as an external battery. &lt;a href="https://www.amazon.com/Ultimate-Bluetooth-Headphones-Waterproof-Earphones/dp/B07W87HQ6G/ref=as_li_ss_tl?dchild=1&amp;amp;keywords=true+wireless+headphones+waterproof&amp;amp;qid=1601255652&amp;amp;sr=8-4&amp;amp;linkCode=ll1&amp;amp;tag=thdalo00-20&amp;amp;linkId=c9e0430a4701d74fc4056204995bdbf&amp;amp;language=en_US"&gt;This
pair&lt;/a&gt;
has both features.&lt;/p&gt;
&lt;p&gt;I bought my X8s for $46, but I’ve seen them go as low as $30 since then.&lt;/p&gt;
&lt;h2 id="pictures"&gt;Pictures&lt;a class="anchor" href="#pictures"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Here’s what the packaging looks like.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/3eMQJ6s.jpg" alt="Front of the box"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/JbWmpQE.jpg" alt="Back of the box"&gt;&lt;/p&gt;
&lt;p&gt;The package comes with the case, the headphones, a short Micro-USB to USB cable,
a lanyard, and several sets of differently sized tips.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/klvZ7SV.jpg" alt="Package contents"&gt;&lt;/p&gt;
&lt;p&gt;Note that I’ve used my X8s for over a year, so the case has some normal wear.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/oIMtbz0.jpg" alt="Back of the case"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/abeqHrQ.jpg" alt="Micro-USB charging port"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/gLbsKnI.jpg" alt="Bottom of the case"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/rhSXU9w.jpg" alt="Earbuds in the case"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/LzFRf9O.jpg" alt="Earbud"&gt;&lt;/p&gt;
&lt;h2 id="waterproofing"&gt;Waterproofing&lt;a class="anchor" href="#waterproofing"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I’ve gone running several times in the rain with my X8s, and they have always
handled the water just fine. They are &lt;a href="https://en.wikipedia.org/wiki/IP_Code"&gt;IP
rated&lt;/a&gt; for IP68, which means that they do
not allow any dust in and are resistant to submersion in water up to 1 meter in
depth, but I haven’t tested actually submerging them.&lt;/p&gt;
&lt;h2 id="battery-life-and-charging"&gt;Battery Life and Charging&lt;a class="anchor" href="#battery-life-and-charging"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I’ve used my X8s for over a year, and battery life has never been a problem for
me. The package claims that the headphones last 5 hours on a single charge.&lt;/p&gt;
&lt;p&gt;The case has a Micro-USB port for charging. I do wish this was a USB-C port
instead, but it’s hard to complain for the price.&lt;/p&gt;
&lt;p&gt;The case also supports wireless charging, which is how I normally charge it.&lt;/p&gt;
&lt;h2 id="connecting"&gt;Connecting&lt;a class="anchor" href="#connecting"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The earbuds automatically go into pairing/connecting mode when you take them out
of the case. There have been a few times when I wished there was a way to
manually make the earbuds pair. When I’ve needed to switch devices, I had to put
the earbuds back into the case and take them back out to get them into pairing
mode again.&lt;/p&gt;
&lt;p&gt;I’ve also had to do it a few times when the earbuds didn’t connect immediately.
I think this has only happened when I took the earbuds out before turning on
Bluetooth on my phone. When I use my earbuds now, I’ve gotten into the habit of
turning on Bluetooth first before removing the earbuds from the case.&lt;/p&gt;
&lt;p&gt;Sometime the audio does cut out in one headphone for a few seconds while I’m
running, but it only happens about once for every several hours of usage.&lt;/p&gt;
&lt;h2 id="audio-and-microphone-quality"&gt;Audio and Microphone Quality&lt;a class="anchor" href="#audio-and-microphone-quality"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The X8 audio quality is perfectly acceptable to me. I listen to podcasts more
often than music with them, but even music sounds fine. The sound isn’t tinny at
all.&lt;/p&gt;
&lt;p&gt;The microphones, on the other hand, are not good. When I tried having a phone
coversation while using them, the other person had a hard time understanding
what I was saying.&lt;/p&gt;
&lt;h2 id="controls"&gt;Controls&lt;a class="anchor" href="#controls"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I wanted physical buttons, mainly for quick volume adjustments without having to
mess with a touch sensitive interface or having to speak to a digital assistant,
which I think would be annoying to do while running.&lt;/p&gt;
&lt;p&gt;They work as reliably as I expected. I can press either button once to pause or
play. Holding the left one increases the volume, and holding the right one
decreases it.&lt;/p&gt;
&lt;p&gt;I frequently adjust the volume when I’m running, and I love not having to pull
out my phone or speak to a virtual assistant to do it.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;a class="anchor" href="#conclusion"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I’ve been very happy with my X8s. They cost a fraction of the price of the
options from the well-known brands, while having the physical buttons that I
think make a superior interface for headphones.&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/beben-x8-review</guid><pubDate>Sun, 18 Oct 2020 00:00:00 GMT</pubDate></item><item><title>Morning Joy</title><link>https://www.dannyguo.com/blog/morning-joy</link><description>&lt;article&gt;
        &lt;h1&gt;Morning Joy&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2020-08-15"&gt;
                August 15, 2020
            &lt;/time&gt;
             · 
            472 words  ·  ~3 minutes to read
            
        &lt;/div&gt;

        &lt;p&gt;This past April, &lt;a href="https://dev.to/"&gt;DEV&lt;/a&gt; hosted a
&lt;a href="https://dev.to/devteam/announcing-the-twilio-hackathon-on-dev-2lh8"&gt;hackathon&lt;/a&gt;
in conjunction with &lt;a href="https://www.twilio.com/"&gt;Twilio&lt;/a&gt; (here’s a &lt;a href="https://www.twilio.com/referral/fX7XpV"&gt;referral
link&lt;/a&gt; for a $10 credit). This seemed
like a good chance to play around with the Twilio API, so I created a small
project called &lt;a href="https://github.com/dguo/morning-joy"&gt;Morning Joy&lt;/a&gt;. It lets you
start each day on a good note by texting you an uplifting news story and a
picture of something cute.&lt;/p&gt;
&lt;p&gt;Following the news can be stressful or even depressing. This is one small way to
remember that good things are happening too.&lt;/p&gt;
&lt;p&gt;Here’s an example from the first day:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/OPNJIGn.jpg" alt="Morning Joy example"&gt;&lt;/p&gt;
&lt;h2 id="how-i-built-it"&gt;How I Built It&lt;a class="anchor" href="#how-i-built-it"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I signed up for Twilio and followed their &lt;a href="https://www.twilio.com/docs/sms/quickstart/node#install-nodejs-and-the-twilio-module"&gt;quickstart guide for
Node.js&lt;/a&gt;.
I bought a phone number and tested sending a text to myself. This was painless.
I probably spent more time picking the phone number than I did writing the code.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; twilio &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;require&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"twilio"&lt;/span&gt;&lt;span&gt;)(&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    process.env.TWILIO_ACCOUNT_SID,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    process.env.TWILIO_AUTH_TOKEN&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;async&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;sendText&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;mediaUrl&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; text &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; twilio.messages.&lt;/span&gt;&lt;span&gt;create&lt;/span&gt;&lt;span&gt;({&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        body,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        mediaUrl: mediaUrl &lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt; [mediaUrl] &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; [],&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        from: process.env.TWILIO_PHONE_NUMBER,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        to: process.env.DESTINATION_PHONE_NUMBER&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    });&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; text;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="reddit-json"&gt;Reddit JSON&lt;a class="anchor" href="#reddit-json"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Next, I needed to find a content source that I can count on to be renewed on a
daily basis and to be of high quality. I decided to use Reddit’s
&lt;a href="https://www.reddit.com/r/aww/"&gt;r/aww&lt;/a&gt; and
&lt;a href="https://www.reddit.com/r/UpliftingNews/"&gt;r/UpliftingNews&lt;/a&gt; subreddits. They are
two of the largest subreddits, so I should never get duplicate content. I also
wanted to grab the first post when sorting by top for today, which means the
community has heavily upvoted the post.&lt;/p&gt;
&lt;p&gt;I looked into the best way to fetch posts from Reddit. I initially planned to
use their &lt;a href="https://www.reddit.com/dev/api/"&gt;API&lt;/a&gt;, but it &lt;a href="https://www.reddit.com/r/javascript/comments/8yg6ig/adding_json_onto_the_end_of_most_reddit_urls/"&gt;turns
out&lt;/a&gt;
that Reddit has a convenient feature where you can simply append &lt;code&gt;.json&lt;/code&gt; to the
end of a subreddit URL to receive the data as JSON:
&lt;a href="https://www.reddit.com/r/aww.json"&gt;https://www.reddit.com/r/aww.json&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This worked well, but I didn’t know how to sort the results by the top posts for
today rather than hot (trending posts right now). I
&lt;a href="https://www.reddit.com/r/redditdev/comments/1470nj/what_is_the_json_link_for_getting_differently/"&gt;discovered&lt;/a&gt;
that a query parameter does the trick:
&lt;a href="https://www.reddit.com/r/aww.json"&gt;https://www.reddit.com/r/aww/top.json?t=day&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; got &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;require&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"got"&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;async&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;getAwwPost&lt;/span&gt;&lt;span&gt;() {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; response &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;got&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;"https://www.reddit.com/r/aww/top.json?t=day"&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    ).&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; post &lt;/span&gt;&lt;span&gt;of&lt;/span&gt;&lt;span&gt; response.data.children) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (post.data.post_hint &lt;/span&gt;&lt;span&gt;!==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"image"&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; {title, url} &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; post.data;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {title, url};&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I wrote a &lt;a href="https://github.com/dguo/morning-joy/blob/master/index.js"&gt;script&lt;/a&gt; to
grab the top post for r/UpliftingNews and the top image post for r/Aww and then
text them to myself using Twilio.&lt;/p&gt;
&lt;h3 id="hosting"&gt;Hosting&lt;a class="anchor" href="#hosting"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Lastly, I needed a way to schedule the script to run every morning. To keep it
simple, I converted my script into an &lt;a href="https://aws.amazon.com/lambda/"&gt;AWS
Lambda&lt;/a&gt; function and set up a &lt;a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/WhatIsCloudWatchEvents.html"&gt;CloudWatch
Events&lt;/a&gt;
rule that &lt;a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/Create-CloudWatch-Events-Scheduled-Rule.html"&gt;triggers on a
schedule&lt;/a&gt;
to fire the function every day at 10 a.m. UTC. The schedule expression is:
&lt;code&gt;cron(0 10 * * ? *)&lt;/code&gt;. I also added &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html"&gt;environment
variables&lt;/a&gt;
to pass &lt;code&gt;DESTINATION_PHONE_NUMBER&lt;/code&gt;, &lt;code&gt;TWILIO_ACCOUNT_SID&lt;/code&gt;, &lt;code&gt;TWILIO_AUTH_TOKEN&lt;/code&gt;,
and &lt;code&gt;TWILIO_PHONE_NUMBER&lt;/code&gt; to the function.&lt;/p&gt;
&lt;p&gt;This was a relatively simple project, and it has been fun getting the text every
morning.&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/morning-joy</guid><pubDate>Sat, 15 Aug 2020 00:00:00 GMT</pubDate></item><item><title>Fixing MacBook Pro Thermal Performance Issues</title><link>https://www.dannyguo.com/blog/fixing-macbook-pro-thermal-performance-issues</link><description>&lt;article&gt;
        &lt;h1&gt;Fixing MacBook Pro Thermal Performance Issues&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2020-08-02"&gt;
                August 2, 2020
            &lt;/time&gt;
             · 
            1,232 words  ·  ~7 minutes to read
            
                        &lt;br&gt;I may earn commissions from purchases made through
                        affiliate links in this post.
                    
        &lt;/div&gt;

        &lt;p&gt;Over the past several months, my 2018 15” MacBook Pro developed thermal
performance issues. Here’s what I did to fix the problem. The two key changes
were that I switched to using the right side &lt;a href="https://en.wikipedia.org/wiki/Thunderbolt_(interface)#Thunderbolt_3"&gt;Thunderbolt
3&lt;/a&gt; ports
instead of the left side ones, and I cleaned the dust buildup in the internal
fans.&lt;/p&gt;
&lt;h2 id="the-problem"&gt;The Problem&lt;a class="anchor" href="#the-problem"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The problem first started when I noticed my CPU usage spiking to near 100%. In
the process list, I saw &lt;code&gt;kernel_task&lt;/code&gt; taking up most of the CPU.&lt;/p&gt;
&lt;p&gt;I &lt;a href="https://support.apple.com/en-us/HT207359"&gt;learned&lt;/a&gt; that macOS does this
intentionally to prevent the CPU from overheating.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One of the functions of kernel_task is to help manage CPU temperature by
making the CPU less available to processes that are using it intensely. In
other words, kernel_task responds to conditions that cause your CPU to become
too hot, even if your Mac doesn’t feel hot to you. It does not itself cause
those conditions. When the CPU temperature decreases, kernel_task
automatically reduces its activity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="fan-speed"&gt;Fan Speed&lt;a class="anchor" href="#fan-speed"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For many years, I’ve used
&lt;a href="https://github.com/hholtmann/smcFanControl"&gt;smcFanControl&lt;/a&gt; to manually increase
my fan speed because I don’t mind fan noise, especially if it means getting
better performance out of my laptop or being able to comfortably put it on my
lap.&lt;/p&gt;
&lt;p&gt;However, it stopped working reliably after a macOS update. I purchased &lt;a href="https://bjango.com/mac/istatmenus/"&gt;iStat
Menus&lt;/a&gt;, which comes with a well supported
fan control feature. Note that you have to buy it from their own website to get
fan control. The Mac App Store version &lt;a href="https://bjango.com/help/istatmenus6/macappstore/"&gt;doesn’t include that particular
feature&lt;/a&gt; for some reason.&lt;/p&gt;
&lt;p&gt;I turned the fans up to max regularly in an attempt to preempt the &lt;code&gt;kernel_task&lt;/code&gt;
issue, but it still kept popping up.&lt;/p&gt;
&lt;h2 id="thunderbolt-3-ports"&gt;Thunderbolt 3 Ports&lt;a class="anchor" href="#thunderbolt-3-ports"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I found &lt;a href="https://apple.stackexchange.com/a/363933/275342"&gt;this excellent StackExchange
answer&lt;/a&gt; that recommends using
the right side Thunderbolt 3 ports instead of the left side ones. Apparently the
ports aren’t equal. The left ones can cause thermal issues. Also, using both
ports on either side can be problematic.&lt;/p&gt;
&lt;p&gt;I use a &lt;a href="https://www.amazon.com/CalDigit-TS3-Plus-Thunderbolt-Dock/dp/B07CZPV8DF/ref=as_li_ss_tl?crid=223U28DX1402C&amp;amp;dchild=1&amp;amp;keywords=caldigit+ts3+plus&amp;amp;qid=1595940705&amp;amp;sprefix=caldigit+,aps,223&amp;amp;sr=8-2&amp;amp;th=1&amp;amp;linkCode=ll1&amp;amp;tag=thdalo00-20&amp;amp;linkId=016d783904cae8cac9d952a3c58d816b&amp;amp;language=en_US"&gt;Thunderbolt 3
dock&lt;/a&gt;
for a single cable solution that handles charging and all my peripherals,
including monitors. I tended to plug it into a left port. I switched it over to
a right port and saw an immediate difference in temperature. iStat Menus reports
the temperatures from various sensors.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/2oiPxjF.png" alt="iStat Menus temperature readings"&gt;&lt;/p&gt;
&lt;p&gt;I tested and verified that using a left port caused the CPU temperature to go up
much higher than using a right port.&lt;/p&gt;
&lt;p&gt;For a few months, this simple change was enough to resolve the issue. Luckily, I
was able to continue using a single cable, and I didn’t have to plug in my dock
on one side and then a separate charger on the other side.&lt;/p&gt;
&lt;h2 id="resolution-scaling"&gt;Resolution Scaling&lt;a class="anchor" href="#resolution-scaling"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Then the problem started happening again. I also experienced issues playing
&lt;a href="https://en.wikipedia.org/wiki/Tabletop_Simulator"&gt;Tabletop Simulator&lt;/a&gt;,
&lt;a href="https://en.wikipedia.org/wiki/Counter-Strike:_Global_Offensive"&gt;Counter-Strike&lt;/a&gt;,
and &lt;a href="https://en.wikipedia.org/wiki/Valorant"&gt;Valorant&lt;/a&gt; (on Windows through Boot
Camp), all games that my machine should be able to handle without any problems.
It would stutter even after I turned the resolution and graphical settings all
the way down.&lt;/p&gt;
&lt;p&gt;I thought it might have something to do with my monitors. In my desk setup, I
have two external monitors that I run at a scaled resolution that looks like
2560 x 1440.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/xPz7nXG.png" alt="external display resolution"&gt;&lt;/p&gt;
&lt;p&gt;Note the warning that “Using a scaled resolution may affect performance.” The
problem is that macOS &lt;a href="https://github.com/kovidgoyal/kitty/issues/1043"&gt;achieves this
resolution&lt;/a&gt; by rendering
everything in double the size and then scaling it down. So my MacBook is
essentially doing the rendering work for two 5K monitors.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/0oroxGb.png" alt="System Information displays"&gt;&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://forums.macrumors.com/threads/4k-monitor-at-1440p-scaling-performance.2232164/"&gt;this
thread&lt;/a&gt;
or &lt;a href="https://apple.stackexchange.com/a/338581/275342"&gt;this StackExchange answer&lt;/a&gt;
for more details.&lt;/p&gt;
&lt;p&gt;I considered turning the resolution down to look like 1920 x 1080, which isn’t a
scaled resolution, but then everything looked too big.&lt;/p&gt;
&lt;p&gt;I was pretty frustrated at this point, especially because
&lt;a href="https://zoom.us/"&gt;Zoom&lt;/a&gt; video calls started freezing up on me. I got into the
habit of unplugging my monitors before joining video calls.&lt;/p&gt;
&lt;h2 id="dust"&gt;Dust&lt;a class="anchor" href="#dust"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This entire time, I thought the problem was my MacBook producing too much heat.
Beyond making the fans run at max more often, I never considered that the
problem could be that it stopped being able to get rid of heat.&lt;/p&gt;
&lt;p&gt;Then I read &lt;a href="https://quanticdev.com/articles/cleaning-macbook-after-16800-hours-of-use/"&gt;this
post&lt;/a&gt;
from someone who cleaned the inside of a MacBook after 7 years of use. I was
initially skeptical that clogged fans were my problem because my MacBook was
only about a year and a half old. But the more I thought about it, the more it
made sense, and I didn’t have anything to lose by trying to clean it.&lt;/p&gt;
&lt;p&gt;To open my MacBook, I followed &lt;a href="https://www.ifixit.com/Guide/MacBook+Pro+15-Inch+Touch+Bar+2018+Lower+Case+Replacement/121426"&gt;this iFixit
guide&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="autoboot"&gt;AutoBoot&lt;a class="anchor" href="#autoboot"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I learned that by default, macOS turns on the MacBook when you press any button
(not just the power button) or open the lid. This was very surprising to me. I
did recall being confused in the past when my MacBook turned on even though I
didn’t press the power button. When it first happened, I thought there was
something wrong. At least from Apple’s perspective, it turns out &lt;a href="https://www.wired.com/story/its-not-a-bug-its-a-feature/"&gt;this is a
feature, not a bug&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So to make sure the MacBook stays off through the process, you have to run this
in a terminal to turn off booting on lid open.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;sudo&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;nvram&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;AutoBoot=%00&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To turn the setting back on later, run this. Though I just left mine off after I
was done.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;sudo&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;nvram&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;AutoBoot=%03&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="removing-the-bottom"&gt;Removing the Bottom&lt;a class="anchor" href="#removing-the-bottom"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The next step was to take off the screws. Apple uses &lt;a href="https://en.wikipedia.org/wiki/Pentalobe_security_screw"&gt;pentalobe
screws&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/FQndl8j.jpg" alt="pentalobe screw"&gt;&lt;/p&gt;
&lt;p&gt;I’ve opened MacBooks before to replace &lt;a href="https://www.reddit.com/r/spicypillows"&gt;swollen
batteries&lt;/a&gt;, so I was prepared with an
&lt;a href="https://www.amazon.com/gp/product/B072HNBL9Z/ref=as_li_ss_tl?ie=UTF8&amp;amp;psc=1&amp;amp;linkCode=ll1&amp;amp;tag=thdalo00-20&amp;amp;linkId=09c787c5245a192a816fd263da8ad7ea&amp;amp;language=en_US"&gt;electronics screwdriver
set&lt;/a&gt;
that includes pentalobe bits.  I also had a &lt;a href="https://www.amazon.com/Endust-Electronics-Compressed-bitterant-11407/dp/B00HX7VZ5M/ref=as_li_ss_tl?dchild=1&amp;amp;keywords=endust+duster&amp;amp;qid=1596317241&amp;amp;sr=8-4&amp;amp;th=1&amp;amp;linkCode=ll1&amp;amp;tag=thdalo00-20&amp;amp;linkId=4bb9cd9f61cc6a4a158ec8dfbfb00e3d&amp;amp;language=en_US"&gt;can of compressed
air&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/JWhg3vL.jpg" alt="screwdriver and duster"&gt;&lt;/p&gt;
&lt;p&gt;I removed the screws and learned that Apple has made the bottom harder to open
because now you need a suction cup. I repurposed the suction cup from my &lt;a href="https://www.amazon.com/gp/product/B07GKXPL6M/ref=as_li_ss_tl?ie=UTF8&amp;amp;psc=1&amp;amp;linkCode=ll1&amp;amp;tag=thdalo00-20&amp;amp;linkId=a201bd337a2a7814cff67674269ea94f&amp;amp;language=en_US"&gt;car
dash cell phone
holder&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/ewlAsGh.jpg" alt="cell phone holder with suction cup"&gt;&lt;/p&gt;
&lt;p&gt;You have to use the suction cup to lift part of the bottom enough to slide in
something to release a few internal latches. I used a library card.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/tDEaslF.jpg" alt="lifting the bottom cover"&gt;&lt;/p&gt;
&lt;h3 id="cleaning-the-dust"&gt;Cleaning the Dust&lt;a class="anchor" href="#cleaning-the-dust"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Once I got my MacBook open, it was obvious that dust was the main cause of my
performance issues. Just taking the bottom off caused a cloud of dust to come
out.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/CN5oz3j.jpg" alt="dust on the bottom cover"&gt;&lt;/p&gt;
&lt;p&gt;There was also cat hair from this troublemaker.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/Feill8c.jpg" alt="my cat"&gt;&lt;/p&gt;
&lt;p&gt;Both fans were totally gunked up.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/IAGcS0j.jpg" alt="dust on the inside"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/BF8Sinf.jpg" alt="dust on the left fan"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/gX2FxJ5.jpg" alt="dust on the right fan"&gt;&lt;/p&gt;
&lt;p&gt;I used compressed air to blow out the dust. I also used a toothpick to get some
off the fans that wouldn’t come off from blowing alone.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/BxW6OOp.jpg" alt="overview after cleaning"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/OMmeXnG.jpg" alt="left fan after cleaning"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/E60RF3J.jpg" alt="fan closeup after cleaning"&gt;&lt;/p&gt;
&lt;p&gt;I put the cover back on and haven’t had any more thermal performance issues.&lt;/p&gt;
&lt;h2 id="retrospective"&gt;Retrospective&lt;a class="anchor" href="#retrospective"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It would be nice if macOS could provide some actionable advice when
&lt;code&gt;kernel_task&lt;/code&gt; is trying to stop the MacBook from overheating. I would have
appreciated an OS suggestion to use the right side Thunderbolt 3 ports.&lt;/p&gt;
&lt;p&gt;But I also never considered that my laptop fans could require cleaning. In
retrospect, that’s foolish because I’ve seen how dirty it can get in desktop
PCs, and I know that heat is an inhibitor to computer performance. It’s just
like running in humid weather. Your body starts shutting down because its main
mechanism for getting rid of heat (sweating) stops working because humidity
prevents sweat from evaporating.&lt;/p&gt;
&lt;p&gt;It would be cool if the machine could detect and alert when the fans are no
longer effective, perhaps with a sensor that looks for a lack of airflow at the
vents.&lt;/p&gt;
&lt;p&gt;To prevent the issue from occurring again, I’ve set up a recurring task in
&lt;a href="https://todoist.com"&gt;Todoist&lt;/a&gt; to remind me to clean my computers once a year.&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/fixing-macbook-pro-thermal-performance-issues</guid><pubDate>Sun, 02 Aug 2020 00:00:00 GMT</pubDate></item><item><title>Clearing Mac Storage Space</title><link>https://www.dannyguo.com/blog/clearing-mac-storage-space</link><description>&lt;article&gt;
        &lt;h1&gt;Clearing Mac Storage Space&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2020-07-15"&gt;
                July 15, 2020
            &lt;/time&gt;
             · 
            742 words  ·  ~4 minutes to read
            
        &lt;/div&gt;

        &lt;p&gt;I recently needed to clear a large amount of space on my Mac’s hard drive in
order to install Windows through &lt;a href="https://en.wikipedia.org/wiki/Boot_Camp_(software)"&gt;Boot
Camp&lt;/a&gt;. After deleting files
and applications, I still had large amounts of space taken up in ways that I
didn’t understand. Here is what I did to fix the problem.&lt;/p&gt;
&lt;h2 id="easy-methods"&gt;Easy Methods&lt;a class="anchor" href="#easy-methods"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The obvious thing to start with was deleting known files and applications. In
particular, I removed some built-in macOS applications, like GarageBand, that I
can always re-download from the Mac App Store.&lt;/p&gt;
&lt;p&gt;I also cleared the trash. As a tip, you probably want to set it to
&lt;a href="https://support.apple.com/guide/mac-help/delete-files-and-folders-on-mac-mchlp1093/mac"&gt;automatically delete items after 30
days&lt;/a&gt;.
I don’t understand why that’s considered an advanced feature in Finder when it
seems like it should be the default setting. It &lt;a href="https://osxdaily.com/2017/02/10/automatically-empty-trash-mac/"&gt;wasn’t even an
option&lt;/a&gt; until
&lt;a href="https://en.wikipedia.org/wiki/MacOS_Sierra"&gt;Sierra&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then I went into my Google Backup and Sync (for &lt;a href="https://www.google.com/drive/"&gt;Google
Drive&lt;/a&gt;) settings and &lt;a href="https://www.remosoftware.com/info/how-to-configure-google-drive-sync-settings-to-sync-specific-folders-or-file-types"&gt;unsynced some
folders&lt;/a&gt;
that I don’t need to be available locally.&lt;/p&gt;
&lt;h2 id="other-storage"&gt;Other Storage&lt;a class="anchor" href="#other-storage"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After those easy wins, I wanted to get a better idea of what was taking up
space. macOS has a built in storage analyzer, but it’s pretty basic. The
overview gives a rough breakdown.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/ZbajDJM.png" alt="macOS storage overview"&gt;&lt;/p&gt;
&lt;p&gt;Clicking manage gives you a more detailed view.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/Jl509hi.png" alt="macOS storage management"&gt;&lt;/p&gt;
&lt;p&gt;But note that “System” is greyed out! There’s no way to drill down into it to
see what’s actually taking up space.&lt;/p&gt;
&lt;p&gt;This was on &lt;a href="https://en.wikipedia.org/wiki/MacOS_Mojave"&gt;Mojave&lt;/a&gt;.  At least
&lt;a href="https://www.apple.com/macos/catalina/"&gt;Catalina&lt;/a&gt; splits it up into “System” and
“Other,” though you still can’t drill down into either.&lt;/p&gt;
&lt;h2 id="disk-space-analysis-programs"&gt;Disk Space Analysis Programs&lt;a class="anchor" href="#disk-space-analysis-programs"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I’m familiar with using &lt;code&gt;du -sh&lt;/code&gt; in the terminal to show folder sizes, but I
thought a GUI program might be better for this task. I looked into third party
programs to find out what folders and files were taking up space. The first one
I tried was &lt;a href="http://www.derlien.com/"&gt;Disk Inventory X&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It was useful but took a while (around 10 minutes) to produce results.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/VW6aebM.png" alt="Disk Inventory X results"&gt;&lt;/p&gt;
&lt;p&gt;I looked into alternatives. The most helpful resources were this &lt;a href="https://apple.stackexchange.com/q/81568/275342"&gt;Stack Exchange
question&lt;/a&gt; and this
&lt;a href="https://macpaw.com/how-to/best-disk-space-analyzers-mac"&gt;article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I tried &lt;a href="https://www.omnigroup.com/more"&gt;OmniDiskSweeper&lt;/a&gt;. It doesn’t have a
tree view like Disk Inventory X does, but I didn’t find that very useful anyway.
OmniDiskSweeper was able to show results as they came, rather than all at once
at the end.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/t9N8zcf.png" alt="OmniDiskSweeper results"&gt;&lt;/p&gt;
&lt;p&gt;It doesn’t update in real time, so I did have to re-analyze the disk after
deleting files.&lt;/p&gt;
&lt;h2 id="docker"&gt;Docker&lt;a class="anchor" href="#docker"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first thing I noticed was Docker’s &lt;a href="https://docs.docker.com/docker-for-mac/space/"&gt;disk image
file&lt;/a&gt;. Docker for Mac stores
containers and images in that single, large file. I ran &lt;a href="https://docs.docker.com/engine/reference/commandline/system_prune/"&gt;docker system
prune&lt;/a&gt; to
delete unnecessary containers and images.&lt;/p&gt;
&lt;p&gt;Then I decreased the size limit for the disk image file.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/FNrnAtf.png" alt="Docker disk image size"&gt;&lt;/p&gt;
&lt;h2 id="spotify"&gt;Spotify&lt;a class="anchor" href="#spotify"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The biggest surprise to me was discovering that Spotify can take a large amount
of space to cache files. Mine was over 6 GB. Even Firefox’s cache was only 2 GB.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/4oUnYL7.png" alt="Spotify cache size"&gt;&lt;/p&gt;
&lt;p&gt;Furthermore, there doesn’t seem to be a way to control this cache size in
Spotify settings, not even buried in some advanced settings. This setting &lt;a href="https://community.spotify.com/t5/Social/What-happened-to-the-cache-limit-setting-on-Mac-desktop-player/td-p/4658524"&gt;might
have existed
before&lt;/a&gt;,
but it doesn’t now. Luckily, &lt;a href="https://community.spotify.com/t5/Desktop-Mac/How-to-limit-cache-size/td-p/2907725"&gt;someone
discovered&lt;/a&gt;
that you can set a limit manually by editing the Spotify preferences file at
&lt;code&gt;~/Library/Application\ Support/Spotify/prefs&lt;/code&gt; and adding a line like
&lt;code&gt;storage.size=2048&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I set the limit to 2048 MB, restarted Spotify, and confirmed that the cache
folder dropped to the expected size, saving me over 4 GB.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;du&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;-sh&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;~/Library/Caches/com.spotify.client/Data&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;6.4G&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;Data&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;# restart Spotify&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;du&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;-sh&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;~/Library/Caches/com.spotify.client/Data&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;2.0G&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;Data&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="yarn"&gt;Yarn&lt;a class="anchor" href="#yarn"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://yarnpkg.com/"&gt;Yarn&lt;/a&gt; seemed to have old cache folders.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;cd&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;~/Library/Caches/Yarn&lt;/span&gt;&lt;span&gt; &amp;amp;&amp;amp; &lt;/span&gt;&lt;span&gt;ls&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;v2&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;v4&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;v6&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;du&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;-sh&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;v2&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;v4&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;v6&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;0B&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;v2&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;1.2G&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;v4&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;1.2G&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;v6&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;yarn&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;cache&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;dir&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;/Users/dguo/Library/Caches/Yarn/v6&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I deleted the v2 and v4 folders. My cache is fairly small, but &lt;a href="https://github.com/yarnpkg/yarn/issues/6037"&gt;other
people&lt;/a&gt; have ended up with gigantic
caches.&lt;/p&gt;
&lt;h2 id="git"&gt;Git&lt;a class="anchor" href="#git"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I found some &lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt; repositories that I didn’t need
anymore. Deleting these saved around 1 GB in total. Git repos can take up a
large amount of space since by default, they contain the entire history of a
project. Though in my case, most of the space savings was due to deleting
&lt;code&gt;node_modules&lt;/code&gt; with each one.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;a class="anchor" href="#conclusion"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For years, I’ve used &lt;a href="https://freemacsoft.net/appcleaner/"&gt;AppCleaner&lt;/a&gt; to
uninstall applications because I knew most of them leave files behind if you
only delete the application itself. This experience reminded me that when I
install an application, I generally have no idea where it’s going to write files
and how large they can get. It would be nice if operating systems could make it
easier for users to be more in control of hard drive usage, instead of letting
applications treat the hard drive like an unlimited resource.&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/clearing-mac-storage-space</guid><pubDate>Wed, 15 Jul 2020 00:00:00 GMT</pubDate></item><item><title>How to Keep Your JS Libraries Up to Date</title><link>https://blog.logrocket.com/how-to-keep-javascript-libraries-up-to-date/</link><description>&lt;article&gt;
        &lt;h1&gt;How to Keep Your JS Libraries Up to Date&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2020-07-07"&gt;
                July 7, 2020
            &lt;/time&gt;
             · 
            1,667 words  ·  ~9 minutes to read
            
        &lt;/div&gt;

        &lt;p&gt;&lt;em&gt;This post was originally written for the &lt;a href="https://blog.logrocket.com/how-to-keep-javascript-libraries-up-to-date/"&gt;LogRocket
blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The job of keeping JavaScript libraries up to date can be more nuanced than just
running &lt;code&gt;npm update&lt;/code&gt; or &lt;code&gt;yarn up&lt;/code&gt; once in a while. New projects usually start
with the latest versions of libraries, but they can become out of date fairly
quickly.&lt;/p&gt;
&lt;p&gt;This is a particularly important topic for JavaScript developers because
projects written in JS tend to have relatively large dependency trees compared
to projects written in other languages.&lt;/p&gt;
&lt;h2 id="why-so-many-dependencies"&gt;Why So Many Dependencies&lt;a class="anchor" href="#why-so-many-dependencies"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are a few reasons for this trend. The first is that the JS ecosystem is
very much tied to &lt;a href="https://nodejs.org"&gt;Node.js&lt;/a&gt; and the &lt;a href="https://www.npmjs.com/"&gt;npm
registry&lt;/a&gt;. This is important because Node.js has an
&lt;a href="https://medium.com/the-node-js-collection/keeping-the-node-js-core-small-137f83d18152"&gt;intentionally
small&lt;/a&gt;
standard library. Just compare &lt;a href="https://nodejs.org/api/"&gt;it&lt;/a&gt; to &lt;a href="https://docs.python.org/3/library/"&gt;Python’s
standard library&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are pros and cons to this approach, but the practical result is that JS
developers have a habit of turning to third-party libraries to solve problems,
even for tasks like adding &lt;code&gt;mkdir -p&lt;/code&gt;
functionality&lt;a href="https://www.npmjs.com/package/mkdirp"&gt;.&lt;/a&gt; The
&lt;a href="https://www.npmjs.com/package/mkdirp"&gt;mkdirp&lt;/a&gt; library is downloaded over 20
million times per week.&lt;/p&gt;
&lt;p&gt;Since dependencies can have dependencies themselves, this habit can lead to a
large &lt;code&gt;node_modules&lt;/code&gt; directory. Its size has become a
&lt;a href="https://devrant.com/rants/760537/heaviest-objects-in-the-universe"&gt;meme&lt;/a&gt;, and
it is common for npm’s &lt;code&gt;package-lock.json&lt;/code&gt; and &lt;a href="https://yarnpkg.com/"&gt;Yarn&lt;/a&gt;’s
&lt;code&gt;yarn.lock&lt;/code&gt; to be thousands or even tens of thousands of lines long.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/ue4wqw5.jpg" alt="node modules meme"&gt;&lt;/p&gt;
&lt;p&gt;To a greater degree than in other ecosystems, JS developers also embrace the
philosophy of creating and using &lt;a href="https://blog.sindresorhus.com/small-focused-modules-9238d977a92a"&gt;small and focused
dependencies&lt;/a&gt;.
This is sometimes a &lt;a href="https://www.reddit.com/r/programming/comments/c0zwxb/one_liner_npm_package_iswindows_has_25_million/"&gt;target of
criticism&lt;/a&gt;,
especially when packages only contain one line of code.&lt;/p&gt;
&lt;p&gt;Regardless of the trade-offs of this reality, developers will need to consider
their dependency update strategy at some point.&lt;/p&gt;
&lt;h2 id="why-to-update"&gt;Why to Update&lt;a class="anchor" href="#why-to-update"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You might ask why it’s worth keeping dependencies up to date in the first place,
especially when a project is working fine as is.&lt;/p&gt;
&lt;p&gt;The first reason is to prevent security vulnerabilities. Even if you are capable
of writing perfect code, any third-party code you use, directly or indirectly,
can have security issues. This can lead to devastating consequences. The &lt;a href="https://en.wikipedia.org/wiki/2017_Equifax_data_breach"&gt;2017
Equifax data breach&lt;/a&gt; was
caused by Equifax failing to update a &lt;a href="https://struts.apache.org/"&gt;framework&lt;/a&gt;
that it used for one of its websites after the framework patched a security
vulnerability.&lt;/p&gt;
&lt;p&gt;The same idea applies to other bug fixes, functionality improvements, and
performance improvements. By updating your dependencies, you can easily bring
these improvements into your project.&lt;/p&gt;
&lt;p&gt;The second reason is to avoid having to make huge changes later when you are
forced to upgrade for whatever reason. For example, you might start off with
version 1.0 of a library. You don’t upgrade for a long time, and then you try to
upgrade directly to version 4.0. This could involve significant changes that
could have been less painful if you had upgraded to 2.0 and 3.0 in between.&lt;/p&gt;
&lt;p&gt;This isn’t that rare of a situation. Maybe you want to upgrade to a new major
version of Node, but the current version of one of your libraries doesn’t
support it.&lt;/p&gt;
&lt;p&gt;Similarly, maybe your libraries depend on each other in a way that makes it
difficult to update one without also updating another. For example, you might
use a React component library that has a peer dependency on React. You only want
to update the component library, but then you find yourself being forced to
update React as well.&lt;/p&gt;
&lt;p&gt;This cascading effect can result in a much larger change than you originally
intended to make, especially if you must change some of your own code as a
result. The longer you go without updating your libraries, the more likely
you’ll run into this situation.&lt;/p&gt;
&lt;p&gt;Some library authors try to ease migrations by introducing breaking changes in a
thoughtful way, such as deprecating features before removing them. If you rarely
update, you might end up being forced to make big changes at an inconvenient
time rather than having an early warning and the chance to make a plan.&lt;/p&gt;
&lt;p&gt;Updating dependencies is also a way to stay informed. It gives you a sense of
how the development of a library is going. You might learn of a new feature that
would be helpful to you. Or you might realize that a library is changing in such
a way that it won’t meet your needs in the future, and you should start
investigating alternatives. It’s easy to miss things like these if you install a
library and never think about it again.&lt;/p&gt;
&lt;p&gt;Lastly, if you are a library author yourself, it makes sense to update your
dependencies on behalf of your end users. They cannot easily control the
versions of sub-dependencies, so if there is an issue with one, they may be
stuck with the issue if you don’t update your &lt;code&gt;package.json&lt;/code&gt; to allow them to
bring in a newer version of the sub-dependency.&lt;/p&gt;
&lt;h2 id="why-not-to-update"&gt;Why Not to Update&lt;a class="anchor" href="#why-not-to-update"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;However, there are also reasons not to update libraries. The biggest one is that
any change carries a risk of causing a problem. While you may get a fix for a
bug that you aren’t even aware of, it’s also possible that the updated library
introduces a new bug or performance regression.&lt;/p&gt;
&lt;p&gt;One &lt;a href="https://kevin.burke.dev/kevin/dont-update-dependencies/"&gt;school of thought&lt;/a&gt;
is that you should only update dependencies when you have a specific reason
instead of updating just for the sake of updating. Having a good test suite
helps to mitigate the risk, but it’s still a risk.&lt;/p&gt;
&lt;p&gt;Updating dependencies also takes time away from building new features or fixing
known issues. It’s a chore that can take an unexpectedly long amount of time
when a library changes significantly.&lt;/p&gt;
&lt;p&gt;Regardless of how often you decide to keep libraries up to date, let’s consider
the actual mechanisms for doing so.&lt;/p&gt;
&lt;h2 id="updating-dependencies"&gt;Updating Dependencies&lt;a class="anchor" href="#updating-dependencies"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Keep the idea of &lt;a href="https://semver.org/"&gt;semantic versioning&lt;/a&gt; (semver) in
mind. This is the practice of versioning programs in a MAJOR.MINOR.PATCH manner.
A new major version denotes breaking changes, a new minor version denotes new
functionality that is backwards-compatible, and a new patch version denotes bug
fixes that are backwards-compatible.&lt;/p&gt;
&lt;p&gt;JS libraries tend to follow semantic versioning, but version numbers merely
reflect the author’s intent and understanding. They could publish a new minor
version that actually does have a breaking change by accident, or maybe you are
using the library in an unexpected way that causes an issue with the updated
version.&lt;/p&gt;
&lt;p&gt;By default, npm and Yarn expect libraries to follow semantic versioning. When
you add a library with either, the entry in &lt;code&gt;package.json&lt;/code&gt;  will have a caret
(&lt;code&gt;^&lt;/code&gt;) in front of the version:&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;"dependencies"&lt;/span&gt;&lt;span&gt;: {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;"lodash"&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;"^3.1.0"&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means that you will accept minor and patch version updates, but not major
version updates.&lt;/p&gt;
&lt;p&gt;To check if your dependencies are out of date, you can run &lt;a href="https://docs.npmjs.com/cli-commands/outdated.html"&gt;npm
outdated&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;Package&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;Current&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;Wanted&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;Latest&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;Location&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;lodash&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt;3.1&lt;/span&gt;&lt;span&gt;.0&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;3.10&lt;/span&gt;&lt;span&gt;.1&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;4.17&lt;/span&gt;&lt;span&gt;.15&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;npm-test&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you’re updating, the most important thing to do is to read the library’s
&lt;a href="https://keepachangelog.com/"&gt;changelog&lt;/a&gt;. This is usually the most efficient way
to figure out what changes you are bringing in, with the most crucial ones being
breaking changes.&lt;/p&gt;
&lt;p&gt;If you find yourself in the unfortunate situation of updating a library that
doesn’t have a changelog, but it’s open-source, you may have to go through the
commit history to figure out what has changed. Larger projects also tend to have
blogs that provide more details for new versions.&lt;/p&gt;
&lt;p&gt;The standard method of updating packages is to use &lt;a href="https://docs.npmjs.com/cli/update"&gt;npm
update&lt;/a&gt;, which updates all packages to the
latest version that is okay according to semver. In this case, you will update
Lodash to version 3.10.1.&lt;/p&gt;
&lt;p&gt;Even though version 4.17.15 is available, npm won’t update to it by default
because the caret limits you to minor and patch updates. You can also pass
specific packages to the command if you don’t want to update all packages at
once.&lt;/p&gt;
&lt;p&gt;In many cases, you’ll want to update to the latest available version, regardless
of the specified semver. Unfortunately, &lt;code&gt;npm update&lt;/code&gt; doesn’t have a way to do
this, so you’ll need to use  &lt;code&gt;npm install lodash@latest&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To make this process more efficient, especially when you have many dependencies,
consider using &lt;a href="https://github.com/dylang/npm-check"&gt;npm-check&lt;/a&gt; or
&lt;a href="https://github.com/raineorshine/npm-check-updates"&gt;npm-check-updates&lt;/a&gt;. These
CLI tools let you do updates in an interactive manner and provide helpful info
like a link to the project’s website so you can easily inspect changes.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;npm-check&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;lodash&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;😎&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;MAJOR&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;UP&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;Major&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;update&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;available.&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;https://lodash.com/&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                      &lt;/span&gt;&lt;span&gt;npm&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;install&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;--save&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;lodash@4.17.15&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;to&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;go&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;3.1&lt;/span&gt;&lt;span&gt;.0&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;to&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;4.17&lt;/span&gt;&lt;span&gt;.15&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;Use&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;npm-check&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;-u&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;interactive&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;update.&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;npm-check&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;-u&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt; Choose which packages to update.&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Major&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Update&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Potentially&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;breaking&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;API&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;changes.&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Use&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;caution.&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;❯◯&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;lodash&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;3.1&lt;/span&gt;&lt;span&gt;.0&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;❯&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;4.17&lt;/span&gt;&lt;span&gt;.15&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;https://lodash.com/&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yarn even has this feature built-in. Just run &lt;a href="https://yarnpkg.com/cli/upgrade-interactive"&gt;yarn
upgrade-interactive&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;yarn&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;upgrade-interactive&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Press&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;u&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;dow&lt;/span&gt;&lt;span&gt;n&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;to&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;packages.&lt;/span&gt;&lt;span&gt;         &lt;/span&gt;&lt;span&gt;Press&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ente&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;to&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;install.&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Press&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;lef&lt;/span&gt;&lt;span&gt;t&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;righ&lt;/span&gt;&lt;span&gt;t&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;to&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;versions.&lt;/span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;Press&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;ctrl+&lt;/span&gt;&lt;span&gt;c&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;to&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;abort.&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt; Pick the packages you want to upgrade.       Current      Range/Latest&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;lodash&lt;/span&gt;&lt;span&gt;                                      &lt;/span&gt;&lt;span&gt;◯&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;3.1&lt;/span&gt;&lt;span&gt;.0&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;◯&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;3.10&lt;/span&gt;&lt;span&gt;.1&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt;◉&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;4.17&lt;/span&gt;&lt;span&gt;.15&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yarn doesn’t have an &lt;code&gt;outdated&lt;/code&gt; command, so &lt;code&gt;upgrade-interactive&lt;/code&gt; basically
combines npm’s &lt;code&gt;outdated&lt;/code&gt; and &lt;code&gt;update&lt;/code&gt; into one, though you can also use &lt;a href="https://yarnpkg.com/cli/up"&gt;yarn
up&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note that there are some differences if you are still using Yarn v1. The upgrade
command is &lt;a href="https://classic.yarnpkg.com/en/docs/cli/upgrade/"&gt;yarn upgrade&lt;/a&gt;
instead of &lt;code&gt;yarn up&lt;/code&gt;. Yarn v1 also does have an &lt;a href="https://classic.yarnpkg.com/en/docs/cli/outdated"&gt;outdated
command&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="automating-updates"&gt;Automating Updates&lt;a class="anchor" href="#automating-updates"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There has also been a push to streamline the update process with external
services. Some tools for this purpose include Gemnasium,
&lt;a href="https://github.com/greenkeeperio/greenkeeper"&gt;Greenkeeper&lt;/a&gt;, and
&lt;a href="https://dependabot.com/"&gt;Dependabot&lt;/a&gt;, though they have been acquired or
subsumed by
&lt;a href="https://about.gitlab.com/press/releases/2018-01-30-gemnasium-acquisition.html"&gt;GitLab&lt;/a&gt;,
&lt;a href="https://snyk.io/blog/snyk-partners-with-greenkeeper-to-help-developers-proactively-maintain-dependency-health/"&gt;Snyk&lt;/a&gt;,
and &lt;a href="https://dependabot.com/blog/hello-github/"&gt;GitHub&lt;/a&gt;, respectively.&lt;/p&gt;
&lt;p&gt;The general idea is to have a service that monitors your project’s dependencies
and even opens pull requests to update them. They can also alert you when
security vulnerabilities are found in your dependency tree. Here is a screenshot
of a Dependabot PR that is generated by GitHub’s &lt;a href="https://help.github.com/en/github/managing-security-vulnerabilities/configuring-automated-security-updates"&gt;security
updates&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/qF6kXue.png" alt="Dependabot PR example"&gt;&lt;/p&gt;
&lt;p&gt;Services like these can make it considerably easier to keep your libraries up to
date since you don’t have to remember to do so yourself.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;a class="anchor" href="#conclusion"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Keeping libraries up to date might seem straightforward on the surface, but it’s
good to put some thought into your update strategy on a per-project basis. One
project may never need to be updated again, while another one may call for using
Dependabot, Snyk, or another service to aggressively stay up to date. Or maybe
you are fine with a just-in-time approach where you update dependencies as you
discover issues. In any case, make your decision an explicit one.&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/how-to-keep-your-js-libraries-up-to-date</guid><pubDate>Tue, 07 Jul 2020 00:00:00 GMT</pubDate></item><item><title>Serve Videos Instead of GIFs</title><link>https://www.dannyguo.com/blog/serve-videos-instead-of-gifs</link><description>&lt;article&gt;
        &lt;h1&gt;Serve Videos Instead of GIFs&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2020-05-16"&gt;
                May 16, 2020
            &lt;/time&gt;
             · 
            814 words  ·  ~5 minutes to read
            
        &lt;/div&gt;

        &lt;p&gt;The Graphics Interchange Format (&lt;a href="https://en.wikipedia.org/wiki/GIF"&gt;GIF&lt;/a&gt;) is
over 30 years old but is a pervasive part of internet culture. We use GIFs to
serve short, silent, and looping videos, which frequently become
&lt;a href="https://en.wikipedia.org/wiki/Internet_meme"&gt;memes&lt;/a&gt;. &lt;a href="https://giphy.com/"&gt;Entire
services&lt;/a&gt; exist to create and share them, and many
smartphone keyboards have built-in GIF support.&lt;/p&gt;
&lt;p&gt;It’s also easy to embed them into websites with simple
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img"&gt;image&lt;/a&gt; tags. Yet
GIFs have a significant drawback: massive file sizes. A single GIF can be larger
than a typical website (&lt;a href="https://www.keycdn.com/support/the-growth-of-web-page-size"&gt;over 2
MB&lt;/a&gt;).&lt;/p&gt;
&lt;video&gt;
    &lt;source src="https://i.imgur.com/iGkFsvW.mp4" type="video/mp4"&gt;
    &lt;p&gt;Your browser doesn't support this embedded video.&lt;/p&gt;
&lt;/source&gt;&lt;/video&gt;
&lt;h2 id="gifs"&gt;GIFs&lt;a class="anchor" href="#gifs"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;I don’t care what anything was &lt;em&gt;designed&lt;/em&gt; to do. I care about what it &lt;em&gt;can&lt;/em&gt; do.&lt;/p&gt;
&lt;p&gt;— &lt;a href="https://en.wikipedia.org/wiki/Gene_Kranz"&gt;Gene Kranz&lt;/a&gt; in &lt;a href="https://youtu.be/XLMDSjCzEx8"&gt;Apollo
13&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;GIFs &lt;a href="https://www.wired.com/2017/05/gif-turns-30-ancient-format-changed-internet/"&gt;were never
designed&lt;/a&gt;
to serve full videos. Almost to the contrary, &lt;a href="https://en.wikipedia.org/wiki/Steve_Wilhite"&gt;Steve
Wilhite&lt;/a&gt; designed the format to
solve the problem of efficiently serving simple images, like weather maps and
other graphics.&lt;/p&gt;
&lt;p&gt;Each image in a GIF is limited to a color pallete of 256 colors. Images are also
&lt;a href="https://en.wikipedia.org/wiki/Lossless_compression"&gt;losslessly compressed&lt;/a&gt;
using &lt;a href="https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch"&gt;LZW&lt;/a&gt;.
These factors made GIF a good choice for graphics rather than images like
photographs, which have much more detail and are better suited for a format like
&lt;a href="https://en.wikipedia.org/wiki/JPEG"&gt;JPEG&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;GIF also allowed for storing more than one image in a file. This fact made it
easy for a new GIF specification (GIF89a) to add the option for time delays
between images, turning them into frames of an animation.&lt;/p&gt;
&lt;p&gt;The specification also allows for a space called the application extension
block. &lt;a href="https://en.wikipedia.org/wiki/Netscape_Navigator"&gt;Netscape Navigator&lt;/a&gt;
v2.0 used this space to allow GIF creators to specify that a GIF should loop a
certain number of times or indefinitely. This gave us the GIF as we commonly see
it today.&lt;/p&gt;
&lt;p&gt;However, GIFs tend to be several megabytes in size now because we frequently use
them to display videos comprised of images with a lot of detail. Remember that
each one is losslessly compressed. Furthermore, GIF doesn’t do any compression
between frames, a basic foundation of typical &lt;a href="https://en.wikipedia.org/wiki/Data_compression#Video"&gt;video
compression&lt;/a&gt; techniques.
Frames of a video tend to be fairly similar. Because GIFs don’t exploit this
information redundancy, the format is a very inefficient way to serve videos.&lt;/p&gt;
&lt;p&gt;The solution is to use a format that’s actually designed to serve videos, like
&lt;a href="https://en.wikipedia.org/wiki/MPEG-4_Part_14"&gt;MP4&lt;/a&gt; or
&lt;a href="https://en.wikipedia.org/wiki/WebM"&gt;WebM&lt;/a&gt;. Many services do this transparently.
When Twitter &lt;a href="https://techcrunch.com/2014/06/19/gasp-twitter-gifs-arent-actually-gifs/"&gt;added GIF
support&lt;/a&gt;
in 2014, they implemented the feature by converting uploaded GIFs into videos to
serve instead. Imgur &lt;a href="https://blog.imgur.com//2014/10/09/introducing-gifv/"&gt;started doing the same
thing&lt;/a&gt; the same year.&lt;/p&gt;
&lt;h2 id="serving-videos"&gt;Serving Videos&lt;a class="anchor" href="#serving-videos"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Serving videos instead of GIFs is easy to do now with the HTML &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video"&gt;video
element&lt;/a&gt;, which
is supported &lt;a href="https://caniuse.com/#feat=video"&gt;almost universally&lt;/a&gt;, but it does
take more work to use a video tag rather than an image tag. To serve the video
equivalent of a GIF, we can use markup like this:&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;video&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;autoplay&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;loop&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;muted&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;playsinline&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &amp;lt;&lt;/span&gt;&lt;span&gt;source&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"dancing-baby.webm"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"video/webm"&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &amp;lt;&lt;/span&gt;&lt;span&gt;source&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"dancing-baby.mp4"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"video/mp4"&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;Your browser doesn't support this embedded video.&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;video&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using the &lt;code&gt;autoplay&lt;/code&gt;, &lt;code&gt;loop&lt;/code&gt;, and &lt;code&gt;muted&lt;/code&gt; attributes gives us the same behavior
that we expect from a GIF.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;playsinline&lt;/code&gt; attribute is necessary for &lt;a href="https://webkit.org/blog/6784/new-video-policies-for-ios/"&gt;iOS in
particular&lt;/a&gt;. See this
&lt;a href="https://stackoverflow.com/a/48493032/1481479"&gt;Stack Overflow answer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The element will load the &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Video_and_audio_content#Media_file_support_in_browsers"&gt;first
source&lt;/a&gt;
that the browser supports. In this case, if the browser can’t play WebM videos,
it will try to play the MP4 version instead.&lt;/p&gt;
&lt;p&gt;We also provide a fallback message in case the browser doesn’t support the video
element. This is distinct from the case where the browser doesn’t support any of
the sources. In that case, the element fires an error event.&lt;/p&gt;
&lt;p&gt;We don’t have to provide the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types"&gt;MIME
type&lt;/a&gt;
for each source, but doing so might allow the browser to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source#Attributes"&gt;save a network
request&lt;/a&gt;.
If it can’t handle the type, it can move on to the next source rather than
making a request to the server.&lt;/p&gt;
&lt;p&gt;Video behavior can also be affected by the user’s power settings. For example,
videos won’t autoplay on iOS if the user has &lt;a href="https://support.apple.com/en-us/HT205234"&gt;low power
mode&lt;/a&gt; on. Instead, the user should see
the controls and can manually play the video.&lt;/p&gt;
&lt;p&gt;While serving a video is not as straightforward as serving a GIF, the file size
savings can be tremendous. The following video is 103 KB in size, compared to
4.1 MB for the GIF that I converted it from. That’s a size reduction of over
97%.&lt;/p&gt;
&lt;video&gt;
    &lt;source src="https://i.imgur.com/VQMB3VR.mp4" type="video/mp4"&gt;
    &lt;p&gt;Your browser doesn't support this embedded video.&lt;/p&gt;
&lt;/source&gt;&lt;/video&gt;
&lt;h2 id="creating-videos"&gt;Creating Videos&lt;a class="anchor" href="#creating-videos"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To quickly convert a GIF into a video, there are plenty of websites that let you
&lt;a href="https://cloudconvert.com/gif-to-mp4"&gt;do a one-off conversion&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To convert a GIF into a video file on the command line, I use
&lt;a href="https://ffmpeg.org/"&gt;FFmpeg&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;ffmpeg&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;-f&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;gif&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;-i&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;dancing-baby.gif&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;dancing-baby.mp4&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To take video screenshots in macOS, I use &lt;a href="https://getkap.co/"&gt;Kap&lt;/a&gt;. It supports
saving the videos as GIF, MP4, WebM, or
&lt;a href="https://en.wikipedia.org/wiki/APNG"&gt;APNG&lt;/a&gt; files.
&lt;a href="https://support.apple.com/quicktime"&gt;QuickTime&lt;/a&gt; also &lt;a href="https://support.apple.com/guide/quicktime-player/record-your-screen-qtp97b08e666/mac"&gt;supports screen
recordings&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you use &lt;a href="https://imgur.com/"&gt;Imgur&lt;/a&gt;, one issue that I’ve experienced is poor
video quality after uploading MP4s. The reason seems to be that &lt;a href="https://community.imgur.com/t/videos-losing-quality-on-upload/62258"&gt;they get
recompressed&lt;/a&gt;.
So at least for Imgur, it’s better to upload a GIF and let them take care of
converting it into a video.&lt;/p&gt;
&lt;p&gt;One final note: &lt;a href="https://www.youtube.com/watch?v=CBtKxsuGvko"&gt;according to
Wilhite&lt;/a&gt;, GIF &lt;a href="https://bits.blogs.nytimes.com/2013/05/23/battle-over-gif-pronunciation-erupts/"&gt;is
pronounced&lt;/a&gt;
with a soft “G,” like “jif.” That settles the &lt;a href="https://www.mentalfloss.com/article/551894/how-do-linguists-pronounce-gif"&gt;never-ending
debate&lt;/a&gt;
for me.&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/serve-videos-instead-of-gifs</guid><pubDate>Sat, 16 May 2020 00:00:00 GMT</pubDate></item><item><title>Playwright vs. Puppeteer</title><link>https://blog.logrocket.com/playwright-vs-puppeteer/</link><description>&lt;article&gt;
        &lt;h1&gt;Playwright vs. Puppeteer&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2020-05-06"&gt;
                May 6, 2020
            &lt;/time&gt;
             · 
            1,319 words  ·  ~7 minutes to read
            
        &lt;/div&gt;

        &lt;p&gt;&lt;em&gt;This post was originally written for the &lt;a href="https://blog.logrocket.com/playwright-vs-puppeteer/"&gt;LogRocket
blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/microsoft/playwright"&gt;Playwright&lt;/a&gt; is a
&lt;a href="https://nodejs.org"&gt;Node.js&lt;/a&gt; library for browser automation.
&lt;a href="https://pptr.dev/"&gt;Puppeteer&lt;/a&gt; is also a Node.js library for browser automation.
Let’s take a look at what makes each of them interesting and consider the
factors that should go into deciding which one to use.&lt;/p&gt;
&lt;h2 id="historical-background"&gt;Historical Background&lt;a class="anchor" href="#historical-background"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It might be helpful to understand some historical context first. Browser
automation is not a new technology. &lt;a href="https://www.selenium.dev/"&gt;Selenium&lt;/a&gt; has
been around since 2004, and for a long time, it was the go-to tool for this
category. While its primary use case has been implementing test suites for
websites, programmers have also used it for things like taking screenshots or
automating tasks when websites don’t provide APIs.&lt;/p&gt;
&lt;p&gt;However, Selenium has a reputation for being unreliable. Selenium tests are
&lt;a href="https://sqa.stackexchange.com/a/32544/42012"&gt;commonly flaky&lt;/a&gt;, failing
intermittently for non-obvious reasons that are difficult to reproduce.&lt;/p&gt;
&lt;p&gt;Selenium is also fairly resource-heavy, in part because it has generally been
used to run full browsers. Eventually, programmers started using &lt;a href="https://en.wikipedia.org/wiki/Headless_browser"&gt;headless
browsers&lt;/a&gt; in some cases. These
browsers do most of the work of full browsers, but they don’t actually render
the UI. &lt;a href="https://en.wikipedia.org/wiki/PhantomJS"&gt;PhantomJS&lt;/a&gt; was one of the more
popular ones.&lt;/p&gt;
&lt;p&gt;Headless browsers can work well for testing simpler websites, but to test
everything that websites can do, they need to emulate full browsers as closely
as possible by &lt;a href="https://phantomjs.org/supported-web-standards.html"&gt;supporting various web
standards&lt;/a&gt;. Yet
comprehensive support is an &lt;a href="https://drewdevault.com/2020/03/18/Reckless-limitless-scope.html"&gt;almost impossible
task&lt;/a&gt; because
of how complicated browsers have become.&lt;/p&gt;
&lt;p&gt;More involved websites also justify more testing, so the main problem with past
headless browsers is that they become less usable exactly when you want to use
them more heavily.&lt;/p&gt;
&lt;p&gt;The landscape changed significantly in 2017. The author of PhantomJS deprecated
it, and his
&lt;a href="https://groups.google.com/forum/m/#!topic/phantomjs/9aI5d-LDuNE"&gt;impetus&lt;/a&gt; for
doing so was Google’s announcement of &lt;a href="https://developers.google.com/web/updates/2017/04/headless-chrome"&gt;headless
Chrome&lt;/a&gt;,
which was first available in Chrome 59. Firefox &lt;a href="https://www.ghacks.net/2017/09/01/first-look-at-firefoxs-headless-mode/"&gt;followed
up&lt;/a&gt;
with a headless mode later that year. These developments made it possible to
write efficient tests and scripts against the same browsers that people actually
use.&lt;/p&gt;
&lt;h2 id="puppeteer"&gt;Puppeteer&lt;a class="anchor" href="#puppeteer"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Google followed up headless Chrome with the &lt;a href="https://github.com/puppeteer/puppeteer/releases/tag/v0.9.0"&gt;public
release&lt;/a&gt; of
Puppeteer a few months later. The Chrome DevTools team develops it, giving it a
major advantage over similar projects because it has institutional support from
the same company that makes the &lt;a href="https://en.wikipedia.org/wiki/Usage_share_of_web_browsers"&gt;most widely used
browser&lt;/a&gt; in the
world.&lt;/p&gt;
&lt;p&gt;Puppeteer can drive either Chrome or
&lt;a href="https://en.wikipedia.org/wiki/Chromium_(web_browser)"&gt;Chromium&lt;/a&gt; (the
open-source browser that Chrome is based on), and by default, installing
Puppeteer also downloads a compatible version of Chromium. This avoids the
otherwise likely situation that your browser eventually gets an update that
breaks Puppeteer.&lt;/p&gt;
&lt;p&gt;Puppeteer makes it easy to get started with browser automation. This is in part
because of how it interfaces with the browser. Selenium uses the &lt;a href="https://www.w3.org/TR/webdriver/"&gt;WebDriver
protocol&lt;/a&gt;, which requires running a server
that acts as an intermediary between Selenium and the browser. For example,
there is &lt;a href="https://chromedriver.chromium.org/"&gt;ChromeDriver&lt;/a&gt;,
&lt;a href="https://github.com/mozilla/geckodriver"&gt;geckodriver&lt;/a&gt; (for Firefox), and
&lt;a href="https://developer.apple.com/documentation/webkit/testing_with_webdriver_in_safari"&gt;safaridriver&lt;/a&gt;.
This requirement for a special server adds complexity.&lt;/p&gt;
&lt;p&gt;Puppeteer, in contrast, controls Chrome using the nonstandard &lt;a href="https://github.com/WICG/devtools-protocol/"&gt;DevTools
protocol&lt;/a&gt;, so it talks to the
browser directly and provides additional functionality over Selenium like
&lt;a href="https://pptr.dev/#?product=Puppeteer&amp;amp;version=master&amp;amp;show=api-pagesetrequestinterceptionvalue"&gt;intercepting network
requests&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’ve used Puppeteer for website testing and for &lt;a href="https://www.dannyguo.com/blog/automating-turbotax-data-entry-with-puppeteer/"&gt;automating data entry in
TurboTax&lt;/a&gt;,
and it was a relatively painless process in both cases.&lt;/p&gt;
&lt;h2 id="playwright"&gt;Playwright&lt;a class="anchor" href="#playwright"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We gained a new option when Microsoft released the &lt;a href="https://github.com/microsoft/playwright/releases/tag/v0.10.0"&gt;first public
version&lt;/a&gt; of
Playwright on January 31, 2020.&lt;/p&gt;
&lt;p&gt;If you compare the contributor pages for
&lt;a href="https://github.com/microsoft/playwright/graphs/contributors"&gt;Playwright&lt;/a&gt; and
&lt;a href="https://github.com/puppeteer/puppeteer/graphs/contributors"&gt;Puppeteer&lt;/a&gt;, you’ll
notice the top two contributors to Puppeteer now work on Playwright. The
Puppeteer team essentially moved from Google to Microsoft and became the
Playwright team.&lt;/p&gt;
&lt;p&gt;As a result, Playwright is very similar to Puppeteer in many respects. The API
methods are identical in most cases, and Playwright also bundles compatible
browsers by default.&lt;/p&gt;
&lt;p&gt;Playwright’s biggest differentiating point is cross-browser support. It can
drive Chromium, WebKit (the browser engine for Safari), and Firefox.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/kzpnIp9.png" alt="Playwright browser support"&gt;&lt;/p&gt;
&lt;p&gt;You can check the status of the test suite at the &lt;a href="https://aslushnikov.github.io/isplaywrightready/"&gt;Is Playwright
Ready?&lt;/a&gt; website.&lt;/p&gt;
&lt;p&gt;However, the Playwright team’s approach to cross-browser support is
&lt;a href="https://twitter.com/gsnedders/status/1220331113777967105"&gt;controversial&lt;/a&gt;. They
ship Playwright with patched versions of WebKit and Firefox. Their
&lt;a href="https://github.com/microsoft/playwright#q-what-browser-versions-does-playwright-use"&gt;response&lt;/a&gt;
is that they have only patched the WebKit and Firefox debugging protocols, not
the actual rendering engines.&lt;/p&gt;
&lt;p&gt;Yet these are still changes that have not been developed in conjunction with the
WebKit and Firefox teams. While it’s possible that these changes might get
merged in eventually, that is not guaranteed. The Playwright team might have to
indefinitely maintain these changes, which could affect the long-term
reliability of Playwright’s cross-browser support.&lt;/p&gt;
&lt;p&gt;Starting a new library also allowed the Playwright team to make the API more
ergonomic in ways that would be breaking changes in Puppeteer. For example,
Playwright’s &lt;code&gt;page.click&lt;/code&gt; waits for the element to be available and visible by
default.&lt;/p&gt;
&lt;p&gt;This doesn’t mean that Puppeteer won’t get similar improvements later in a new
major version. It just means that, for now, Playwright can be easier to use for
some situations.&lt;/p&gt;
&lt;p&gt;The last noteworthy difference is that Playwright has a more powerful browser
context feature that lets you simulate multiple devices with a single browser
instance.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; { chromium, devices } &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;require&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"playwright"&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;async&lt;/span&gt;&lt;span&gt; () &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; browser &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; chromium.&lt;/span&gt;&lt;span&gt;launch&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; deviceName &lt;/span&gt;&lt;span&gt;of&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;span&gt;"iPhone 11"&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;"iPad Pro 11"&lt;/span&gt;&lt;span&gt;]) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; context &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; browser.&lt;/span&gt;&lt;span&gt;newContext&lt;/span&gt;&lt;span&gt;({&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;...&lt;/span&gt;&lt;span&gt;devices[deviceName]&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        });&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; page &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; context.&lt;/span&gt;&lt;span&gt;newPage&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; page.&lt;/span&gt;&lt;span&gt;goto&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'http://github.com'&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; page.&lt;/span&gt;&lt;span&gt;screenshot&lt;/span&gt;&lt;span&gt;({&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            path: &lt;/span&gt;&lt;span&gt;`github-&lt;/span&gt;&lt;span&gt;${&lt;/span&gt;&lt;span&gt;deviceName.&lt;/span&gt;&lt;span&gt;replace&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;/ /&lt;/span&gt;&lt;span&gt;g&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;"-"&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;.png`&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        });&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; browser.&lt;/span&gt;&lt;span&gt;close&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;})();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each browser context is isolated from other contexts in terms of cookies, local
storage, etc., and each context can also have multiple pages underneath it.&lt;/p&gt;
&lt;h2 id="choosing-a-library"&gt;Choosing a Library&lt;a class="anchor" href="#choosing-a-library"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Because Playwright and Puppeteer were largely developed by the same team and
have such similar APIs, migrating from Puppeteer to Playwright &lt;a href="https://medium.com/@davert/puppeteer-to-playwright-migration-guide-6c86ea66e85e"&gt;isn’t too
difficult&lt;/a&gt;.
Yet you shouldn’t choose Playwright over Puppeteer just because Playwright is
newer — Playwright hasn’t reached a 1.0 release yet, so the API &lt;a href="https://github.com/microsoft/playwright#q-is-playwright-ready"&gt;may get
breaking changes&lt;/a&gt;
before then.&lt;/p&gt;
&lt;p&gt;I think the three main factors to consider are cross-browser support, long-term
library support, and your particular use case for browser automation.&lt;/p&gt;
&lt;p&gt;For cross-browser support, it’s important to know that Puppeteer &lt;a href="https://github.com/puppeteer/puppeteer/releases/tag/v2.1.0"&gt;recently
added&lt;/a&gt; experimental
support for driving Firefox and is able to do so without patching Firefox.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; browser &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; puppeteer.&lt;/span&gt;&lt;span&gt;launch&lt;/span&gt;&lt;span&gt;({product: &lt;/span&gt;&lt;span&gt;"firefox"&lt;/span&gt;&lt;span&gt;});&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, there &lt;a href="https://github.com/puppeteer/puppeteer/issues/4887"&gt;doesn’t
appear&lt;/a&gt; to be any public
work on Puppeteer support for WebKit. Note that even third-party browsers on iOS
&lt;a href="https://stackoverflow.com/a/48541760/1481479"&gt;are required&lt;/a&gt; to use WebKit as
their engine. So if testing for your iOS users is important, Playwright should
be appealing.&lt;/p&gt;
&lt;p&gt;On the other hand, many teams have decided that testing more than one browser
(usually Chrome) isn’t worth the marginal benefit. Playwright could change this
calculus because it makes cross-browser support easier, but it’s still a
potential reason to just stick with Puppeteer.&lt;/p&gt;
&lt;p&gt;You should also consider what library has better prospects for future
development. We don’t know for sure that Playwright’s approach of patching
Firefox and WebKit will work out in the long run.&lt;/p&gt;
&lt;p&gt;A reason to be optimistic, however, is that the Playwright team gave us these
tools in the first place. The new Puppeteer team will have to show that it can
keep pace with the Playwright team in terms of improving their respective
libraries.&lt;/p&gt;
&lt;p&gt;Regardless, I’m thankful that Puppeteer is still under active development and is
by no means an abandoned project just because the original developers moved on.
This is a benefit of being supported by the Chrome team.&lt;/p&gt;
&lt;p&gt;Lastly, the decision depends on your use case. If you are doing something like
automating a website workflow or taking screenshots, cross-browser support may
not even matter to you.&lt;/p&gt;
&lt;p&gt;It can also make sense to stick with Selenium or whatever you are currently
using if it is working well for you. The web development community has years of
accumulated wisdom and tooling around Selenium, and you don’t necessarily have
to abandon that just because there are new options.&lt;/p&gt;
&lt;p&gt;For testing specifically, &lt;a href="https://www.cypress.io/"&gt;Cypress&lt;/a&gt; has also become a
popular choice. It has a &lt;a href="https://www.cypress.io/how-it-works"&gt;unique approach&lt;/a&gt;
of running in band with your website code, making tests more reliable. It
&lt;a href="https://www.cypress.io/blog/2020/02/06/introducing-firefox-and-edge-support-in-cypress-4-0/"&gt;recently
added&lt;/a&gt;
beta Firefox and Edge support.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;a class="anchor" href="#conclusion"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Overall, I’m glad there is healthy competition in the browser automation space.
I hope they drive each other to become even better, making browser automation
progressively easier and more reliable.&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/playwright-vs-puppeteer</guid><pubDate>Wed, 06 May 2020 00:00:00 GMT</pubDate></item><item><title>How to Handle PII in Websites</title><link>https://blog.logrocket.com/how-to-handle-pii-websites-web-apps/</link><description>&lt;article&gt;
        &lt;h1&gt;How to Handle PII in Websites&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2020-03-28"&gt;
                March 28, 2020
            &lt;/time&gt;
             · 
            1,197 words  ·  ~6 minutes to read
            
        &lt;/div&gt;

        &lt;p&gt;&lt;em&gt;This post was originally written for the &lt;a href="https://blog.logrocket.com/how-to-handle-pii-websites-web-apps/"&gt;LogRocket
blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Many websites collect and store &lt;a href="https://en.wikipedia.org/wiki/Personal_data"&gt;personally identifiable
information&lt;/a&gt; (PII) in their normal
course of business, and unfortunately, there are numerous ways that collected
PII can be compromised. When this happens, the website’s users are exposed to
personal risks, the website’s reputation is damaged, and the site owners can
face serious legal and financial consequences.&lt;/p&gt;
&lt;h2 id="the-importance-of-pii"&gt;The Importance of PII&lt;a class="anchor" href="#the-importance-of-pii"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;PII is information tied to a particular individual or that can be used to
identify them. Some common examples are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Name&lt;/li&gt;
&lt;li&gt;Address&lt;/li&gt;
&lt;li&gt;Telephone number&lt;/li&gt;
&lt;li&gt;Gender&lt;/li&gt;
&lt;li&gt;Date of birth&lt;/li&gt;
&lt;li&gt;Social Security number&lt;/li&gt;
&lt;li&gt;Driver’s license number&lt;/li&gt;
&lt;li&gt;Passport number&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This sort of information can be stolen to facilitate identity theft, an
increasingly common crime. In 2018, the FTC
&lt;a href="https://www.thebalance.com/identity-theft-crimes-by-the-numbers-4157714"&gt;estimated&lt;/a&gt;
that over 444,000 people filed identity theft reports, and the most common type
of identity theft was credit card fraud.&lt;/p&gt;
&lt;p&gt;You can think of a set of PII as a key to people’s personal lives. By giving you
their PII, your users are entrusting you to take care of it.&lt;/p&gt;
&lt;p&gt;In many cases, there is a legal requirement to do so. For example, the &lt;a href="https://en.wikipedia.org/wiki/General_Data_Protection_Regulation"&gt;General
Data Protection
Regulation&lt;/a&gt;,
the &lt;a href="https://en.wikipedia.org/wiki/California_Consumer_Privacy_Act"&gt;California Consumer Protection
Act&lt;/a&gt;, and the
&lt;a href="https://en.wikipedia.org/wiki/Health_Insurance_Portability_and_Accountability_Act"&gt;Health Insurance Portability and Accountability
Act&lt;/a&gt;
all provide rules for how companies need to treat personal data.&lt;/p&gt;
&lt;h2 id="data-breaches"&gt;Data Breaches&lt;a class="anchor" href="#data-breaches"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Companies generally place great value on the data they’ve collected; some have
even referred to data as “&lt;a href="https://www.quora.com/Who-should-get-credit-for-the-quote-data-is-the-new-oil"&gt;the new
oil&lt;/a&gt;.”
Yet it’s increasingly being viewed more as a
&lt;a href="https://disruptionhub.com/david-carboni-data-was-asset-now-liability/"&gt;liability&lt;/a&gt;.
One lapse in security can lead to a bulk loss of PII, which is frequently
accompanied by a negative news headline. Consider Equifax’s data breach, which
led to weeks of &lt;a href="https://www.nytimes.com/interactive/2017/your-money/equifax-data-breach-credit.html"&gt;press
coverage&lt;/a&gt;
and ultimately a $650 million
&lt;a href="https://www.nytimes.com/2019/07/22/business/equifax-settlement.html"&gt;fine&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Data breaches have become so common that security expert &lt;a href="https://www.troyhunt.com/"&gt;Troy
Hunt&lt;/a&gt; set up a service called &lt;a href="https://haveibeenpwned.com/"&gt;Have I Been
Pwned&lt;/a&gt;, which keeps track of breaches and lets
people check whether their email address and personal information is included.&lt;/p&gt;
&lt;h2 id="protecting-pii"&gt;Protecting PII&lt;a class="anchor" href="#protecting-pii"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To avoid being one of those websites that have lost data, let’s consider
possible attack vectors and how we can guard against them. Keep in mind that
like other aspects of security, it only takes one failure point for PII to be
lost. The best way to avoid leaking PII is to avoid collecting it in the first
place. Nevertheless, collecting some PII is crucial to many websites.&lt;/p&gt;
&lt;p&gt;Some of the following advice will overlap with the usual best practices for
security, but in general, we want to think about how PII is collected,
transported, stored, and accessed.&lt;/p&gt;
&lt;p&gt;Also keep in mind that the importance of information is relative. Take inventory
of all the data that you collect and classify it according to its sensitivity. A
Social Security number warrants more protection than a phone number.&lt;/p&gt;
&lt;h2 id="use-https"&gt;Use HTTPS&lt;a class="anchor" href="#use-https"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Essentially &lt;a href="https://www.troyhunt.com/heres-why-your-static-website-needs-https/"&gt;all
websites&lt;/a&gt;
should be using &lt;a href="https://en.wikipedia.org/wiki/HTTPS"&gt;HTTPS&lt;/a&gt; by now. By
encrypting the connection between the website and the server, we can prevent
third parties from intercepting the communications and reading what is being
sent, including submitted data like PII in form fields.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://letsencrypt.org/"&gt;Let’s Encrypt&lt;/a&gt; provides free TLS certificates, making
it affordable to set this up and provide a line of defense against &lt;a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack"&gt;man-in-the
middle&lt;/a&gt; attacks.&lt;/p&gt;
&lt;h2 id="hide-info-on-the-screen"&gt;Hide Info on the Screen&lt;a class="anchor" href="#hide-info-on-the-screen"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You may want to prevent some information from being displayed all the time. The
point of this is to prevent other people from seeing your users’ info just by
looking at their screen. For example, you can set an input’s type to “password”:&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"password"&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will result in an input field that replaces what the user types with
asterisks. You can do similar things for other data, such as masking a Social
Security number so that it is displayed as &lt;code&gt;XXX-XX-XXX&lt;/code&gt; after the user enters
it.&lt;/p&gt;
&lt;h2 id="third-party-services"&gt;Third-Party Services&lt;a class="anchor" href="#third-party-services"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When you integrate third-party services, it’s important to be aware of the data
that you are sending them. If you send it indiscriminately, you are bound to
send PII at some point.&lt;/p&gt;
&lt;p&gt;Google Analytics has a &lt;a href="https://support.google.com/analytics/answer/6366371?hl=en"&gt;list of
suggestions&lt;/a&gt; for
avoiding sending PII.&lt;/p&gt;
&lt;p&gt;If you use a UI recording tool like &lt;a href="https://logrocket.com/"&gt;LogRocket&lt;/a&gt;, you’ll
want to carefully think about what information should be hidden. For example,
LogRocket provides privacy &lt;a href="https://docs.logrocket.com/docs/privacy"&gt;mechanisms&lt;/a&gt;
to easily filter the data that is transferred, including a way to &lt;a href="https://docs.logrocket.com/docs/security#section-tools-to-block-pii"&gt;identify PII
fields&lt;/a&gt; so
that their values aren’t sent.&lt;/p&gt;
&lt;h2 id="logging"&gt;Logging&lt;a class="anchor" href="#logging"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Think about how your logging is set up and how the logs are stored. For example,
if you log every request to your server, it’d be easy for something like a
user’s Social Security number to end up in your logs in plaintext. Set up
filters to keep this from happening.&lt;/p&gt;
&lt;h2 id="storage"&gt;Storage&lt;a class="anchor" href="#storage"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Be particularly careful when storing PII in an object storage system like &lt;a href="https://aws.amazon.com/s3/"&gt;AWS
S3&lt;/a&gt;. S3 buckets are frequently &lt;a href="https://github.com/nagwww/s3-leaks"&gt;accidentally
exposed&lt;/a&gt; to the public. It’s good practice
to default to &lt;a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html"&gt;explicitly blocking public
access&lt;/a&gt;
for buckets.&lt;/p&gt;
&lt;h2 id="encryption"&gt;Encryption&lt;a class="anchor" href="#encryption"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Depending on the sensitivity of particular information, you may want to encrypt
it at rest. This means that even if a hacker was able to obtain a copy of your
database, the encrypted information will be protected if they weren’t able to
steal the encryption key as well.&lt;/p&gt;
&lt;h2 id="employee-access"&gt;Employee Access&lt;a class="anchor" href="#employee-access"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Consider what employees can access what information. Ideally, you’ll have a
permissioning system so that employees are blocked from accessing information
without a legitimate business reason. You may also want to implement an auditing
system so that you know who accessed what information and when.&lt;/p&gt;
&lt;p&gt;Doing this well means coming up with a data access policy and making sure
employees are trained to understand it. You also need to make sure they are
complying with it after the fact.&lt;/p&gt;
&lt;p&gt;Facebook, for example, &lt;a href="https://www.vice.com/en_us/article/bjp9zv/facebook-employees-look-at-user-data"&gt;has had to fire
employees&lt;/a&gt;
who abused their privilege to access user data. Uber also &lt;a href="https://www.theverge.com/2016/1/6/10726004/uber-god-mode-settlement-fine"&gt;got in
trouble&lt;/a&gt;
over a “God View” that allowed employees to track customers without permission
and had to change their treatment of personal data as a result.&lt;/p&gt;
&lt;h2 id="dont-retain-data"&gt;Don’t Retain Data&lt;a class="anchor" href="#dont-retain-data"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Along the same line of thinking as not collecting PII in the first place, you
should also avoid retaining PII beyond how long you actually need it. If it no
longer provides value, then it can actually be a net negative to keep it because
you maintain the risk of it being stolen. You can reduce your exposure by
regularly pruning data.&lt;/p&gt;
&lt;p&gt;A recent trend is to offload storing sensitive information to other companies.
For example, &lt;a href="https://stripe.com/"&gt;Stripe&lt;/a&gt; provides a way to collect credit and
debit card numbers without the numbers ever touching your system. This makes it
much easier to &lt;a href="https://stripe.com/guides/pci-compliance#how-stripe-helps-organizations-achieve-and-maintain-pci-compliance"&gt;achieve PCI
compliance&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Another more general example is &lt;a href="https://www.verygoodsecurity.com/"&gt;Very Good
Security&lt;/a&gt;. They promote a
&lt;a href="https://blog.verygoodsecurity.com/posts/announcing-very-good-security's-zero-data-mission/"&gt;zero-data&lt;/a&gt;
approach in which they collect and store any sensitive information you want, you
get harmless tokens to store in your system, and then you use the tokens later
when you actually need the data. This effectively allows you to offload the job
of securing that data to someone else.&lt;/p&gt;
&lt;p&gt;This is the “you can’t lose what you don’t have” philosophy.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;a class="anchor" href="#conclusion"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Protecting PII is a never-ending challenge. Remember that it only takes a single
vulnerability for your service to leak all the PII it has ever collected. Even
if your security posture is strong at the moment, it takes constant vigilance to
keep your users safe.&lt;/p&gt;
&lt;p&gt;It’s important to be aware of the methods that can cause websites to lose PII,
but it’s just as important to regularly review whether or not you are actually
protected from these methods. By doing so, you make your website worthy of the
trust your users have given you.&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/how-to-handle-pii-in-websites</guid><pubDate>Sat, 28 Mar 2020 00:00:00 GMT</pubDate></item><item><title>Migrating From Authy to Bitwarden for 2FA Codes</title><link>https://www.dannyguo.com/blog/migrating-from-authy-to-bitwarden-for-2fa-codes</link><description>&lt;article&gt;
        &lt;h1&gt;Migrating From Authy to Bitwarden for 2FA Codes&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2020-03-25"&gt;
                March 25, 2020
            &lt;/time&gt;
             · 
            1,535 words  ·  ~8 minutes to read
            
        &lt;/div&gt;

        &lt;p&gt;I’ve used &lt;a href="https://authy.com/"&gt;Authy&lt;/a&gt; for several years to generate my
time-based one-time passwords
(&lt;a href="https://en.wikipedia.org/wiki/Time-based_One-time_Password_algorithm"&gt;TOTP&lt;/a&gt;)
for two-factor authentication
(&lt;a href="https://en.wikipedia.org/wiki/Multi-factor_authentication"&gt;2FA&lt;/a&gt;). For various
reasons, I recently migrated to using &lt;a href="https://bitwarden.com/"&gt;Bitwarden&lt;/a&gt;
instead.&lt;/p&gt;
&lt;h2 id="google-authenticator-issues"&gt;Google Authenticator Issues&lt;a class="anchor" href="#google-authenticator-issues"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Many services recommend using &lt;a href="https://en.wikipedia.org/wiki/Google_Authenticator"&gt;Google
Authenticator&lt;/a&gt; for 2FA. I
originally used it before switching to Authy, but I switched for a reason that
is still valid today: it doesn’t have any sort of backup or syncing
functionality.&lt;/p&gt;
&lt;p&gt;Check out the
&lt;a href="https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&amp;amp;showAllReviews=true"&gt;reviews&lt;/a&gt;
to get a sense of how often people get burned by switching to a new phone for
whatever reason and realizing they’ve lost all their codes or need to go through
each service one by one and set up 2FA again.&lt;/p&gt;
&lt;p&gt;Google Authenticator is also a neglected app. The &lt;a href="https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2"&gt;Android
app&lt;/a&gt;
was last updated on September 27, 2017, and the &lt;a href="https://apps.apple.com/us/app/google-authenticator/id388497605"&gt;iOS
app&lt;/a&gt; was last
updated on September 12, 2018. You could argue that these are relatively simple
apps that don’t need frequent updates, but take a look at what other apps like
&lt;a href="https://play.google.com/store/apps/details?id=org.shadowice.flocke.andotp"&gt;andOTP&lt;/a&gt;
and &lt;a href="https://getaegis.app/"&gt;Aegis&lt;/a&gt; offer in terms of functionality that Google
Authenticator doesn’t have, like being able to search for a service instead of
having to scroll though the entire list to find it.&lt;/p&gt;
&lt;h2 id="authy-issues"&gt;Authy Issues&lt;a class="anchor" href="#authy-issues"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I have happily used Authy for several years, I also have some issues with
it that caused me to look for a replacement.&lt;/p&gt;
&lt;h3 id="no-browser-extension"&gt;No Browser Extension&lt;a class="anchor" href="#no-browser-extension"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Authy doesn’t have a browser extension for
&lt;a href="https://www.mozilla.org/firefox/"&gt;Firefox&lt;/a&gt;, my primary browser. This is a
problem because an extension can offer some protection against
&lt;a href="https://en.wikipedia.org/wiki/Phishing"&gt;phishing&lt;/a&gt;, one of the main &lt;a href="https://www.scottbrady91.com/Authentication/Software-Tokens-Wont-Save-You"&gt;security
weaknesses&lt;/a&gt;
of using TOTP for 2FA. If the extension fails to find an entry that matches the
current domain, that can alert me to a possible phishing attempt.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://chrome.google.com/webstore/detail/authy-chrome-extension/fhgenkpocbhhddlgkjnfghpjanffonno"&gt;Chrome
extension&lt;/a&gt;
also hasn’t been updated in two and a half years and will &lt;a href="https://authy.com/blog/authy-chrome-app-extension-end-life/"&gt;no longer be
supported&lt;/a&gt; going
forward.&lt;/p&gt;
&lt;h3 id="no-web-client"&gt;No Web Client&lt;a class="anchor" href="#no-web-client"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Authy doesn’t have a web client. While this could be considered a security
feature, I’d rather have the option to access my codes through any browser in an
emergency. It’s a security vs. usability tradeoff that I’m willing to make.&lt;/p&gt;
&lt;h3 id="no-cli-client"&gt;No CLI Client&lt;a class="anchor" href="#no-cli-client"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Authy doesn’t have a &lt;a href="https://en.wikipedia.org/wiki/Command-line_interface"&gt;CLI&lt;/a&gt;
client. I have some ideas for personal browser automation projects that could be
easier to implement with programmatic access to my TOTP codes.&lt;/p&gt;
&lt;h3 id="mac-cpu-usage"&gt;Mac CPU Usage&lt;a class="anchor" href="#mac-cpu-usage"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I use the Mac desktop program, but when it has a code open, the program uses
significantly more CPU. Here’s the CPU usage when it’s just displaying the list
of services.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/0a7vZMW.png" alt="Authy desktop CPU usage during list view"&gt;&lt;/p&gt;
&lt;p&gt;And here’s the CPU usage when it’s showing the TOTP code.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/5kVBCbB.png" alt="Authy desktop CPU usage during code view"&gt;&lt;/p&gt;
&lt;p&gt;Since I don’t want the program to unnecessarily drain my laptop battery, I try
to remember to press the back button after copying the code.  There’s no option
to automatically go back on copy or to just copy the code from the list view
without even seeing the code.&lt;/p&gt;
&lt;h3 id="authentication-and-recovery"&gt;Authentication and Recovery&lt;a class="anchor" href="#authentication-and-recovery"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When you create an Authy account, you have to provide a phone number rather than
an email address or username. I didn’t like this to begin with since I want as
few things tied to my phone number as possible, given how often phone numbers
&lt;a href="https://www.wired.com/story/sim-swap-attack-defend-phone/"&gt;get hijacked&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Authy then
&lt;a href="https://support.authy.com/hc/en-us/articles/360016317013-Enable-or-Disable-Authy-Multi-Device"&gt;encourages&lt;/a&gt;
you to add the app to your other devices and then disable the multi-device
feature. This means that your codes will keep working on your existing devices,
but to add Authy to a new device, you need access to one of your old ones to
temporarily re-enable multi-device and to grant access to the new device. If you
don’t have access to an old device, you have to go through a 24 hour &lt;a href="https://support.authy.com/hc/en-us/articles/115012672088-Restoring-Authy-Access-on-a-New-Lost-or-Inaccessible-Phone#new_app"&gt;account
recovery
process&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, I want to be able to regain access to my 2FA codes, even if I’ve lost
access to all my devices. For example, I could be in a foreign country without
my laptop and then lose my phone. I want to have a good contingency plan for
this kind of situation.&lt;/p&gt;
&lt;p&gt;Note that Authy doesn’t support an account level password. It does support a
password for your encrypted backups, but you don’t enter that until after you
log in.&lt;/p&gt;
&lt;p&gt;Authy also doesn’t support TOTP codes or
&lt;a href="https://en.wikipedia.org/wiki/Universal_2nd_Factor"&gt;U2F&lt;/a&gt; security keys for
protecting itself. Its sole authentication mechanism (beyond account recovery
processes) is access to an old device.&lt;/p&gt;
&lt;h2 id="yubico-authenticator"&gt;Yubico Authenticator&lt;a class="anchor" href="#yubico-authenticator"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I considered using my &lt;a href="https://www.yubico.com/"&gt;YubiKeys&lt;/a&gt; to generate TOTP codes
using &lt;a href="https://www.yubico.com/products/services-software/download/yubico-authenticator/"&gt;Yubico
Authenticator&lt;/a&gt;,
but a YubiKey &lt;a href="https://www.reddit.com/r/yubikey/comments/ataxt3/only_32_oathtotp_entries/"&gt;can only store
32&lt;/a&gt;
TOTP secrets, and I already have 49 of them since I enable TOTP-based 2FA
whenever possible.&lt;/p&gt;
&lt;h2 id="bitwarden"&gt;Bitwarden&lt;a class="anchor" href="#bitwarden"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I currently use &lt;a href="https://www.lastpass.com/"&gt;LastPass&lt;/a&gt; to manage my passwords,
but I am going to switch to &lt;a href="https://1password.com/"&gt;1Password&lt;/a&gt; soon. I decided
to use Bitwarden as well but solely for TOTP codes. 1Password can also &lt;a href="https://support.1password.com/one-time-passwords/"&gt;handle
TOTP codes&lt;/a&gt;, but I am willing
to deal with the hassle of having two password managers to avoid using the same
service for both passwords and 2FA.&lt;/p&gt;
&lt;p&gt;By using a password manager for TOTP, I get broad cross-platform support with a
web client, browser extensions, desktop programs, mobile apps, and even a CLI
client. I also get standard authentication mechanisms, including 2FA support.&lt;/p&gt;
&lt;p&gt;This does mean that I am treating my TOTP codes more like secondary passwords
(&lt;a href="https://en.wikipedia.org/wiki/Multi-factor_authentication#Knowledge_factors"&gt;something I
know&lt;/a&gt;)
rather than as &lt;a href="https://en.wikipedia.org/wiki/Multi-factor_authentication#Possession_factors"&gt;something I
have&lt;/a&gt;.
Authy’s requirement to have access to an old device better fits the latter
principle. This is a deliberate choice on my part.&lt;/p&gt;
&lt;p&gt;Note that Bitwarden requires a premium account that costs $10 a year in order to
generate TOTP codes. A premium account also adds U2F support, which I wanted as
well.&lt;/p&gt;
&lt;h2 id="authentication-strategy"&gt;Authentication Strategy&lt;a class="anchor" href="#authentication-strategy"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;U2F support is the last component of my authentication strategy. Going forward,
it will be like this: I’ll store passwords in 1Password and TOTP secrets in
Bitwarden. I’ll use separate, &lt;a href="https://xkcd.com/936/"&gt;high entropy&lt;/a&gt; master
passwords that will only exist in my head.&lt;/p&gt;
&lt;p&gt;1Password requires a &lt;a href="https://support.1password.com/secret-key/"&gt;secret key&lt;/a&gt; in
conjunction with the master password in order to log in on a new device. Since I
can’t memorize it, I plan to store my secret key as a &lt;a href="https://support.yubico.com/support/solutions/articles/15000006480-understanding-core-static-password-features"&gt;static
password&lt;/a&gt;
on my YubiKeys. This means that if I touch the metal contact for a few seconds,
it will type out the secret key for me.&lt;/p&gt;
&lt;p&gt;For both services, I’ll add all my YubiKeys for 2FA. This means that all I need
is one of my YubiKeys (one of which is on my keychain) and the master passwords
in my head to regain full access to all of my accounts.&lt;/p&gt;
&lt;p&gt;However, I can’t guarantee that I’ll be able to use my YubiKey on every device.
For example, Bitwarden &lt;a href="https://help.bitwarden.com/article/setup-two-step-login-u2f/"&gt;doesn’t
support&lt;/a&gt; U2F in
its mobile apps. I would also be paranoid about feeling like I need two YubiKeys
when I travel in case I lose one.&lt;/p&gt;
&lt;p&gt;My plan to deal with these issues is to also set up TOTP-based 2FA for both
1Password and Bitwarden. I’ll print those TOTP secrets, along with the 1Password
secret key, on a small card and laminate it. I can make multiple copies to put
in my wallet and my bag. Sometimes being overly prepared is fun in itself, even
though it might be overkill.&lt;/p&gt;
&lt;h2 id="migration"&gt;Migration&lt;a class="anchor" href="#migration"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To migrate to Bitwarden, I went through my Authy list one by one. In theory, I’d
be able to just copy the TOTP secret to Bitwarden, but Authy doesn’t expose the
secret.&lt;/p&gt;
&lt;p&gt;For each account, I logged in and reset 2FA to add the secret to Bitwarden. Then
I deleted the account from Authy. Authy marks it for deletion and then waits 48
hours before actually deleting it in case you made a mistake.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/58A2QCW.png" alt="Accounts marked for deletion in Authy"&gt;&lt;/p&gt;
&lt;p&gt;I did have trouble with adding some services, such as
&lt;a href="https://www.algolia.com/"&gt;Algolia&lt;/a&gt; and &lt;a href="https://www.npmjs.com/"&gt;npm&lt;/a&gt;, that only
show the QR code and don’t have an option to display the TOTP secret. The QR
codes encode URIs that look like this, as
&lt;a href="https://github.com/google/google-authenticator/wiki/Key-Uri-Format"&gt;documented&lt;/a&gt;
in the Google Authenticator wiki:&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;otpauth://totp/Example:alice@google.com?secret=JBSWY3DPEHPK3PXP&amp;amp;issuer=Example&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I tried using my phone camera’s built-in QR scanner, but I couldn’t see the full
URI and opening it would open Authy, with no other option. I used &lt;a href="https://lens.google.com/"&gt;Google
Lens&lt;/a&gt; instead to grab the secret. In retrospect, I was
only having trouble because I was adding the services to Bitwarden through the
browser extension. I should have installed the mobile app from the beginning and
used that because it has an option to scan QR codes.&lt;/p&gt;
&lt;p&gt;I also had trouble with adding &lt;a href="https://www.twitch.tv/"&gt;Twitch&lt;/a&gt;, which has a
specific integration with Authy instead of providing a generic QR code. To get
around the issue, I followed &lt;a href="https://medium.com/@dubistkomisch/set-up-2fa-two-factor-authentication-for-twitch-with-google-authenticator-or-other-totp-client-f19af32df68a"&gt;this
guide&lt;/a&gt;.
You can use the deprecated &lt;a href="https://chrome.google.com/webstore/detail/authy/gaedmjdfmmahhbjefcbgaolhhanlaolb/related"&gt;Authy Chrome
app&lt;/a&gt;
to retrieve the TOTP secrets and configurations. This method entails using
Chrome’s developer tools to execute &lt;a href="https://gist.github.com/gboudreau/94bb0c11a6209c82418d01a59d958c93"&gt;custom
code&lt;/a&gt; to
print the information.&lt;/p&gt;
&lt;p&gt;This revealed that Twitch uses 7 digit codes instead of the standard 6 and 10
second intervals instead of the standard 30.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;otpauth://totp/Twitch?secret=XXXXXXXX&amp;amp;digits=7&amp;amp;period=10&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point, I thought I hit a Bitwarden limitation because I mistakenly
assumed that the extension would only take the TOTP secret in the authenticator
key field.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/WU3MYY5.png" alt="Bitwarden add login form"&gt;&lt;/p&gt;
&lt;p&gt;However, I discovered that Bitwarden
&lt;a href="https://community.bitwarden.com/t/support-totp-auth-parameters/37"&gt;supports&lt;/a&gt;
putting the full URI with configuration into that field. I tested it and was
able to log in to Twitch using the code generated by Bitwarden.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;a class="anchor" href="#conclusion"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Migrating to Bitwarden took me about a full day, but I’m happy with the result.
I’ve been using the Bitwarden browser extension to log in to accounts for the
past week, and it is much nicer than using the Authy desktop program. Next up is
migrating from LastPass to 1Password.&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/migrating-from-authy-to-bitwarden-for-2fa-codes</guid><pubDate>Wed, 25 Mar 2020 00:00:00 GMT</pubDate></item><item><title>Optional Chaining and Nullish Coalescing in JavaScript</title><link>https://blog.logrocket.com/optional-chaining-and-nullish-coalescing-in-javascript/</link><description>&lt;article&gt;
        &lt;h1&gt;Optional Chaining and Nullish Coalescing in JavaScript&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2020-01-03"&gt;
                January 3, 2020
            &lt;/time&gt;
             · 
            782 words  ·  ~4 minutes to read
            
        &lt;/div&gt;

        &lt;p&gt;&lt;em&gt;This post was originally written for the &lt;a href="https://blog.logrocket.com/optional-chaining-and-nullish-coalescing-in-javascript/"&gt;LogRocket
blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Optional chaining and nullish coalescing are new JavaScript operators. They have
both reached &lt;a href="https://tc39.es/process-document/"&gt;stage 3&lt;/a&gt; in the
&lt;a href="https://tc39.es/"&gt;TC39&lt;/a&gt; process, which means that their specifications are
complete.&lt;/p&gt;
&lt;p&gt;I have been looking forward to these operators for a long time. I believe they
are the most significant improvement to JavaScript ergonomics since
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"&gt;async&lt;/a&gt;/&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await"&gt;await&lt;/a&gt;.
They don’t enable anything new in terms of functionality, but they will make
quite a lot of code nicer to both write and read.&lt;/p&gt;
&lt;h2 id="optional-chaining"&gt;Optional chaining&lt;a class="anchor" href="#optional-chaining"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Working with data in JavaScript frequently involves situations where you aren’t
sure that something exists. For example, imagine getting a JSON response from a
weather API.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;"data"&lt;/span&gt;&lt;span&gt;: {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;"temperature"&lt;/span&gt;&lt;span&gt;: {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;"current"&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;68&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;"high"&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;79&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;      &lt;/span&gt;&lt;span&gt;"low"&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;45&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    },&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;"averageWindSpeed"&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can go through each level of the object to get the high temperature.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; highTemperature &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; response.data.temperature.current;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But maybe you’ll request the weather data for different days in the past, and
the service doesn’t have the high temperature for some days, or any temperature
data at all for other days. So &lt;code&gt;temperature&lt;/code&gt; or &lt;code&gt;temperature.high&lt;/code&gt; could be
&lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;"data"&lt;/span&gt;&lt;span&gt;: {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;"averageWindSpeed"&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;12&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case, trying to get the high temperature will result in an exception
that many developers are quite familiar with when working with JavaScript:
&lt;code&gt;TypeError: Cannot read property 'current' of undefined&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To avoid the exception, you have to add checks for each level of the object.
Maybe the API documentation says that when there is an error, the top-level
property will be &lt;code&gt;error&lt;/code&gt; instead of &lt;code&gt;data&lt;/code&gt;, so you can’t even be sure that
&lt;code&gt;data&lt;/code&gt; exists.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; highTemperature;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (response.data &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; response.data.temperature) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  highTemperature &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; response.data.temperature.high;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code is safer but also more verbose. Our data isn’t even that deeply
nested; a more complicated object might have many more levels to check.&lt;/p&gt;
&lt;p&gt;Optional chaining provides a terse alternative. It is JavaScript’s version of
the &lt;a href="https://en.wikipedia.org/wiki/Safe_navigation_operator"&gt;safe navigation
operator&lt;/a&gt;, which exists
in many languages, such as
&lt;a href="https://docs.swift.org/swift-book/LanguageGuide/OptionalChaining.html"&gt;Swift&lt;/a&gt;
and
&lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/member-access-operators#null-conditional-operators--and-"&gt;C#&lt;/a&gt;.
With the optional chaining operator (&lt;code&gt;?.&lt;/code&gt;), our code would look like this
instead:&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; highTemperature &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; response.data?.temperature?.high;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is still safe but almost as succinct as the original code. If either
&lt;code&gt;response.data&lt;/code&gt; or &lt;code&gt;response.data.temperature&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, the
entire expression
&lt;a href="https://en.wikipedia.org/wiki/Short-circuit_evaluation"&gt;short-circuits&lt;/a&gt; and
returns &lt;code&gt;undefined&lt;/code&gt; rather than throwing an exception.&lt;/p&gt;
&lt;p&gt;Optional chaining works the same when accessing a property through bracket
notation.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; property &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"temperature"&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; highTemperature &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; response.data?.[property]?.high;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It isn’t restricted to sub-levels. You can use it at the top level as well.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; highTemperature &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; response?.data?.temperature?.high;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Optional chaining even works with function calls.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; celsiusTemperature &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; temperature.&lt;/span&gt;&lt;span&gt;toCelsius&lt;/span&gt;&lt;span&gt;?.();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If &lt;code&gt;temperature&lt;/code&gt; doesn’t have a &lt;code&gt;toCelsius&lt;/code&gt; property, this will result in
&lt;code&gt;undefined&lt;/code&gt; instead of throwing an error. However, note that if &lt;code&gt;temperature&lt;/code&gt;
happens to have a &lt;code&gt;toCelsius&lt;/code&gt; property that just isn’t a function, this will
still cause an error: &lt;code&gt;TypeError: temperature.toCelsius is not a function&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="nullish-coalescing"&gt;Nullish coalescing&lt;a class="anchor" href="#nullish-coalescing"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In addition to accessing nested values, another common pattern in JavaScript is
to use the logical OR operator (&lt;code&gt;||&lt;/code&gt;) to coalesce values because it returns the
first &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Truthy"&gt;truthy&lt;/a&gt;
operand, not a Boolean.&lt;/p&gt;
&lt;p&gt;Let’s say you’re building a website and have added some animations to it. You
have decided to allow users to customize how long the animations take. You want
to use a default value if the user doesn’t provide one, so you do the following.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; defaultTime &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; animationTime &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; settings.animationTime &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; defaultTime;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code might work in general, but there is a subtle bug.  The Boolean
&lt;code&gt;false&lt;/code&gt;, empty strings (&lt;code&gt;""&lt;/code&gt;), &lt;code&gt;NaN&lt;/code&gt;, and the number &lt;code&gt;0&lt;/code&gt; are all falsy. In this
example, a user might not want any animations at all. But if he or she sets the
time to &lt;code&gt;0&lt;/code&gt;, this code will ignore it and erroneously use the default value of
&lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We could be more explicit.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; defaultTime &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; animationTime &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;typeof&lt;/span&gt;&lt;span&gt; settings.animationTime &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"number"&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt; settings.animationTime&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; defaultTime;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The nullish coalescing operator (&lt;code&gt;??&lt;/code&gt;) gives us a cleaner method.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; defaultTime &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; animationTime &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; settings.animationTime &lt;/span&gt;&lt;span&gt;??&lt;/span&gt;&lt;span&gt; defaultTime;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nullish coalescing acts like regular coalescing, but it only rejects values if
they are strictly &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, so this code will accept a value of &lt;code&gt;0&lt;/code&gt;
if it is provided.&lt;/p&gt;
&lt;p&gt;Like regular coalescing, nullish coalescing short-circuits once an operand is
satisfactory, so further expressions are not evaluated. This is important to
keep in mind if further expressions have side effects.&lt;/p&gt;
&lt;h2 id="ecosystem-support"&gt;Ecosystem support&lt;a class="anchor" href="#ecosystem-support"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Optional chaining and nullish coalescing make it easier to write safer code, and
the JavaScript community seems eager to adopt them. Even though they are not
part of the formal &lt;a href="https://en.wikipedia.org/wiki/ECMAScript"&gt;ECMAScript&lt;/a&gt;
specification yet, tools have already started to add support.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt; supports them as of &lt;a href="https://devblogs.microsoft.com/typescript/announcing-typescript-3-7/"&gt;version
3.7&lt;/a&gt; (Nov.
6, 2019).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://babeljs.io/"&gt;Babel&lt;/a&gt; has an &lt;a href="https://babeljs.io/docs/en/babel-plugin-proposal-optional-chaining"&gt;optional chaining
plugin&lt;/a&gt; and
a &lt;a href="https://babeljs.io/docs/en/babel-plugin-proposal-nullish-coalescing-operator"&gt;nullish coalescing
plugin&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://prettier.io/"&gt;Prettier&lt;/a&gt; supports them as of &lt;a href="https://prettier.io/blog/2019/11/09/1.19.0.html"&gt;version
1.19&lt;/a&gt; (Nov. 9, 2019).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://eslint.org/"&gt;ESLint&lt;/a&gt; doesn’t natively support &lt;a href="https://github.com/eslint/eslint#what-about-experimental-features"&gt;experimental language
features&lt;/a&gt;
until they reach stage 4, but it’s possible to use Babel as a workaround through
&lt;a href="https://github.com/babel/babel-eslint"&gt;babel-eslint&lt;/a&gt;.&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/optional-chaining-and-nullish-coalescing-in-javascript</guid><pubDate>Fri, 03 Jan 2020 00:00:00 GMT</pubDate></item><item><title>Rendering Sibling Elements in React Using Fragments</title><link>https://blog.logrocket.com/rendering-sibling-elements-react-fragments/</link><description>&lt;article&gt;
        &lt;h1&gt;Rendering Sibling Elements in React Using Fragments&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2019-12-09"&gt;
                December 9, 2019
            &lt;/time&gt;
             · 
            648 words  ·  ~4 minutes to read
            
        &lt;/div&gt;

        &lt;p&gt;&lt;em&gt;This post was originally written for the &lt;a href="https://blog.logrocket.com/rendering-sibling-elements-react-fragments/"&gt;LogRocket
blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;One of the advantages of using &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; to render a user
interface is that it’s easy to break up the UI into components. However, a
common problem that arises is when we want to return
&lt;a href="https://javascript.info/dom-navigation#siblings-and-the-parent"&gt;sibling&lt;/a&gt;
elements with no parent. React has a feature called Fragments that provides the
solution.&lt;/p&gt;
&lt;h2 id="the-problem"&gt;The Problem&lt;a class="anchor" href="#the-problem"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you aren’t familiar with the problem, consider this example.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;FAQ&lt;/span&gt;&lt;span&gt;() {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;Q. What is React?&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;A. A JavaScript library for building user interfaces&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;Q. How do I render sibling elements?&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;A. Use Fragments&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    );&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code results in an error: &lt;code&gt;Adjacent JSX elements must be wrapped in an enclosing tag.&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="the-solutions"&gt;The Solutions&lt;a class="anchor" href="#the-solutions"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One option is to wrap the elements with a parent element.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;FAQ&lt;/span&gt;&lt;span&gt;() {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            &amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;Q. What is React?&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            &amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;A. A JavaScript library for building user interfaces&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            &amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;Q. How do I render sibling elements?&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            &amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;A. Use Fragments&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    );&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But this method introduces an extraneous element into the DOM, adding an extra
level of nesting that we don’t actually need.&lt;/p&gt;
&lt;p&gt;React &lt;a href="https://github.com/facebook/react/releases/tag/v16.0.0"&gt;v16.0&lt;/a&gt; introduced
another option, which is to return an array of elements.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;FAQ&lt;/span&gt;&lt;span&gt;() {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;Q. What is React?&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;A. A JavaScript library for building user interfaces&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;Q. How do I render sibling elements?&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;A. Use Fragments&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    ];&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we need to add commas in between elements. More importantly, this code
produces a &lt;a href="https://reactjs.org/docs/lists-and-keys.html#keys"&gt;key&lt;/a&gt; warning:
&lt;code&gt;Warning: Each child in a list should have a unique "key" prop.&lt;/code&gt; Adding a key to
every element fixes the issue but is quite cumbersome.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;FAQ&lt;/span&gt;&lt;span&gt;() {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; [&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"q1"&lt;/span&gt;&lt;span&gt;&amp;gt;Q. What is React?&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"a1"&lt;/span&gt;&lt;span&gt;&amp;gt;A. A JavaScript library for building user interfaces&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"q2"&lt;/span&gt;&lt;span&gt;&amp;gt;Q. How do I render sibling elements?&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"a2"&lt;/span&gt;&lt;span&gt;&amp;gt;A. Use Fragments&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    ];&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;React &lt;a href="https://github.com/facebook/react/releases/tag/v16.2.0"&gt;v16.2&lt;/a&gt; gave us a
cleaner solution, which is to use Fragments.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;FAQ&lt;/span&gt;&lt;span&gt;() {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;&lt;/span&gt;&lt;span&gt;React.Fragment&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            &amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;Q. What is React?&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            &amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;A. A JavaScript library for building user interfaces&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            &amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;Q. How do I render sibling elements?&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            &amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;A. Use Fragments&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;/&lt;/span&gt;&lt;span&gt;React.Fragment&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    );&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We no longer need to provide keys, we don’t need to add array commas, and we
still avoid adding an extraneous DOM element because &lt;code&gt;React.Fragment&lt;/code&gt; doesn’t
become an actual element during rendering.&lt;/p&gt;
&lt;p&gt;We can import &lt;code&gt;Fragment&lt;/code&gt; to avoid having to fully write out &lt;code&gt;React.Fragment&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; React, {Fragment} &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"react"&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;FAQ&lt;/span&gt;&lt;span&gt;() {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;&lt;/span&gt;&lt;span&gt;Fragment&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            &amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;Q. What is React?&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            &amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;A. A JavaScript library for building user interfaces&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            &amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;Q. How do I render sibling elements?&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            &amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;A. Use Fragments&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;/&lt;/span&gt;&lt;span&gt;Fragment&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    );&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, an even better method is to use the shorthand syntax for Fragments,
which looks like empty tags: &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;/&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;FAQ&lt;/span&gt;&lt;span&gt;() {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            &amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;Q. What is React?&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            &amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;A. A JavaScript library for building user interfaces&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            &amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;Q. How do I render sibling elements?&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            &amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;A. Use Fragments&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    );&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This gives us the same benefits as using &lt;code&gt;React.Fragment&lt;/code&gt;, but we don’t need to
import anything else, and our code looks cleaner.&lt;/p&gt;
&lt;p&gt;The only thing that the shorthand syntax doesn’t support for now is adding a
&lt;code&gt;key&lt;/code&gt;. This could be problematic if you are creating a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl"&gt;description
list&lt;/a&gt;, for
example. In this case, use the standard syntax.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Dictionary&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;props&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;&lt;/span&gt;&lt;span&gt;dl&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;props.terms.&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(({&lt;/span&gt;&lt;span&gt;word&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;definition&lt;/span&gt;&lt;span&gt;}) &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                &amp;lt;&lt;/span&gt;&lt;span&gt;React.Fragment&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;key&lt;/span&gt;&lt;span&gt;={&lt;/span&gt;&lt;span&gt;word&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                    &amp;lt;&lt;/span&gt;&lt;span&gt;dt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;word&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dt&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                    &amp;lt;&lt;/span&gt;&lt;span&gt;dd&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;definition&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;dd&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                &amp;lt;/&lt;/span&gt;&lt;span&gt;React.Fragment&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            )&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;/&lt;/span&gt;&lt;span&gt;dl&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    );&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We need to provide a key to avoid a key warning.&lt;/p&gt;
&lt;p&gt;In most cases, however, the shorthand method is the best solution for our
original problem of returning sibling elements. This solution has worked out
well enough that &lt;a href="https://vuejs.org/"&gt;Vue.js&lt;/a&gt; will also natively support the
concept of Fragments &lt;a href="https://medium.com/the-vue-point/plans-for-the-next-iteration-of-vue-js-777ffea6fabf"&gt;when v3 is
released&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="using-fragments"&gt;Using Fragments&lt;a class="anchor" href="#using-fragments"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the last two years, the JavaScript ecosystem has added widespread support for
Fragments.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;React added support for the shorthand syntax in
&lt;a href="https://reactjs.org/blog/2017/11/28/react-v16.2.0-fragment-support.html"&gt;version 16.2.0&lt;/a&gt;
(2017-11-28)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt; added support in
&lt;a href="https://github.com/Microsoft/TypeScript/releases/tag/v2.6.2"&gt;version 2.6.2&lt;/a&gt;
(2017-11-27)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://babeljs.io/"&gt;Babel&lt;/a&gt; added support in
&lt;a href="https://babeljs.io/blog/2018/08/27/7.0.0#jsx-fragment-support"&gt;version 7&lt;/a&gt;
(2018-8-27)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://prettier.io/"&gt;Prettier&lt;/a&gt; added support in
&lt;a href="https://prettier.io/blog/2017/12/05/1.9.0.html#jsx-fragment-syntax-3237-https-githubcom-prettier-prettier-pull-3237-by-duailibe-https-githubcom-duailibe"&gt;version 1.9&lt;/a&gt;
(2017-12-05)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yannickcr/eslint-plugin-react"&gt;eslint-plugin-react&lt;/a&gt; added
a &lt;a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-fragments.md"&gt;jsx-fragments rule&lt;/a&gt;
in &lt;a href="https://github.com/yannickcr/eslint-plugin-react/releases/tag/v7.12.0"&gt;version 7.12.0&lt;/a&gt;
(2018-12-28) to enforce using the standard or shorthand syntax&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you upgrade your dependencies, you will probably be able to use Fragments
without any additional configuration.&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/rendering-sibling-elements-in-react-using-fragments</guid><pubDate>Mon, 09 Dec 2019 00:00:00 GMT</pubDate></item><item><title>The Introductory Guide to AssemblyScript</title><link>https://blog.logrocket.com/the-introductory-guide-to-assemblyscript/</link><description>&lt;article&gt;
        &lt;h1&gt;The Introductory Guide to AssemblyScript&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2019-11-22"&gt;
                November 22, 2019
            &lt;/time&gt;
             · 
            1,672 words  ·  ~9 minutes to read
            
        &lt;/div&gt;

        &lt;p&gt;&lt;em&gt;This post was originally written for the &lt;a href="https://blog.logrocket.com/the-introductory-guide-to-assemblyscript/"&gt;LogRocket
blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://webassembly.org/"&gt;WebAssembly&lt;/a&gt; (or Wasm) is a relatively recent
addition to web browsers, but it has the potential to drastically expand what
the web is capable of as a platform for serving applications.&lt;/p&gt;
&lt;p&gt;While there can be a steep learning curve for web developers to get started with
WebAssembly, &lt;a href="https://assemblyscript.org/"&gt;AssemblyScript&lt;/a&gt; provides a way to get
around that. Let’s first take a look at why WebAssembly is such a promising
technology, and then we’ll see how AssemblyScript can help to unlock its
potential.&lt;/p&gt;
&lt;h2 id="webassembly"&gt;WebAssembly&lt;a class="anchor" href="#webassembly"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;WebAssembly is a low-level language for browsers, giving developers a
compilation target for the web besides JavaScript. It makes it possible for
website code to run at near-native speed in a safe, sandboxed environment.&lt;/p&gt;
&lt;p&gt;It was developed with input from representatives of all the major browsers
(Chrome, Firefox, Safari, and Edge), who &lt;a href="https://lists.w3.org/Archives/Public/public-webassembly/2017Feb/0002.html"&gt;reached a design
consensus&lt;/a&gt;
in early 2017.  All of these browsers now support WebAssembly, which is usable
in &lt;a href="https://caniuse.com/#feat=wasm"&gt;about 87&lt;/a&gt;
&lt;a href="https://caniuse.com/#feat=wasm"&gt;percent&lt;/a&gt; of all browsers.&lt;/p&gt;
&lt;p&gt;WebAssembly is delivered in a binary format, which means that it has both size
and load time advantages over JavaScript. Yet it also has a &lt;a href="https://developer.mozilla.org/en-US/docs/WebAssembly/Understanding_the_text_format"&gt;textual
representation&lt;/a&gt;
that is human readable.&lt;/p&gt;
&lt;p&gt;When WebAssembly was first announced, some developers thought it had the
potential to eventually supplant JavaScript as the primary language of the web.
But it’s better to think of WebAssembly as a new tool that integrates well with
the existing web platform, which is one of its &lt;a href="https://webassembly.org/docs/high-level-goals/"&gt;high-level
goals&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Rather than replacing JavaScript for existing use cases, WebAssembly is
intriguing more because it enables new use cases. WebAssembly doesn’t have
direct access to the DOM yet, and most existing websites will want to stick with
JavaScript, which is already quite fast after going through years of
optimization. Here’s a sample of WebAssembly’s &lt;a href="https://webassembly.org/docs/use-cases/"&gt;own list of possible use
cases&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Games&lt;/li&gt;
&lt;li&gt;Scientific visualization and simulation&lt;/li&gt;
&lt;li&gt;CAD applications&lt;/li&gt;
&lt;li&gt;Image/video editing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The common attribute here is that these are applications that we would typically
think of as desktop applications. By providing near-native performance for
CPU-intensive tasks, WebAssembly makes it feasible to move more of these
applications to the web.&lt;/p&gt;
&lt;p&gt;Existing websites can also benefit from WebAssembly.
&lt;a href="https://www.figma.com/"&gt;Figma&lt;/a&gt; provides a real-world example, having used
WebAssembly to significantly improve their load time. If a website uses code
that does a lot of computation, it can make sense to replace only that code with
WebAssembly to improve performance.&lt;/p&gt;
&lt;p&gt;So maybe now you’re interested in getting started with WebAssembly. You could
learn the language itself and &lt;a href="https://blog.scottlogic.com/2018/04/26/webassembly-by-hand.html"&gt;write it
directly&lt;/a&gt;, but
it was really intended to be a &lt;a href="https://github.com/appcypher/awesome-wasm-langs"&gt;compilation target for other
languages&lt;/a&gt;. It &lt;a href="https://webassembly.org/docs/c-and-c++/"&gt;was
designed&lt;/a&gt; to have good support for C
and C++, Go &lt;a href="https://golang.org/doc/go1.11#wasm"&gt;added experimental support&lt;/a&gt; for
it in version 1.11, and Rust is also &lt;a href="https://www.rust-lang.org/what/wasm"&gt;investing
heavily&lt;/a&gt; in it.&lt;/p&gt;
&lt;p&gt;But maybe you don’t want to learn or use one of these languages in order to use
WebAssembly. This is where AssemblyScript comes into play.&lt;/p&gt;
&lt;h2 id="assemblyscript"&gt;AssemblyScript&lt;a class="anchor" href="#assemblyscript"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;AssemblyScript is a TypeScript to WebAssembly compiler. Developed by Microsoft,
TypeScript adds types to JavaScript. It has become &lt;a href="https://insights.stackoverflow.com/survey/2019#most-popular-technologies"&gt;quite
popular&lt;/a&gt;,
and even for people who are not familiar with it, AssemblyScript only allows for
a limited subset of TypeScript features anyway, so it shouldn’t take long to get
up to speed.&lt;/p&gt;
&lt;p&gt;Because it’s so similar to JavaScript, AssemblyScript lets web developers easily
incorporate WebAssembly into their websites without having to work with an
entirely different language.&lt;/p&gt;
&lt;h2 id="trying-it-out"&gt;Trying It Out&lt;a class="anchor" href="#trying-it-out"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let’s write our first AssemblyScript module (all of the following code is
available in &lt;a href="https://github.com/dguo/assemblyscript-demo"&gt;this GitHub
repository&lt;/a&gt;). We need
&lt;a href="https://nodejs.org/"&gt;Node.js&lt;/a&gt; with a minimum version of 8 for &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly#Browser_compatibility"&gt;WebAssembly
support&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Change to an empty directory, create a &lt;code&gt;package.json&lt;/code&gt; file, and install
AssemblyScript. Note that we need to install it directly from &lt;a href="https://github.com/AssemblyScript/assemblyscript"&gt;its GitHub
repository&lt;/a&gt;. It isn’t
published on &lt;a href="https://www.npmjs.com/"&gt;npm&lt;/a&gt; because the AssemblyScript developers
&lt;a href="https://github.com/AssemblyScript/assemblyscript/issues/442#issuecomment-458523778"&gt;don’t consider the compiler to be ready for general use
yet&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;mkdir&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;assemblyscript-demo&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;cd&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;assemblyscript-demo&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;npm&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;init&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;npm&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;install&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;--save-dev&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;github:AssemblyScript/assemblyscript&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Generate scaffolding files using the included &lt;code&gt;asinit&lt;/code&gt; command.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;npx&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;asinit&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our &lt;code&gt;package.json&lt;/code&gt; should now include these scripts.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;"scripts"&lt;/span&gt;&lt;span&gt;: {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;"asbuild:untouched"&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;"asc assembly/index.ts -b build/untouched.wasm -t build/untouched.wat --sourceMap --validate --debug"&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;"asbuild:optimized"&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;"asc assembly/index.ts -b build/optimized.wasm -t build/optimized.wat --sourceMap --validate --optimize"&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;"asbuild"&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;"npm run asbuild:untouched &amp;amp;&amp;amp; npm run asbuild:optimized"&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The top-level &lt;code&gt;index.js&lt;/code&gt; looks like this.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; fs &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;require&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"fs"&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; compiled &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; WebAssembly.&lt;/span&gt;&lt;span&gt;Module&lt;/span&gt;&lt;span&gt;(fs.&lt;/span&gt;&lt;span&gt;readFileSync&lt;/span&gt;&lt;span&gt;(__dirname &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"/build/optimized.wasm"&lt;/span&gt;&lt;span&gt;));&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; imports &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  env: {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;abort&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;_msg&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;_file&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;line&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;       console.&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"abort called at index.ts:"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; line &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;":"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; column);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;Object.&lt;/span&gt;&lt;span&gt;defineProperty&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;"exports"&lt;/span&gt;&lt;span&gt;, {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;: () &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; WebAssembly.&lt;/span&gt;&lt;span&gt;Instance&lt;/span&gt;&lt;span&gt;(compiled, imports).exports&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;});&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It allows us to easily
&lt;a href="https://nodejs.org/api/modules.html#modules_require_id"&gt;require&lt;/a&gt; our
WebAssembly module just like a plain JavaScript module.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;assembly&lt;/code&gt; directory contains our AssemblyScript source code. The generated
example is a simple addition function.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;export&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;i32&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;b&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;i32&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;i32&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; a &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; b;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you expect the function signature to look like &lt;code&gt;add(a: number, b: number): number&lt;/code&gt;, as it would in TypeScript, the reason it uses &lt;code&gt;i32&lt;/code&gt; instead is that
AssemblyScript uses WebAssembly’s &lt;a href="https://docs.assemblyscript.org/basics/types"&gt;specific integer and floating point
types&lt;/a&gt; rather than TypeScript’s
&lt;a href="https://www.typescriptlang.org/docs/handbook/basic-types.html#number"&gt;generic&lt;/a&gt;
&lt;code&gt;[number](https://www.typescriptlang.org/docs/handbook/basic-types.html#number)&lt;/code&gt;
&lt;a href="https://www.typescriptlang.org/docs/handbook/basic-types.html#number"&gt;type.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let’s build the example.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;npm&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;run&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;asbuild&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;build&lt;/code&gt; directory should now include the following files.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;optimized.wasm&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;optimized.wasm.map&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;optimized.wat&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;untouched.wasm&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;untouched.wasm.map&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;untouched.wat&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We get plain and optimized versions of the build. For each build version, we get
a &lt;code&gt;.wasm&lt;/code&gt; binary, a &lt;code&gt;.wasm.map&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Tools/Debugger/How_to/Use_a_source_map"&gt;source
map&lt;/a&gt;,
and a &lt;code&gt;.wat&lt;/code&gt; textual representation of the binary. The textual representation is
designed to be readable by humans, but for our purposes, we don’t need to read
or understand it. Part of the point of using AssemblyScript is that we don’t
need to work with raw WebAssembly.&lt;/p&gt;
&lt;p&gt;Fire up Node, and use our compiled module just like any other module.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;node&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;Welcome&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;to&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Node.js&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;v12.10.0.&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;Type&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;".help"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;more&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;information.&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; const add = require(&lt;/span&gt;&lt;span&gt;'./index'&lt;/span&gt;&lt;span&gt;).add;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;undefined&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt; add(&lt;/span&gt;&lt;span&gt;3,&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;8&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that’s all it took to call WebAssembly from Node!&lt;/p&gt;
&lt;h2 id="add-a-watch-script"&gt;Add a Watch Script&lt;a class="anchor" href="#add-a-watch-script"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For development, I recommend using &lt;a href="https://github.com/Qard/onchange"&gt;onchange&lt;/a&gt;
to automatically rebuild the module whenever you change the source code because
AssemblyScript &lt;a href="https://github.com/AssemblyScript/assemblyscript/issues/624"&gt;doesn’t include a watch
mode&lt;/a&gt; yet.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;npm&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;install&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;--save-dev&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;onchange&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add an &lt;code&gt;asbuild:watch&lt;/code&gt; script to &lt;code&gt;package.json&lt;/code&gt;. Include the &lt;code&gt;-i&lt;/code&gt;
&lt;a href="https://github.com/Qard/onchange#initial--i---initial"&gt;flag&lt;/a&gt; to run an initial
build as soon as you run the command.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;"scripts"&lt;/span&gt;&lt;span&gt;: {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;"asbuild:untouched"&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;"asc assembly/index.ts -b build/untouched.wasm -t build/untouched.wat --sourceMap --validate --debug"&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;"asbuild:optimized"&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;"asc assembly/index.ts -b build/optimized.wasm -t build/optimized.wat --sourceMap --validate --optimize"&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;"asbuild"&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;"npm run asbuild:untouched &amp;amp;&amp;amp; npm run asbuild:optimized"&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;"asbuild:watch"&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;"onchange -i 'assembly/**/*' -- npm run asbuild"&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can run &lt;code&gt;asbuild:watch&lt;/code&gt; instead of having to constantly re-run
&lt;code&gt;asbuild&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="performance"&gt;Performance&lt;a class="anchor" href="#performance"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let’s write a basic benchmark test to get an idea of what kind of performance
boost we can get. WebAssembly’s specialty is handling CPU-intensive tasks like
numerical calculations, so let’s go with a function for determining if an
integer is a prime number or not. Our reference implementation looks like this.
It’s a naive, brute force solution because our goal is to perform a high number
of calculations.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;isPrime&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (x &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; i &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;; i &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt; x; i&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (x &lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt; i &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The equivalent AssemblyScript version just needs some type annotations.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;isPrime&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;u32&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;bool&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (x &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; i&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;u32&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;; i &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt; x; i&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (x &lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt; i &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’ll use &lt;a href="https://benchmarkjs.com/"&gt;Benchmark.js&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;npm&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;install&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;--save-dev&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;benchmark&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create &lt;code&gt;benchmark.js&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; Benchmark &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;require&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'benchmark'&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; assemblyScriptIsPrime &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;require&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'./index'&lt;/span&gt;&lt;span&gt;).isPrime;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;isPrime&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; i &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;; i &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt; x; i&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (x &lt;/span&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt; i &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; suite &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Benchmark.Suite;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; startNumber &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; stopNumber &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;10000&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;suite.&lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'AssemblyScript isPrime'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; i &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; startNumber; i &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt; stopNumber; i&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;assemblyScriptIsPrime&lt;/span&gt;&lt;span&gt;(i);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}).&lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'JavaScript isPrime'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; i &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; startNumber; i &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt; stopNumber; i&lt;/span&gt;&lt;span&gt;++&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;isPrime&lt;/span&gt;&lt;span&gt;(i);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}).&lt;/span&gt;&lt;span&gt;on&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'cycle'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;event&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    console.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;String&lt;/span&gt;&lt;span&gt;(event.target));&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}).&lt;/span&gt;&lt;span&gt;on&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'complete'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; fastest &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'fastest'&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; slowest &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;filter&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'slowest'&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; difference &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; (fastest.&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'hz'&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt; slowest.&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'hz'&lt;/span&gt;&lt;span&gt;)) &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt; slowest.&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'hz'&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    console.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;${&lt;/span&gt;&lt;span&gt;fastest.&lt;/span&gt;&lt;span&gt;map&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'name'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt; is ~&lt;/span&gt;&lt;span&gt;${&lt;/span&gt;&lt;span&gt;difference.&lt;/span&gt;&lt;span&gt;toFixed&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;% faster.`&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}).&lt;/span&gt;&lt;span&gt;run&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On my machine, I got these results when I ran &lt;code&gt;node benchmark&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;AssemblyScript&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;isPrime&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;74.00&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;ops/sec&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;±0.43%&lt;/span&gt;&lt;span&gt; (76 &lt;/span&gt;&lt;span&gt;runs&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;sampled&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;JavaScript&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;isPrime&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;61.56&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;ops/sec&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;±0.30%&lt;/span&gt;&lt;span&gt; (64 &lt;/span&gt;&lt;span&gt;runs&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;sampled&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;AssemblyScript&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;isPrime&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;is&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;~20.2%&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;faster.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that this test is a
&lt;a href="https://stackoverflow.com/a/2842707/1481479"&gt;microbenchmark&lt;/a&gt;, and we should be
careful about reading too much into it.&lt;/p&gt;
&lt;p&gt;For some more involved AssemblyScript benchmarks, I recommend checking out &lt;a href="https://wasmboy.app/benchmark/"&gt;this
WasmBoy benchmark&lt;/a&gt; and &lt;a href="https://jtiscione.github.io/webassembly-wave/index.html"&gt;this wave equation
benchmark&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="loading-the-module"&gt;Loading the Module&lt;a class="anchor" href="#loading-the-module"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Next, let’s use our module in a website. Create &lt;code&gt;index.html&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;&lt;/span&gt;&lt;span&gt;meta&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"utf-8"&lt;/span&gt;&lt;span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;AssemblyScript isPrime demo&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"prime-checker"&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            &amp;lt;&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"number"&lt;/span&gt;&lt;span&gt;&amp;gt;Enter a number to check if it is prime:&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            &amp;lt;&lt;/span&gt;&lt;span&gt;input&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"number"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"number"&lt;/span&gt;&lt;span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            &amp;lt;&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"submit"&lt;/span&gt;&lt;span&gt;&amp;gt;Submit&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"result"&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;src&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"demo.js"&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create &lt;code&gt;demo.js&lt;/code&gt;. There are &lt;a href="https://developers.google.com/web/updates/2018/04/loading-wasm"&gt;multiple
ways&lt;/a&gt; to load
WebAssembly modules, but the most efficient is to compile and instantiate them
in a streaming manner with the
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiateStreaming"&gt;WebAssembly.instantiateStreaming&lt;/a&gt;
function. Note that we need to &lt;a href="https://docs.assemblyscript.org/details/debugging#overriding-abort"&gt;provide an abort
function&lt;/a&gt;,
which is called if an
&lt;a href="https://docs.assemblyscript.org/basics/environment#utility"&gt;assertion&lt;/a&gt; fails.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;async&lt;/span&gt;&lt;span&gt; () &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; importObject &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        env: {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;abort&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;_msg&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;_file&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;line&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                console.&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"abort called at index.ts:"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; line &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;":"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; column);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    };&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; module &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; WebAssembly.&lt;/span&gt;&lt;span&gt;instantiateStreaming&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;fetch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"build/optimized.wasm"&lt;/span&gt;&lt;span&gt;),&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        importObject&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    );&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; isPrime &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;module&lt;/span&gt;&lt;span&gt;.instance.exports.isPrime;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; result &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.&lt;/span&gt;&lt;span&gt;querySelector&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"#result"&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    document.&lt;/span&gt;&lt;span&gt;querySelector&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"#prime-checker"&lt;/span&gt;&lt;span&gt;).&lt;/span&gt;&lt;span&gt;addEventListener&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"submit"&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;event&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        event.&lt;/span&gt;&lt;span&gt;preventDefault&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        result.innerText &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;""&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; number &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; event.target.elements.number.value;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        result.innerText &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;`&lt;/span&gt;&lt;span&gt;${&lt;/span&gt;&lt;span&gt;number&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt; is &lt;/span&gt;&lt;span&gt;${&lt;/span&gt;&lt;span&gt;isPrime&lt;/span&gt;&lt;span&gt;(number) &lt;/span&gt;&lt;span&gt;?&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;''&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;'not '&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;prime.`&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    });&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;})();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now install &lt;a href="https://github.com/nbluis/static-server"&gt;static-server&lt;/a&gt;. We need a
server because in order to use &lt;code&gt;WebAssembly.instantiateStreaming&lt;/code&gt;, the module
needs to be served with a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types"&gt;MIME
type&lt;/a&gt;
of &lt;code&gt;application/wasm&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;npm&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;install&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;--save-dev&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;static-server&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add a script to &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;"scripts"&lt;/span&gt;&lt;span&gt;: {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;"serve-demo"&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;"static-server"&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;  }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run &lt;code&gt;npm run serve-demo&lt;/code&gt; and open the localhost URL in a browser. Submit a
number in the form, and you should get a message indicating whether the number
is prime or not. Now we’ve gone all the way from writing AssemblyScript to
actually using it in a website.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;a class="anchor" href="#conclusion"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;WebAssembly, and by extension AssemblyScript, is not going to magically make
every website faster, but that was never the point. WebAssembly is exciting
because it can make the web viable for a much larger set of applications.&lt;/p&gt;
&lt;p&gt;Similarly, AssemblyScript makes WebAssembly accessible for more developers,
making it easy for us to stick with JavaScript by default but bring in
WebAssembly when we have work that requires lots of number crunching.&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/the-introductory-guide-to-assemblyscript</guid><pubDate>Fri, 22 Nov 2019 00:00:00 GMT</pubDate></item><item><title>The History and Legacy of jQuery</title><link>https://blog.logrocket.com/the-history-and-legacy-of-jquery/</link><description>&lt;article&gt;
        &lt;h1&gt;The History and Legacy of jQuery&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2019-09-13"&gt;
                September 13, 2019
            &lt;/time&gt;
             · 
            1,805 words  ·  ~10 minutes to read
            
        &lt;/div&gt;

        &lt;p&gt;&lt;em&gt;This post was originally written for the &lt;a href="https://blog.logrocket.com/the-history-and-legacy-of-jquery/"&gt;LogRocket
blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://jquery.com/"&gt;jQuery&lt;/a&gt; is the &lt;a href="https://trends.builtwith.com/javascript/jQuery"&gt;most widely
used&lt;/a&gt; JavaScript library in the
world. The web development community embraced it in the late 2000s, creating a
rich ecosystem of websites, plugins, and frameworks that use jQuery under the
hood.&lt;/p&gt;
&lt;p&gt;But in the past several years, jQuery’s status as the number one tool for web
development has diminished. Let’s take a look at why jQuery became popular, why
it has somewhat fallen out of favor, and when it would still be a good choice
for a modern website.&lt;/p&gt;
&lt;h2 id="a-brief-history-of-jquery"&gt;A brief history of jQuery&lt;a class="anchor" href="#a-brief-history-of-jquery"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://johnresig.com/"&gt;John Resig&lt;/a&gt; developed the initial version of jQuery in
2005 and &lt;a href="https://johnresig.com/blog/barcampnyc-wrap-up/"&gt;released it&lt;/a&gt; in 2006
at an event called BarCampNYC. On the &lt;a href="https://web.archive.org/web/20060203025710/http://jquery.com/"&gt;original jQuery
website&lt;/a&gt;, he
wrote:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;jQuery is a Javascript [sic] library that takes this motto to heart: &lt;strong&gt;Writing
Javascript code should be fun.&lt;/strong&gt; jQuery acheives [sic] this goal by taking
common, repetitive tasks, stripping out all the unnecessary markup, and
leaving them short, smart and understandable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;jQuery had two main value propositions. The first was to provide an ergonomic
API for manipulating a web page. In particular, it provided powerful methods for
selecting elements. Beyond selecting elements just based on their ids or
classes, jQuery allowed for complex expressions, like selecting elements based
on their relationship with other elements:&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;// Select every item within the list of people within the contacts element&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'#contacts ul.people li'&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The selection engine was eventually extracted into its own library, called
&lt;a href="https://sizzlejs.com/"&gt;Sizzle&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The second selling point was that it abstracted away differences between
browsers. Back then, it was hard to write code that would work robustly on all
browsers.&lt;/p&gt;
&lt;p&gt;A lack of standardization meant that developers had to account for many
different browser behaviors and edge cases. Just take a look at &lt;a href="https://github.com/daniellmb/jquery-archive/blob/master/jquery.2006-07-01.js"&gt;this early
jQuery source
code&lt;/a&gt;,
and search for &lt;code&gt;jQuery.browser&lt;/code&gt; to see some examples. Here’s one:&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;// If Mozilla is used&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; ( jQuery.browser &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"mozilla"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;span&gt; jQuery.browser &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"opera"&lt;/span&gt;&lt;span&gt; ) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;// Use the handy event callback&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        jQuery.event.&lt;/span&gt;&lt;span&gt;add&lt;/span&gt;&lt;span&gt;( document, &lt;/span&gt;&lt;span&gt;"DOMContentLoaded"&lt;/span&gt;&lt;span&gt;, jQuery.ready );&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;// If IE is used, use the excellent hack by Matthias Miller&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;// http://www.outofhanwell.com/blog/index.php?title=the_window_onload_problem_revisited&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;} &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; ( jQuery.browser &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"msie"&lt;/span&gt;&lt;span&gt; ) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;// Only works if you document.write() it&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        document.&lt;/span&gt;&lt;span&gt;write&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"&amp;lt;scr"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"ipt id=__ie_init defer=true "&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;"src=javascript:void(0)&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;\/&lt;/span&gt;&lt;span&gt;script&amp;gt;"&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;// Use the defer script hack&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; script &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.&lt;/span&gt;&lt;span&gt;getElementById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"__ie_init"&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        script.&lt;/span&gt;&lt;span&gt;onreadystatechange&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; ( &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.readyState &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"complete"&lt;/span&gt;&lt;span&gt; )&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                        jQuery.&lt;/span&gt;&lt;span&gt;ready&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        };&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;// Clear from memory&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        script &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;// If Safari  is used&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;} &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; ( jQuery.browser &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"safari"&lt;/span&gt;&lt;span&gt; ) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;// Continually check to see if the document.readyState is valid&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        jQuery.safariTimer &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;setInterval&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;// loaded and complete are both valid states&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; ( document.readyState &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"loaded"&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;||&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                        document.readyState &lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;"complete"&lt;/span&gt;&lt;span&gt; ) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                        &lt;/span&gt;&lt;span&gt;// If either one are found, remove the timer&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                        &lt;/span&gt;&lt;span&gt;clearInterval&lt;/span&gt;&lt;span&gt;( jQuery.safariTimer );&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                        jQuery.safariTimer &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                        &lt;/span&gt;&lt;span&gt;// and execute any waiting functions&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                        jQuery.&lt;/span&gt;&lt;span&gt;ready&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        }, &lt;/span&gt;&lt;span&gt;10&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By using jQuery, developers could leave it up to the jQuery team to deal with
these pitfalls.&lt;/p&gt;
&lt;p&gt;Later on, jQuery made it easy to adopt more sophisticated techniques, like
animations and &lt;a href="https://en.wikipedia.org/wiki/Ajax_(programming)"&gt;Ajax&lt;/a&gt;. jQuery
virtually became a standard dependency for websites. It continues to power an
enormous part of the internet today. W3Techs
&lt;a href="https://w3techs.com/technologies/details/js-jquery/all/all"&gt;estimates&lt;/a&gt; that
about 74 percent of all websites use jQuery.&lt;/p&gt;
&lt;p&gt;The stewardship of jQuery also became more formal. In
&lt;a href="https://blog.jquery.com/2011/11/18/getting-board-of-jquery/"&gt;2011&lt;/a&gt;, the jQuery
team formally created the jQuery Board. In
&lt;a href="https://blog.jquery.com/2012/03/06/announcing-the-jquery-foundation/"&gt;2012&lt;/a&gt;,
the jQuery Board formed the jQuery Foundation.&lt;/p&gt;
&lt;p&gt;In
&lt;a href="https://blog.jquery.com/2015/09/01/jquery-foundation-and-dojo-foundation-to-merge/"&gt;2015&lt;/a&gt;,
the jQuery Foundation merged with the Dojo Foundation to form the JS Foundation,
which then merged with the Node.js Foundation in
&lt;a href="https://medium.com/@nodejs/introducing-the-openjs-foundation-the-next-phase-of-javascript-ecosystem-growth-d4911b42664f"&gt;2019&lt;/a&gt;
to form the &lt;a href="https://openjsf.org/"&gt;OpenJS Foundation&lt;/a&gt;, with jQuery as one of its
“&lt;a href="https://openjsf.org/projects/#impact"&gt;impact projects&lt;/a&gt;.”&lt;/p&gt;
&lt;h2 id="changing-circumstances"&gt;Changing circumstances&lt;a class="anchor" href="#changing-circumstances"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;However, jQuery has &lt;a href="https://trends.google.com/trends/explore/TIMESERIES/1564319400?hl=en-US&amp;amp;tz=240&amp;amp;date=all&amp;amp;geo=US&amp;amp;q=jquery&amp;amp;sni=3"&gt;declined in
popularity&lt;/a&gt;
in recent years. GitHub &lt;a href="https://github.blog/2018-09-06-removing-jquery-from-github-frontend/"&gt;removed jQuery from their website’s front
end&lt;/a&gt;, and
Bootstrap v5 will &lt;a href="https://github.com/twbs/bootstrap/pull/23586"&gt;drop jQuery&lt;/a&gt;
because it is Bootstrap’s “&lt;a href="https://blog.getbootstrap.com/2019/02/11/bootstrap-4-3-0/"&gt;largest client-side dependency for regular
JavaScript&lt;/a&gt;” (it’s
currently 30KB, minified and gzipped). Several trends in web development have
weakened jQuery’s standing as a must-use tool.&lt;/p&gt;
&lt;h3 id="browsers"&gt;Browsers&lt;a class="anchor" href="#browsers"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Browser differences and limitations have become less important for several
reasons. The first is that standardization has improved. The major browser
vendors (Apple, Google, Microsoft, and Mozilla) collaborate on &lt;a href="https://spec.whatwg.org/"&gt;web
standards&lt;/a&gt; through the &lt;a href="https://whatwg.org/"&gt;Web Hypertext Application
Technology Working Group&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While browsers still differ in significant ways, the vendors at least have a
method to find and develop common ground rather than waging non-stop &lt;a href="https://thehistoryoftheweb.com/browser-wars/"&gt;war with
each other&lt;/a&gt;. Accordingly, browser
APIs have become more capable. For example, the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"&gt;Fetch
API&lt;/a&gt; can replace
jQuery’s Ajax functions:&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;// jQuery&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;$.&lt;/span&gt;&lt;span&gt;getJSON&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'https://api.com/songs.json'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    .&lt;/span&gt;&lt;span&gt;done&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;songs&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        console.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(songs);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    })&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;// native&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;fetch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'https://api.com/songs.json'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    .&lt;/span&gt;&lt;span&gt;then&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;response&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; response.&lt;/span&gt;&lt;span&gt;json&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    })&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    .&lt;/span&gt;&lt;span&gt;then&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;songs&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        console.&lt;/span&gt;&lt;span&gt;log&lt;/span&gt;&lt;span&gt;(songs);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    });&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector"&gt;querySelector&lt;/a&gt;
and
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll"&gt;querySelectorAll&lt;/a&gt;
methods replicate jQuery’s selection capabilities:&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;// jQuery&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; fooDivs &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'.foo div'&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;// native&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; fooDivs &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.&lt;/span&gt;&lt;span&gt;querySelectorAll&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'.foo div'&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Manipulating element classes can be done with
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/classList"&gt;classList&lt;/a&gt;
now:&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;// jQuery&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'#warning'&lt;/span&gt;&lt;span&gt;).&lt;/span&gt;&lt;span&gt;toggleClass&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'visible'&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;// native&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;document.&lt;/span&gt;&lt;span&gt;querySelector&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'#warning'&lt;/span&gt;&lt;span&gt;).classList.&lt;/span&gt;&lt;span&gt;toggle&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'visible'&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;a href="http://youmightnotneedjquery.com/"&gt;You Might Not Need jQuery&lt;/a&gt; website lists
several more cases where jQuery code can be replaced with native code. Some
developers always reach for jQuery because they just aren’t aware that these
APIs are available, but as developers learn about them, they become less reliant
on jQuery.&lt;/p&gt;
&lt;p&gt;Using native capabilities can also improve the performance of a web page. Many
&lt;a href="https://api.jquery.com/category/effects/"&gt;jQuery animation effects&lt;/a&gt; can now be
implemented &lt;a href="https://dev.opera.com/articles/css3-vs-jquery-animations/"&gt;much more
efficiently&lt;/a&gt; with
CSS.&lt;/p&gt;
&lt;p&gt;The second reason is that browsers are updated more quickly than in the past.
Most browsers now have an
&lt;a href="https://www.techopedia.com/definition/31094/evergreen-browser"&gt;evergreen&lt;/a&gt;
update strategy, with Apple’s Safari being the main exception. They can update
themselves silently without user intervention and aren’t tied to operating
system updates.&lt;/p&gt;
&lt;p&gt;This means that new browser functionalities and bug fixes get adopted by users
more quickly, and developers don’t have to wait as long for &lt;a href="https://caniuse.com/"&gt;Can I
Use&lt;/a&gt; usage percentages to reach acceptable levels. They
can confidently use features and APIs without loading jQuery or
&lt;a href="https://en.wikipedia.org/wiki/Polyfill_(programming)"&gt;polyfills&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The third reason is that Internet Explorer is getting closer to being fully
irrelevant. IE has long been the bane of web developers everywhere. IE-specific
bugs were notoriously common, and because IE was the dominant browser of the
2000s and lacked evergreen updates, older versions stubbornly hung around.&lt;/p&gt;
&lt;p&gt;Microsoft sped up IE’s deprecation, &lt;a href="https://www.microsoft.com/en-us/microsoft-365/windows/end-of-ie-support"&gt;ending
support&lt;/a&gt;
for IE 10 and below in 2016, leaving IE 11 as the last supported version. It is
becoming more common for web developers to have the luxury of ignoring IE
compatibility.&lt;/p&gt;
&lt;p&gt;Even jQuery dropped support for IE 8 and below with the release of &lt;a href="https://blog.jquery.com/2013/04/18/jquery-2-0-released/"&gt;version
2.0&lt;/a&gt; in 2013. While
some special circumstances like legacy websites still require IE, these
situations are becoming rarer.&lt;/p&gt;
&lt;h3 id="new-frameworks"&gt;New frameworks&lt;a class="anchor" href="#new-frameworks"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A plethora of web frameworks have emerged since jQuery’s release, with some of
the current front-runners being &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;,
&lt;a href="https://angular.io/"&gt;Angular&lt;/a&gt;, and &lt;a href="https://vuejs.org/"&gt;Vue&lt;/a&gt;. These frameworks
have two significant advantages over jQuery.&lt;/p&gt;
&lt;p&gt;The first is that they make it easy to break up a UI into components. They are
designed to handle rendering a page as well as updating it. jQuery is typically
only used for updating a page, relying on the server to provide the initial
page.&lt;/p&gt;
&lt;p&gt;React, Angular, and Vue components, on the other hand, allow for a tight
coupling between HTML, code, and even CSS. In the same way that we might break a
codebase down into multiple, self-contained functions and classes, breaking a UI
down into reusable components makes it easier to build and maintain a complex
website.&lt;/p&gt;
&lt;p&gt;The second advantage is that the newer frameworks encourage the declarative
paradigm, in which the developer describes what the UI should be like and leaves
it up to the framework to make the changes necessary to get there. This approach
is in contrast to the imperative approach that is characterized by jQuery code.&lt;/p&gt;
&lt;p&gt;With jQuery, you explicitly write the steps to make any changes. With a
declarative framework, you say “based on this data, this is what the UI should
be like.” This can significantly reduce the amount of mental bookkeeping that
you have to do to write bug-free code.&lt;/p&gt;
&lt;p&gt;Developers have embraced these new approaches to building websites, reducing
jQuery’s relevance.&lt;/p&gt;
&lt;h2 id="when-to-use-jquery"&gt;When to use jQuery&lt;a class="anchor" href="#when-to-use-jquery"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So when &lt;em&gt;should&lt;/em&gt; we choose to use jQuery?&lt;/p&gt;
&lt;p&gt;If the project in question is expected to grow in complexity, it’s best to start
with a different library or framework that will allow you to sanely deal with
that complexity, such as by breaking the UI into components. Using jQuery for
such a website can be fine at first, but it can quickly evolve into spaghetti
code, where you aren’t sure what code affects what parts of the page.&lt;/p&gt;
&lt;p&gt;I’ve dealt with this before, and the situation produces a feeling of uneasiness
whenever you want to make a change. It’s hard to be sure that you aren’t
breaking anything because jQuery selectors depend on HTML structure that is
produced by the server.&lt;/p&gt;
&lt;p&gt;On the other end of the spectrum, you have simple websites that only need a
small amount of interactivity or dynamic content. For these cases, I would still
default to not using jQuery because we can do much more now with native APIs.&lt;/p&gt;
&lt;p&gt;Even if I did need something more powerful, I would look for a specific library
for the use case, such as &lt;a href="https://github.com/axios/axios"&gt;axios&lt;/a&gt; for Ajax or
&lt;a href="https://daneden.github.io/animate.css/"&gt;Animate.css&lt;/a&gt; for animations. Using
libraries like these is generally more lightweight than loading the entirety of
jQuery just for a bit of its functionality.&lt;/p&gt;
&lt;p&gt;I think the best justification for using jQuery is that it provides
comprehensive functionality for powering the front end of a website. Instead of
having to learn all the various native APIs or special-purpose libraries, you
can read just the jQuery documentation and immediately be productive.&lt;/p&gt;
&lt;p&gt;Its imperative approach doesn’t scale well, but it’s also more straightforward
to learn than the declarative approach of other libraries. For a website with a
clearly limited scope, it’s reasonable to drop in jQuery and move on; it doesn’t
need any sort of sophisticated build or compilation process.&lt;/p&gt;
&lt;p&gt;jQuery, then, is a good choice when you are reasonably confident the website
won’t become much more complicated, and you don’t want to bother with native
functionality, which can certainly be more verbose than the equivalent jQuery
code.&lt;/p&gt;
&lt;p&gt;Another use case is when you must support old versions of IE. In that case,
jQuery serves as well as it did when IE was the dominant browser.&lt;/p&gt;
&lt;h2 id="looking-forward"&gt;Looking forward&lt;a class="anchor" href="#looking-forward"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;jQuery isn’t going away anytime soon. It’s under &lt;a href="https://github.com/jquery/jquery"&gt;active
development&lt;/a&gt; and plenty of developers prefer
using its API even when native methods are available.&lt;/p&gt;
&lt;p&gt;It has helped a generation of developers make websites that work on every
browser. While it has been supplanted in many respects by new libraries,
frameworks, and paradigms, jQuery played a huge, positive role in making the web
what it is today.&lt;/p&gt;
&lt;p&gt;Barring a significant change in jQuery functionality, it seems likely that
jQuery will start to experience a slow but steady decline in usage in the next
several years.  New websites tend to be built from the beginning with more
modern frameworks, and the good use cases for jQuery are becoming rarer.&lt;/p&gt;
&lt;p&gt;Some people are unhappy with the rate of churn in web development tooling, but
to me, that is a sign of rapid progress. jQuery gave us better ways to do
things. Its successors have done the same.&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/the-history-and-legacy-of-jquery</guid><pubDate>Fri, 13 Sep 2019 00:00:00 GMT</pubDate></item><item><title>Automating TurboTax Data Entry With Puppeteer</title><link>https://www.dannyguo.com/blog/automating-turbotax-data-entry-with-puppeteer</link><description>&lt;article&gt;
        &lt;h1&gt;Automating TurboTax Data Entry With Puppeteer&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2019-05-12"&gt;
                May 12, 2019
            &lt;/time&gt;
             · 
            1,581 words  ·  ~8 minutes to read
            
        &lt;/div&gt;

        &lt;p&gt;I use &lt;a href="https://www.betterment.com/"&gt;Betterment&lt;/a&gt; for some of my investments. For
my 2018 tax return, I wanted to use the &lt;a href="https://turbotax.intuit.com/personal-taxes/online/free-edition.jsp"&gt;free
edition&lt;/a&gt; of
&lt;a href="https://www.intuit.com/"&gt;Intuit&lt;/a&gt;’s &lt;a href="https://turbotax.intuit.com/"&gt;TurboTax
Online&lt;/a&gt;. For non-retirement account investments,
each transaction must be documented in the tax return with &lt;a href="https://www.irs.gov/forms-pubs/about-form-8949"&gt;Form
8949&lt;/a&gt;. I had hundreds of
transactions for my account in 2018, and I didn’t want to enter them manually.&lt;/p&gt;
&lt;p&gt;Betterment has a &lt;a href="https://www.betterment.com/help/tax-importing-turbotax"&gt;TurboTax
integration&lt;/a&gt; to do
this work automatically, but TurboTax &lt;a href="https://turbotax.intuit.com/personal-taxes/compare/online/"&gt;doesn’t
allow&lt;/a&gt; importing
investment transactions unless you have the Premier plan or above. I also
couldn’t &lt;a href="https://github.com/andreasg123/stock-gain-tax-import"&gt;import a TXF
file&lt;/a&gt; because that feature
is only available in the desktop versions of TurboTax.&lt;/p&gt;
&lt;p&gt;This seemed like a great opportunity to try out
&lt;a href="https://github.com/GoogleChrome/puppeteer"&gt;Puppeteer&lt;/a&gt;. It’s a
&lt;a href="https://nodejs.org/"&gt;Node.js&lt;/a&gt; library for controlling
&lt;a href="https://www.google.com/chrome/"&gt;Chrome&lt;/a&gt; and is developed by the Chrome team.&lt;/p&gt;
&lt;p&gt;In the end, I probably &lt;a href="https://xkcd.com/1319/"&gt;spent more time automating the
process&lt;/a&gt; than it would have taken to just enter the
transactions manually, but I learned a new tool, and I hope to reuse the script
in the future. It’s available on &lt;a href="https://github.com/dguo/broker-scribe"&gt;GitHub&lt;/a&gt;
with the name BrokerScribe. Here’s a demo of the end result (running at half
speed):&lt;/p&gt;
&lt;video&gt;
    &lt;source src="https://i.imgur.com/rSXtbz2.mp4" type="video/mp4"&gt;
    &lt;p&gt;Your browser doesn't support this embedded video.&lt;/p&gt;
&lt;/source&gt;&lt;/video&gt;
&lt;h2 id="parsing-the-csv-file"&gt;Parsing the CSV file&lt;a class="anchor" href="#parsing-the-csv-file"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First, I downloaded the
&lt;a href="https://www.irs.gov/forms-pubs/about-form-1099-b"&gt;1099-B&lt;/a&gt; CSV file from
Betterment’s &lt;a href="https://wwws.betterment.com/app/tax_forms"&gt;tax forms page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/iZnRus1.png" alt="Betterment tax forms"&gt;&lt;/p&gt;
&lt;p&gt;After removing an extraneous comma at the end of the header row, I used
&lt;a href="https://github.com/BurntSushi/xsv"&gt;xsv&lt;/a&gt; to look at the available columns.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;$ xsv headers betterment-1099-b.csv&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;1   Account&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;2   Description&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;3   Symbol&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;4   CUSIP&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;5   Date Acquired&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;6   Date Sold&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;7   Gross Proceeds&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;8   Cost or Other Basis&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;9   Gain/(Loss)&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;10  Wash Sale Loss Disallowed&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;11  Federal Income Tax Withheld&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;12  Type of Gain(Loss)&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;13  Noncovered Securities&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;14  Reporting Category&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then I inspected the values to get an idea of what the data looks like.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;$ xsv table betterment-1099-b.csv | xsv sample 3&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;Account                  Description                                                   Symbol  CUSIP      Date Acquired  Date Sold   Gross Proceeds  Cost or Other Basis  Gain/(Loss)  Wash Sale Loss Disallowed  Federal Income Tax Withheld  Type of Gain(Loss)  Noncovered Securities  Reporting Category&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;Danny's Taxable Account  0.004034 sh. Vanguard Total International Bond ETF Class O    BNDX    92203J407  07/09/2018     09/28/2018  $0.22           $0.22                $0.00        $0.00                      $0.00                        Short-term          No                     A&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;Danny's Taxable Account  0.697454 sh. Vanguard FTSE Developed Markets Class O          VEA     921943858  10/05/2015     08/20/2018  $29.66          $25.75               $3.91        $0.00                      $0.00                        Long-term           No                     D&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;Danny's Taxable Account  11.978683 sh. Vanguard FTSE Developed Markets Class O         VEA     921943858  11/16/2015     07/30/2018  $526.10         $443.93              $82.17       $0.00                      $0.00                        Long-term           No                     D&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I used &lt;a href="https://github.com/sindresorhus/neat-csv"&gt;neat-csv&lt;/a&gt; to read in the data.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; fs &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;require&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'fs'&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; csv &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;require&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'neat-csv'&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;async&lt;/span&gt;&lt;span&gt; () &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; transactions &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; fs.&lt;/span&gt;&lt;span&gt;readFileSync&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'betterment-1099-b.csv'&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    transactions &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;csv&lt;/span&gt;&lt;span&gt;(transactions);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;})();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="using-puppeteer"&gt;Using Puppeteer&lt;a class="anchor" href="#using-puppeteer"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I launched Puppeteer in non-headless mode so that the browser UI would actually
appear and be controllable from outside of the script. It launches a bundled
version of Chromium (which Chrome is built on). It’s possible to &lt;a href="https://stackoverflow.com/q/47122579/1481479"&gt;control an
existing installation&lt;/a&gt; of Chrome,
but each version of the library is only guaranteed to work with its bundled
browser.&lt;/p&gt;
&lt;p&gt;I also turned off the default viewport so that &lt;a href="https://github.com/GoogleChrome/puppeteer/issues/3688"&gt;resizing the window would also
resize the viewport&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; puppeteer &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;require&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'puppeteer'&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;async&lt;/span&gt;&lt;span&gt; () &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; browser &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; puppeteer.&lt;/span&gt;&lt;span&gt;launch&lt;/span&gt;&lt;span&gt;({&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        defaultViewport: &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        headless: &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    });&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;})();&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="logging-in"&gt;Logging in&lt;a class="anchor" href="#logging-in"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first step in the TurboTax workflow was logging in.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/leJ1KaV.png" alt="TurboTax login page"&gt;&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; page &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; browser.&lt;/span&gt;&lt;span&gt;newPage&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; page.&lt;/span&gt;&lt;span&gt;goto&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'https://myturbotax.intuit.com/'&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I used &lt;a href="https://github.com/terkelg/prompts"&gt;prompts&lt;/a&gt; to interactively collect
authentication info. I considered passing the info through environment
variables, but I ran into two-factor authentication later, so I needed to be
able to collect a dynamic code.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;const&lt;/span&gt;&lt;span&gt; {email, password} &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;prompts&lt;/span&gt;&lt;span&gt;([&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        type: &lt;/span&gt;&lt;span&gt;'text'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        name: &lt;/span&gt;&lt;span&gt;'email'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        message: &lt;/span&gt;&lt;span&gt;'Email address'&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    },&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        type: &lt;/span&gt;&lt;span&gt;'text'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        name: &lt;/span&gt;&lt;span&gt;'password'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        message: &lt;/span&gt;&lt;span&gt;'Password'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        style: &lt;/span&gt;&lt;span&gt;'password'&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;]);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I set the input values with JS after finding out &lt;a href="https://stackoverflow.com/a/46098448/1481479"&gt;how to pass a
variable&lt;/a&gt; to
&lt;a href="https://pptr.dev/#?product=Puppeteer&amp;amp;version=master&amp;amp;show=api-pageevaluatepagefunction-args"&gt;evaluate&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; page.&lt;/span&gt;&lt;span&gt;evaluate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;email&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    document.&lt;/span&gt;&lt;span&gt;getElementById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'ius-identifier'&lt;/span&gt;&lt;span&gt;).value &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; email;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    document.&lt;/span&gt;&lt;span&gt;getElementById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'ius-remember'&lt;/span&gt;&lt;span&gt;).checked &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}, email);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, I had to figure out how to handle waiting for the UI to be “ready” after
hitting submit. In my experience, this part is a common source of flakiness for
UI tests using tools like &lt;a href="https://webdriver.io/"&gt;WebdriverIO&lt;/a&gt; and
&lt;a href="http://nightwatchjs.org/"&gt;Nightwatch.js&lt;/a&gt;. I tried following the
&lt;a href="https://pptr.dev/#?product=Puppeteer&amp;amp;version=master&amp;amp;show=api-pagewaitfornavigationoptions"&gt;example&lt;/a&gt;
in the documentation.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Promise&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;all&lt;/span&gt;&lt;span&gt;([&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    page.&lt;/span&gt;&lt;span&gt;waitForNavigation&lt;/span&gt;&lt;span&gt;(),&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    page.&lt;/span&gt;&lt;span&gt;click&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'#ius-sign-in-submit-btn'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;]);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unfortunately, I kept getting this error: &lt;code&gt;TimeoutError: Navigation Timeout Exceeded: 30000ms exceeded&lt;/code&gt;. At first, I tried playing around with different
&lt;code&gt;waitForNavigation&lt;/code&gt; options, but then I realized that the site was built as a
&lt;a href="https://en.wikipedia.org/wiki/Single-page_application"&gt;single-page
application&lt;/a&gt;. While
Puppeteer &lt;a href="https://github.com/GoogleChrome/puppeteer#q-whats-considered-a-navigation"&gt;does
treat&lt;/a&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/History"&gt;History API&lt;/a&gt; usage as
a navigation event, the site doesn’t use the History API. It merely updates the
form on the page. I tried to wait for the existence of the password field
instead using
&lt;a href="https://pptr.dev/#?product=Puppeteer&amp;amp;version=master&amp;amp;show=api-pagewaitforselectororfunctionortimeout-options-args"&gt;waitFor&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/8Tlu496.png" alt="TurboTax password field"&gt;&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Promise&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;all&lt;/span&gt;&lt;span&gt;([&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    page.&lt;/span&gt;&lt;span&gt;waitFor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;'#ius-sign-in-mfa-password-collection-current-password'&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    ),&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    page.&lt;/span&gt;&lt;span&gt;click&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'#ius-sign-in-submit-btn'&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;]);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This solution worked. I filled in the password the same way that I filled in the
email. The next part of the form was for two-factor
authentication, using a code that was sent to my email. However, it only
triggered some of the time, even after unchecking remember me on the first part
of the log in form. This meant that I didn’t have a stable element to wait for.
My original solution was to just put in a sleep and then check if the two-factor
authentication form appeared.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; page.&lt;/span&gt;&lt;span&gt;waitFor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;5000&lt;/span&gt;&lt;span&gt;); &lt;/span&gt;&lt;span&gt;// in milliseconds&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; ((&lt;/span&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; page.&lt;/span&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'#ius-mfa-options-submit-btn'&lt;/span&gt;&lt;span&gt;)) &lt;/span&gt;&lt;span&gt;!==&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;// collect the code, and submit it&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, I now realize that a much better solution would have been to use a
selector with two elements, one for each possible path, with something like:&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; page.&lt;/span&gt;&lt;span&gt;waitFor&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'#ius-mfa-options-submit-btn, #dashboard'&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This method avoids the antipattern of sleeping with a hardcoded duration, which
slows things down and makes the code more brittle since the duration might not
be long enough if the server is slow to respond, the client is on a poor
internet connection, etc.&lt;/p&gt;
&lt;h2 id="entering-transactions"&gt;Entering transactions&lt;a class="anchor" href="#entering-transactions"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After logging in, I had to enter transactions to fill this page.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/xLZPby9.png" alt="empty Betterment sales page"&gt;&lt;/p&gt;
&lt;p&gt;I matched up each field on this form to the respective column in the CSV file.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/1BuZOY2.png" alt="empty transaction form"&gt;&lt;/p&gt;
&lt;p&gt;I continued to set the values directly with in-page JS.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; page.&lt;/span&gt;&lt;span&gt;evaluate&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;transaction&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    document.&lt;/span&gt;&lt;span&gt;getElementById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'edt_00'&lt;/span&gt;&lt;span&gt;).value &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; transaction.description;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    document.&lt;/span&gt;&lt;span&gt;getElementById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'edt_01'&lt;/span&gt;&lt;span&gt;).value &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; transaction.dateSold;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    document.&lt;/span&gt;&lt;span&gt;getElementById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'edt_02'&lt;/span&gt;&lt;span&gt;).value &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; transaction.dateAcquired;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    document.&lt;/span&gt;&lt;span&gt;getElementById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'edt_03'&lt;/span&gt;&lt;span&gt;).value &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; transaction.grossProceeds;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    document.&lt;/span&gt;&lt;span&gt;getElementById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'edt_04'&lt;/span&gt;&lt;span&gt;).value &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; transaction.costBasis;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; category;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (transaction.reportingCategory &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;'D'&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        category &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;'4'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (transaction.reportingCategory &lt;/span&gt;&lt;span&gt;===&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;'A'&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        category &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;'1'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;throw&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;Error&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'Unexpected reporting category'&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    document.&lt;/span&gt;&lt;span&gt;getElementById&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'combo_00'&lt;/span&gt;&lt;span&gt;).value &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; category;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}, transaction);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But I ran into validation errors, even though I could see the values in the
fields before trying to continue. I received an error message, and the fields
were blanked out.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/WCc92oi.png" alt="form validation errors"&gt;&lt;/p&gt;
&lt;p&gt;I suspected that the form has validation that runs as the user enters data. By
setting the value directly, the validation was bypassed, and it thought the user
had left the fields blank. After reading through &lt;a href="https://github.com/GoogleChrome/puppeteer/issues/441"&gt;this
issue&lt;/a&gt; and &lt;a href="https://stackoverflow.com/q/45864516/1481479"&gt;this
question&lt;/a&gt;, I found a better
approach, which was to use the
&lt;a href="https://pptr.dev/#?product=Puppeteer&amp;amp;version=v1.14.0&amp;amp;show=api-pagetypeselector-text-options"&gt;type&lt;/a&gt;
and
&lt;a href="https://pptr.dev/#?product=Puppeteer&amp;amp;version=v1.14.0&amp;amp;show=api-pageselectselector-values"&gt;select&lt;/a&gt;
methods instead of setting values with JS. Using these methods fixed the issue.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; page.&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'#edt_00'&lt;/span&gt;&lt;span&gt;, transaction.description);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; page.&lt;/span&gt;&lt;span&gt;select&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'#combo_00'&lt;/span&gt;&lt;span&gt;, category);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After submitting the transaction, there was a radio selection to choose if I
wanted to submit another one. I tried clicking the “enter a new transaction”
radio with Puppeteer’s
&lt;a href="https://pptr.dev/#?product=Puppeteer&amp;amp;version=master&amp;amp;show=api-pageclickselector-options"&gt;click&lt;/a&gt;
method.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; page.&lt;/span&gt;&lt;span&gt;click&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'#radio_00&lt;/span&gt;&lt;span&gt;\\&lt;/span&gt;&lt;span&gt;:0'&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But this time, the more ergonomic approach didn’t work. After hitting continue,
the page thought I didn’t make a choice. I tried clicking the radio with JS, and
I was able to continue.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;await&lt;/span&gt;&lt;span&gt; page.&lt;/span&gt;&lt;span&gt;evaluate&lt;/span&gt;&lt;span&gt;(() &lt;/span&gt;&lt;span&gt;=&amp;gt;&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    document.&lt;/span&gt;&lt;span&gt;querySelector&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'#radio_00&lt;/span&gt;&lt;span&gt;\\&lt;/span&gt;&lt;span&gt;:0'&lt;/span&gt;&lt;span&gt;).&lt;/span&gt;&lt;span&gt;click&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;});&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The final issue I ran into was that I would get &lt;code&gt;Error: Node is either not visible or not an HTMLElement&lt;/code&gt; when trying to fill in info on the new
transaction page. My guess for the root cause is that the site animates some DOM
changes, like the appearance of the form, most likely with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions"&gt;CSS
transitions&lt;/a&gt;.
Puppeteer’s &lt;code&gt;waitFor&lt;/code&gt; only detects the element’s existence in the DOM. It
doesn’t know if the element is visible, if click handlers have been attached,
etc. I added a one second sleep as a workaround. A future improvement would be to
find a way to wait for the end of any transitions.&lt;/p&gt;
&lt;p&gt;In the end, the script took about 30 minutes to fill in all my transactions. I
checked several of them to verify that the information was transcribed
correctly.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/jvcFAhO.png" alt="filled Betterment sales page"&gt;&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;a class="anchor" href="#conclusion"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have three main takeaways from my first experiment with Puppeteer. The first
is that I should default to using the high-level API (e.g. &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;select&lt;/code&gt;,
&lt;code&gt;click&lt;/code&gt;) first before resorting to injecting JS with &lt;code&gt;evaluate&lt;/code&gt;. The high-level
API is cleaner and better simulates a real human being using the website.&lt;/p&gt;
&lt;p&gt;The second is that I need to be smarter about waiting for things to be ready
rather than adding sleeps. I’ve resorted to sleeping quite often in my past
end-to-end test code, but it’s something I need to minimize going forward.&lt;/p&gt;
&lt;p&gt;The third is that handling websites that use fancier techniques like animations
or are built as SPAs can be tricky. I
&lt;a href="https://github.com/GoogleChrome/puppeteer/issues/372"&gt;found&lt;/a&gt;
&lt;a href="https://github.com/GoogleChrome/puppeteer/issues/1805"&gt;multiple&lt;/a&gt;
&lt;a href="https://github.com/GoogleChrome/puppeteer/issues/2977"&gt;issues&lt;/a&gt; with people
having problems interacting with elements, and a common explanation is that the
site’s JS hasn’t fully run yet.&lt;/p&gt;
&lt;p&gt;Regardless, I see a lot of potential in using Puppeteer, especially for
automated tests. The author of &lt;a href="http://phantomjs.org/"&gt;PhantomJS&lt;/a&gt; &lt;a href="https://groups.google.com/d/msg/phantomjs/9aI5d-LDuNE/5Z3SMZrqAQAJ"&gt;stopped
development&lt;/a&gt;
after headless Chrome was announced. Another big tool in this field is
&lt;a href="https://www.seleniumhq.org/"&gt;Selenium&lt;/a&gt;, but it’s not very reliable in my
experience, harder to set up, and resource heavy. I’m optimistic that Puppeteer
will prove to be a better option for most cases.&lt;/p&gt;
&lt;p&gt;One concern is that Puppeteer only works for Chrome, but the Puppeteer
developers appear to be working on &lt;a href="https://www.npmjs.com/package/puppeteer-firefox"&gt;experimental
support&lt;/a&gt; for Firefox.
&lt;a href="https://www.microsoft.com/en-us/windows/microsoft-edge"&gt;Edge&lt;/a&gt; is also
&lt;a href="https://arstechnica.com/gadgets/2018/12/post-mortem-tying-edge-to-windows-10-was-a-fatal-error/"&gt;switching to
Chromium&lt;/a&gt;,
and most fringe browsers like &lt;a href="https://www.opera.com/"&gt;Opera&lt;/a&gt; and
&lt;a href="https://brave.com/"&gt;Brave&lt;/a&gt; run on Chromium. For non-testing purposes, such as
taking screenshots and automating workflows like BrokerScribe does, browser
compatibility doesn’t really matter, and Puppeteer is shaping up to be a great
alternative to Selenium.&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/automating-turbotax-data-entry-with-puppeteer</guid><pubDate>Sun, 12 May 2019 00:00:00 GMT</pubDate></item><item><title>How to Add Copy to Clipboard Buttons to Code Blocks in Hugo</title><link>https://www.dannyguo.com/blog/how-to-add-copy-to-clipboard-buttons-to-code-blocks-in-hugo</link><description>&lt;article&gt;
        &lt;h1&gt;How to Add Copy to Clipboard Buttons to Code Blocks in Hugo&lt;/h1&gt;

        &lt;div class="subheader"&gt;
            
            
            &lt;time datetime="2019-03-22"&gt;
                March 22, 2019
            &lt;/time&gt;
             · 
            965 words  ·  ~5 minutes to read
            
        &lt;/div&gt;

        &lt;p&gt;A small quality of life improvement for programming-related websites is to add
copy to clipboard buttons to code blocks. When a visitor wants to copy a code
example or a shell command, it’s nice to be able to just hit a button rather
than manually select the text, right click, and press copy.&lt;/p&gt;
&lt;p&gt;I use &lt;a href="https://gohugo.io/"&gt;Hugo&lt;/a&gt; to build my &lt;a href="https://www.dannyguo.com/"&gt;personal
website&lt;/a&gt;. While Hugo has built-in support for &lt;a href="https://gohugo.io/content-management/syntax-highlighting/"&gt;syntax
highlighting&lt;/a&gt;, it
doesn’t support copy buttons. Here is how I added the feature to my website. The
end result looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.imgur.com/8SBpdIT.png" alt="code block with a copy button"&gt;&lt;/p&gt;
&lt;h2 id="adding-the-buttons"&gt;Adding the buttons&lt;a class="anchor" href="#adding-the-buttons"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I inspected the source of a page with code blocks and found that Hugo generates
each block with markup like this:&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"highlight"&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &amp;lt;&lt;/span&gt;&lt;span&gt;pre&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &amp;lt;&lt;/span&gt;&lt;span&gt;code&lt;/span&gt;&lt;span&gt;&amp;gt;...&amp;lt;/&lt;/span&gt;&lt;span&gt;code&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &amp;lt;/&lt;/span&gt;&lt;span&gt;pre&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Code blocks without syntax highlighting have the same structure but without the
surrounding highlight div. To account for both cases, I selected for
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/code"&gt;code&lt;/a&gt; elements
that are children of
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre"&gt;pre&lt;/a&gt; elements.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;document.&lt;/span&gt;&lt;span&gt;querySelectorAll&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'pre &amp;gt; code'&lt;/span&gt;&lt;span&gt;).&lt;/span&gt;&lt;span&gt;forEach&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;codeBlock&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; button &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.&lt;/span&gt;&lt;span&gt;createElement&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'button'&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    button.className &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;'copy-code-button'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    button.type &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;'button'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    button.innerText &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;'Copy'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; pre &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; codeBlock.parentNode;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (pre.parentNode.classList.&lt;/span&gt;&lt;span&gt;contains&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'highlight'&lt;/span&gt;&lt;span&gt;)) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; highlight &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; pre.parentNode;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        highlight.parentNode.&lt;/span&gt;&lt;span&gt;insertBefore&lt;/span&gt;&lt;span&gt;(button, highlight);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        pre.parentNode.&lt;/span&gt;&lt;span&gt;insertBefore&lt;/span&gt;&lt;span&gt;(button, pre);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;});&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For many implementations of copy code buttons that I’ve seen, the button is
located in the top right or bottom right corner of the code block. However, I’ve
noticed that the button can cover up some of the code if the line is too long,
especially on mobile. To avoid this possibility, I placed each button before the
entire code block.&lt;/p&gt;
&lt;p&gt;Some implementations only show the button when the user hovers over the code
block, but for discoverability, I left the buttons always visible.&lt;/p&gt;
&lt;p&gt;For styling the buttons, I used this CSS:&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;.copy-code-button&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;color&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;#272822&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;background-color&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;#FFF&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;border-color&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;#272822&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;border&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;solid&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;border-radius&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;/* right-align */&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;display&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;block&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;margin-left&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;auto&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;margin-right&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;margin-bottom&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;-2&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;padding&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;px&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;font-size&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;0.8&lt;/span&gt;&lt;span&gt;em&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;.copy-code-button:hover&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;cursor&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;pointer&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;background-color&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;#F2F2F2&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;.copy-code-button:focus&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;/* Avoid an ugly focus outline on click in Chrome,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;       but darken the button for accessibility.&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;       See https://stackoverflow.com/a/25298082/1481479 */&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;background-color&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;#E6E6E6&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;outline&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;.copy-code-button:active&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;background-color&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;#D9D9D9&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;.highlight&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;pre&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;/* Avoid pushing up the copy buttons. */&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;margin&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="interacting-with-the-clipboard"&gt;Interacting with the clipboard&lt;a class="anchor" href="#interacting-with-the-clipboard"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Next, I investigated how to &lt;a href="https://stackoverflow.com/q/400212/1481479"&gt;copy to the clipboard using
JavaScript&lt;/a&gt;. The most popular
library for doing so is &lt;a href="https://clipboardjs.com/"&gt;clipboard.js&lt;/a&gt;, but I wanted
to avoid bringing in a dependency if possible.&lt;/p&gt;
&lt;p&gt;One way is to use
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand"&gt;execCommand&lt;/a&gt;
with &lt;code&gt;document.execCommand('copy')&lt;/code&gt;, which copies the current text selection.
&lt;a href="https://github.com/zenorocha/clipboard.js"&gt;Under the hood&lt;/a&gt;, clipboard.js uses
this method.&lt;/p&gt;
&lt;p&gt;However, there is a newer approach, the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API"&gt;Clipboard
API&lt;/a&gt;. It has
&lt;a href="https://developers.google.com/web/updates/2018/03/clipboardapi"&gt;several
advantages&lt;/a&gt;:
it’s asynchronous, takes arbitrary text/data (so it doesn’t have to already
exist on the page), and has a better story for dealing with permissions.
Chrome, Firefox, and Opera &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API#Browser_compatibility"&gt;support
it&lt;/a&gt;
already. For other browsers, there is a
&lt;a href="https://github.com/lgarron/clipboard-polyfill"&gt;polyfill&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I put the code in a function and added a click handler. I used
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText"&gt;innerText&lt;/a&gt;
to get the code to be copied. After the copy operation, the button displays
either an error message or a success message that lasts for two seconds.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;addCopyButtons&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;clipboard&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    document.&lt;/span&gt;&lt;span&gt;querySelectorAll&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'pre &amp;gt; code'&lt;/span&gt;&lt;span&gt;).&lt;/span&gt;&lt;span&gt;forEach&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;codeBlock&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; button &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.&lt;/span&gt;&lt;span&gt;createElement&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'button'&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        button.className &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;'copy-code-button'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        button.type &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;'button'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        button.innerText &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;'Copy'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        button.&lt;/span&gt;&lt;span&gt;addEventListener&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'click'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            clipboard.&lt;/span&gt;&lt;span&gt;writeText&lt;/span&gt;&lt;span&gt;(codeBlock.innerText).&lt;/span&gt;&lt;span&gt;then&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;/* Chrome doesn't seem to blur automatically,&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                   leaving the button in a focused state. */&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                button.&lt;/span&gt;&lt;span&gt;blur&lt;/span&gt;&lt;span&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                button.innerText &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;'Copied!'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                &lt;/span&gt;&lt;span&gt;setTimeout&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                    button.innerText &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;'Copy'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                }, &lt;/span&gt;&lt;span&gt;2000&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            }, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (&lt;/span&gt;&lt;span&gt;error&lt;/span&gt;&lt;span&gt;) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;                button.innerText &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;'Error'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            });&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        });&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; pre &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; codeBlock.parentNode;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (pre.parentNode.classList.&lt;/span&gt;&lt;span&gt;contains&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'highlight'&lt;/span&gt;&lt;span&gt;)) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; highlight &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; pre.parentNode;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            highlight.parentNode.&lt;/span&gt;&lt;span&gt;insertBefore&lt;/span&gt;&lt;span&gt;(button, highlight);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;            pre.parentNode.&lt;/span&gt;&lt;span&gt;insertBefore&lt;/span&gt;&lt;span&gt;(button, pre);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        }&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    });&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, I added a check for whether or not the browser supports the Clipboard API.
If not, the script loads the polyfill from
&lt;a href="https://cdnjs.com/libraries/clipboard-polyfill"&gt;CDNJS&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (navigator &lt;/span&gt;&lt;span&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span&gt; navigator.clipboard) {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;addCopyButtons&lt;/span&gt;&lt;span&gt;(navigator.clipboard);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;} &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt;&lt;span&gt; script &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; document.&lt;/span&gt;&lt;span&gt;createElement&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;'script'&lt;/span&gt;&lt;span&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    script.src &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;'https://cdnjs.cloudflare.com/ajax/libs/clipboard-polyfill/2.7.0/clipboard-polyfill.promise.js'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    script.integrity &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;'sha256-waClS2re9NUbXRsryKoof+F9qc1gjjIhc2eT7ZbIv94='&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    script.crossOrigin &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;'anonymous'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    script.&lt;/span&gt;&lt;span&gt;onload&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;() {&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;addCopyButtons&lt;/span&gt;&lt;span&gt;(clipboard);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    };&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    document.body.&lt;/span&gt;&lt;span&gt;appendChild&lt;/span&gt;&lt;span&gt;(script);&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the Clipboard API becomes ubiquitous, I’ll remove the polyfill code.&lt;/p&gt;
&lt;h2 id="smart-loading-with-hugo"&gt;Smart loading with Hugo&lt;a class="anchor" href="#smart-loading-with-hugo"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After I got the functionality to work, I thought about how to include the
script. I had three options. The first was to indiscriminately include it on
every page. The script is small, but for optimization, I wanted to only include
it when it’s actually needed, saving a bit of bandwidth and a network request
(or two, if the polyfill is needed).&lt;/p&gt;
&lt;p&gt;The second option was to use a &lt;a href="https://gohugo.io/content-management/front-matter/#user-defined"&gt;custom Hugo front matter
variable&lt;/a&gt;.
With this method, I’d set a flag on every post that has a code block.  The
template could then check for this flag. However, this approach involves manual
work and runs the risk of me forgetting to do it.&lt;/p&gt;
&lt;p&gt;The third option was to find a way to use Hugo to figure out which pages have at
least one code block. A regex seemed like the way to go. I used Hugo’s
&lt;a href="https://gohugo.io/functions/findre/"&gt;findRE&lt;/a&gt; function to determine if the
HTML seems to contain a &lt;code&gt;pre&lt;/code&gt; element.&lt;/p&gt;
&lt;pre class="astro-code monokai" tabindex="0"&gt;&lt;code&gt;&lt;span class="line"&gt;&lt;span&gt;{{ &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; (findRE &lt;/span&gt;&lt;span&gt;"&amp;lt;pre"&lt;/span&gt;&lt;span&gt; .Content &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;) }}&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script src&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"/js/copy-code-button.js"&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="line"&gt;&lt;span&gt;{{ end }}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I passed it a limit parameter of &lt;code&gt;1&lt;/code&gt; because I only care if the page &lt;em&gt;has&lt;/em&gt; a code
block or not, not the total number of code blocks.&lt;/p&gt;
&lt;p&gt;Keep in mind that this script should be loaded after the page content,
preferably at the end of the body so that it doesn’t block rendering. Otherwise,
the selector might run before the code blocks actually exist.&lt;/p&gt;
&lt;h2 id="non-hugo-websites"&gt;Non-Hugo websites&lt;a class="anchor" href="#non-hugo-websites"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This solution should easily work for non-Hugo websites as well. The only part of
the script that is specific to Hugo is the &lt;code&gt;pre &amp;gt; code&lt;/code&gt; selector. Modifying the
selector and possibly where the button is inserted should be all that is needed.&lt;/p&gt;
&lt;h2 id="codecopy"&gt;CodeCopy&lt;a class="anchor" href="#codecopy"&gt;&lt;svg class="icon icon-link"&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/zenorocha/codecopy"&gt;CodeCopy&lt;/a&gt; is a browser extension for
&lt;a href="https://chrome.google.com/webstore/detail/codecopy/fkbfebkcoelajmhanocgppanfoojcdmg"&gt;Chrome&lt;/a&gt;
and &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/codecopy/"&gt;Firefox&lt;/a&gt; that
adds copy buttons to code blocks on many websites that are likely to have them,
such as &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; and &lt;a href="https://stackoverflow.com/"&gt;Stack
Overflow&lt;/a&gt;. It’s made by the &lt;a href="https://zenorocha.com/"&gt;same
person&lt;/a&gt; behind clipboard.js.&lt;/p&gt;
    &lt;/article&gt;

    </description><guid isPermaLink="true">https://www.dannyguo.com/blog/how-to-add-copy-to-clipboard-buttons-to-code-blocks-in-hugo</guid><pubDate>Fri, 22 Mar 2019 00:00:00 GMT</pubDate></item></channel></rss>